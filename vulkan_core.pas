{$IFNDEF VULKAN_CORE_H_ }
const VULKAN_CORE_H_ = 1;

(*
** Copyright 2015-2021 The Khronos Group Inc.
**
** SPDX-License-Identifier: Apache-2.0
*)

(*
** This header is generated from the Khronos Vulkan XML API Registry.
**
*)


{$IFDEF __cplusplus }
extern "C" {
{$ENDIF}



const VK_VERSION_1_0 = 1;
#include "vk_platform.h"

#define VK_DEFINE_HANDLE(object) typedef struct object##_T* object;


{$IF not Defined( VK_DEFINE_NON_DISPATCHABLE_HANDLE ) }
{$IF Defined( __LP64__ ) or Defined( _WIN64 ) or (Defined( __x86_64__ ) and not Defined( __ILP32__ ) ) or Defined( _M_X64 ) or Defined( __ia64 ) or defined (_M_IA64) or Defined( __aarch64__ ) or Defined( __powerpc64__ ) }
        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef struct object##_T *object;
{$ELSE}
        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef uint64_t object;
{$ENDIF}
{$ENDIF}

#define VK_MAKE_VERSION(major, minor, patch) \
    ((((uint32_t)(major)) << 22) | (((uint32_t)(minor)) << 12) | ((uint32_t)(patch)))

// DEPRECATED: This define has been removed. Specific version defines (e.g. VK_API_VERSION_1_0), or the VK_MAKE_VERSION macro, should be used instead.
//#define VK_API_VERSION VK_MAKE_VERSION(1, 0, 0) // Patch version should always be set to 0

// Vulkan 1.0 version number
#define VK_API_VERSION_1_0 VK_MAKE_VERSION(1, 0, 0)// Patch version should always be set to 0

// Version of this file
const VK_HEADER_VERSION = 170;

// Complete version of this file
#define VK_HEADER_VERSION_COMPLETE VK_MAKE_VERSION(1, 2, VK_HEADER_VERSION)

#define VK_VERSION_MAJOR(version) ((uint32_t)(version) >> 22)
#define VK_VERSION_MINOR(version) (((uint32_t)(version) >> 12) & 0x3ff)
#define VK_VERSION_PATCH(version) ((uint32_t)(version) & 0xfff)

const VK_NULL_HANDLE = 0;

type VkBool32 = uint32_t;
type VkDeviceAddress = uint64_t;
type VkDeviceSize = uint64_t;
type VkFlags = uint32_t;
type VkSampleMask = uint32_t;
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkImage)
VK_DEFINE_HANDLE(VkInstance)
VK_DEFINE_HANDLE(VkPhysicalDevice)
VK_DEFINE_HANDLE(VkDevice)
VK_DEFINE_HANDLE(VkQueue)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSemaphore)
VK_DEFINE_HANDLE(VkCommandBuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkFence)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDeviceMemory)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkEvent)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkQueryPool)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBufferView)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkImageView)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkShaderModule)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipelineCache)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipelineLayout)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipeline)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkRenderPass)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorSetLayout)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSampler)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorSet)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorPool)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkFramebuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkCommandPool)
const VK_ATTACHMENT_UNUSED              = (~0U);
const VK_FALSE                          = 0;
const VK_LOD_CLAMP_NONE                 = 1000.0f;
const VK_QUEUE_FAMILY_IGNORED           = (~0U);
const VK_REMAINING_ARRAY_LAYERS         = (~0U);
const VK_REMAINING_MIP_LEVELS           = (~0U);
const VK_SUBPASS_EXTERNAL               = (~0U);
const VK_TRUE                           = 1;
const VK_WHOLE_SIZE                     = (~0ULL);
const VK_MAX_MEMORY_TYPES               = 32;
const VK_MAX_MEMORY_HEAPS               = 16;
const VK_MAX_PHYSICAL_DEVICE_NAME_SIZE  = 256;
const VK_UUID_SIZE                      = 16;
const VK_MAX_EXTENSION_NAME_SIZE        = 256;
const VK_MAX_DESCRIPTION_SIZE           = 256;

type VkResult = (
       VK_SUCCESS = 0,
       VK_NOT_READY = 1,
       VK_TIMEOUT = 2,
       VK_EVENT_SET = 3,
       VK_EVENT_RESET = 4,
       VK_INCOMPLETE = 5,
       VK_ERROR_OUT_OF_HOST_MEMORY = -1,
       VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
       VK_ERROR_INITIALIZATION_FAILED = -3,
       VK_ERROR_DEVICE_LOST = -4,
       VK_ERROR_MEMORY_MAP_FAILED = -5,
       VK_ERROR_LAYER_NOT_PRESENT = -6,
       VK_ERROR_EXTENSION_NOT_PRESENT = -7,
       VK_ERROR_FEATURE_NOT_PRESENT = -8,
       VK_ERROR_INCOMPATIBLE_DRIVER = -9,
       VK_ERROR_TOO_MANY_OBJECTS = -10,
       VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
       VK_ERROR_FRAGMENTED_POOL = -12,
       VK_ERROR_UNKNOWN = -13,
       VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
       VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
       VK_ERROR_FRAGMENTATION = -1000161000,
       VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000,
       VK_ERROR_SURFACE_LOST_KHR = -1000000000,
       VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
       VK_SUBOPTIMAL_KHR = 1000001003,
       VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
       VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
       VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
       VK_ERROR_INVALID_SHADER_NV = -1000012000,
       VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
       VK_ERROR_NOT_PERMITTED_EXT = -1000174001,
       VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000,
       VK_THREAD_IDLE_KHR = 1000268000,
       VK_THREAD_DONE_KHR = 1000268001,
       VK_OPERATION_DEFERRED_KHR = 1000268002,
       VK_OPERATION_NOT_DEFERRED_KHR = 1000268003,
       VK_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000,
       VK_ERROR_OUT_OF_POOL_MEMORY_KHR = VK_ERROR_OUT_OF_POOL_MEMORY,
       VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = VK_ERROR_INVALID_EXTERNAL_HANDLE,
       VK_ERROR_FRAGMENTATION_EXT = VK_ERROR_FRAGMENTATION,
       VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
       VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
       VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED_EXT,
       VK_RESULT_MAX_ENUM = 0x7FFFFFFF
     );

type VkStructureType = (
       VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
       VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
       VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
       VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
       VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
       VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
       VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
       VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
       VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
       VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
       VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
       VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
       VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
       VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
       VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
       VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
       VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
       VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
       VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
       VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
       VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
       VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
       VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
       VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
       VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
       VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
       VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
       VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
       VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
       VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
       VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
       VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
       VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
       VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
       VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
       VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
       VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
       VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
       VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
       VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
       VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
       VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
       VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
       VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
       VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
       VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
       VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
       VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
       VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
       VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
       VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
       VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
       VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
       VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
       VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
       VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
       VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
       VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
       VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
       VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
       VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
       VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
       VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
       VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
       VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
       VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
       VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
       VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
       VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
       VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
       VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
       VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
       VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
       VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
       VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
       VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
       VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
       VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
       VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
       VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
       VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
       VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
       VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
       VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52,
       VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000,
       VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000,
       VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001,
       VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002,
       VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003,
       VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004,
       VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005,
       VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000,
       VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000,
       VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000,
       VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000,
       VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001,
       VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002,
       VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000,
       VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001,
       VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001,
       VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002,
       VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003,
       VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004,
       VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000,
       VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001,
       VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002,
       VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003,
       VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004,
       VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
       VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
       VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
       VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
       VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
       VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
       VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
       VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
       VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
       VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
       VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
       VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
       VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
       VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
       VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
       VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
       VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
       VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
       VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
       VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
       VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001,
       VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002,
       VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000,
       VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001,
       VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
       VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000,
       VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
       VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
       VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
       VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
       VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
       VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
       VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000,
       VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001,
       VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
       VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
       VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
       VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
       VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
       VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
       VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
       VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
       VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
       VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
       VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
       VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
       VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
       VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
       VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
       VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
       VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
       VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
       VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000,
       VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
       VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
       VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
       VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
       VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
       VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
       VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
       VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000,
       VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001,
       VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
       VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
       VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
       VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
       VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
       VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
       VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001,
       VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002,
       VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003,
       VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004,
       VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005,
       VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
       VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001,
       VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002,
       VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000,
       VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
       VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
       VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003,
       VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
       VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
       VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
       VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
       VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
       VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
       VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
       VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
       VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
       VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
       VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
       VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
       VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
       VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001,
       VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002,
       VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003,
       VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
       VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
       VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
       VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
       VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
       VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
       VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009,
       VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010,
       VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011,
       VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001,
       VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015,
       VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016,
       VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013,
       VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001,
       VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002,
       VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003,
       VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004,
       VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005,
       VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
       VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR = 1000163000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR = 1000163001,
       VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002,
       VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005,
       VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001,
       VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003,
       VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004,
       VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005,
       VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006,
       VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009,
       VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011,
       VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000,
       VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000,
       VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001,
       VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000,
       VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
       VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000,
       VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000,
       VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
       VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
       VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002,
       VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000,
       VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000,
       VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002,
       VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000,
       VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000,
       VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000,
       VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001,
       VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002,
       VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003,
       VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004,
       VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000,
       VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000,
       VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001,
       VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = 1000215000,
       VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001,
       VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000,
       VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002,
       VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000,
       VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000,
       VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001,
       VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000,
       VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000,
       VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000,
       VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000,
       VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001,
       VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000,
       VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000,
       VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002,
       VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001,
       VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000,
       VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000,
       VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001,
       VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002,
       VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003,
       VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004,
       VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000,
       VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001,
       VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002,
       VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003,
       VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004,
       VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005,
       VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001,
       VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000,
       VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000,
       VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001,
       VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001,
       VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002,
       VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000,
       VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001,
       VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = 1000297000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000,
       VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001,
       VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = 1000314000,
       VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = 1000314001,
       VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = 1000314002,
       VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = 1000314003,
       VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = 1000314004,
       VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = 1000314005,
       VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = 1000314006,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = 1000314007,
       VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1000314008,
       VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 1000314009,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR = 1000325000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001,
       VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001,
       VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = 1000335000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000,
       VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = 1000337000,
       VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = 1000337001,
       VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = 1000337002,
       VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = 1000337003,
       VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = 1000337004,
       VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = 1000337005,
       VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR = 1000337006,
       VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR = 1000337007,
       VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = 1000337008,
       VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = 1000337009,
       VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = 1000337010,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000,
       VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = 1000351000,
       VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = 1000351002,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
       VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
       VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
       VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
       VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
       VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
       VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
       VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
       VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
       VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
       VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
       VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
       VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
       VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
       VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
       VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
       VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
       VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
       VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
       VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
       VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
       VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
       VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
       VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
       VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
       VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
       VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
       VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
       VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,
       VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_END_INFO,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
       VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
       VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
       VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
       VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
       VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR,
       VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
       VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
       VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
       VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
       VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
       VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
       VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
       VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
       VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
       VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
       VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
       VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
       VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
       VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
       VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
       VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
       VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
       VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
       VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
       VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
       VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
       VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
       VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
       VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
       VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
       VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
       VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
       VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
       VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
       VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
       VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
       VK_STRUCTURE_TYPE_MAX_ENUM = 0x7FFFFFFF
     );

type VkImageLayout = (
       VK_IMAGE_LAYOUT_UNDEFINED = 0,
       VK_IMAGE_LAYOUT_GENERAL = 1,
       VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
       VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
       VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
       VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
       VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
       VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
       VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
       VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
       VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
       VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000,
       VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001,
       VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002,
       VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003,
       VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
       VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
       VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003,
       VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
       VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = 1000314000,
       VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = 1000314001,
       VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
       VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
       VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV,
       VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
       VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
       VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
       VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
       VK_IMAGE_LAYOUT_MAX_ENUM = 0x7FFFFFFF
     );

type VkObjectType = (
       VK_OBJECT_TYPE_UNKNOWN = 0,
       VK_OBJECT_TYPE_INSTANCE = 1,
       VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
       VK_OBJECT_TYPE_DEVICE = 3,
       VK_OBJECT_TYPE_QUEUE = 4,
       VK_OBJECT_TYPE_SEMAPHORE = 5,
       VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
       VK_OBJECT_TYPE_FENCE = 7,
       VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
       VK_OBJECT_TYPE_BUFFER = 9,
       VK_OBJECT_TYPE_IMAGE = 10,
       VK_OBJECT_TYPE_EVENT = 11,
       VK_OBJECT_TYPE_QUERY_POOL = 12,
       VK_OBJECT_TYPE_BUFFER_VIEW = 13,
       VK_OBJECT_TYPE_IMAGE_VIEW = 14,
       VK_OBJECT_TYPE_SHADER_MODULE = 15,
       VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
       VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
       VK_OBJECT_TYPE_RENDER_PASS = 18,
       VK_OBJECT_TYPE_PIPELINE = 19,
       VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
       VK_OBJECT_TYPE_SAMPLER = 21,
       VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
       VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
       VK_OBJECT_TYPE_FRAMEBUFFER = 24,
       VK_OBJECT_TYPE_COMMAND_POOL = 25,
       VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
       VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
       VK_OBJECT_TYPE_SURFACE_KHR = 1000000000,
       VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
       VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000,
       VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
       VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
       VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
       VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
       VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
       VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
       VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
       VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000,
       VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000,
       VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 1000295000,
       VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
       VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,
       VK_OBJECT_TYPE_MAX_ENUM = 0x7FFFFFFF
     );

type VkVendorId = (
       VK_VENDOR_ID_VIV = 0x10001,
       VK_VENDOR_ID_VSI = 0x10002,
       VK_VENDOR_ID_KAZAN = 0x10003,
       VK_VENDOR_ID_CODEPLAY = 0x10004,
       VK_VENDOR_ID_MESA = 0x10005,
       VK_VENDOR_ID_POCL = 0x10006,
       VK_VENDOR_ID_MAX_ENUM = 0x7FFFFFFF
     );

type VkPipelineCacheHeaderVersion = (
       VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
       VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 0x7FFFFFFF
     );

type VkSystemAllocationScope = (
       VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
       VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
       VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
       VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
       VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
       VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 0x7FFFFFFF
     );

type VkInternalAllocationType = (
       VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
       VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 0x7FFFFFFF
     );

type VkFormat = (
       VK_FORMAT_UNDEFINED = 0,
       VK_FORMAT_R4G4_UNORM_PACK8 = 1,
       VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
       VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
       VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
       VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
       VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
       VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
       VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
       VK_FORMAT_R8_UNORM = 9,
       VK_FORMAT_R8_SNORM = 10,
       VK_FORMAT_R8_USCALED = 11,
       VK_FORMAT_R8_SSCALED = 12,
       VK_FORMAT_R8_UINT = 13,
       VK_FORMAT_R8_SINT = 14,
       VK_FORMAT_R8_SRGB = 15,
       VK_FORMAT_R8G8_UNORM = 16,
       VK_FORMAT_R8G8_SNORM = 17,
       VK_FORMAT_R8G8_USCALED = 18,
       VK_FORMAT_R8G8_SSCALED = 19,
       VK_FORMAT_R8G8_UINT = 20,
       VK_FORMAT_R8G8_SINT = 21,
       VK_FORMAT_R8G8_SRGB = 22,
       VK_FORMAT_R8G8B8_UNORM = 23,
       VK_FORMAT_R8G8B8_SNORM = 24,
       VK_FORMAT_R8G8B8_USCALED = 25,
       VK_FORMAT_R8G8B8_SSCALED = 26,
       VK_FORMAT_R8G8B8_UINT = 27,
       VK_FORMAT_R8G8B8_SINT = 28,
       VK_FORMAT_R8G8B8_SRGB = 29,
       VK_FORMAT_B8G8R8_UNORM = 30,
       VK_FORMAT_B8G8R8_SNORM = 31,
       VK_FORMAT_B8G8R8_USCALED = 32,
       VK_FORMAT_B8G8R8_SSCALED = 33,
       VK_FORMAT_B8G8R8_UINT = 34,
       VK_FORMAT_B8G8R8_SINT = 35,
       VK_FORMAT_B8G8R8_SRGB = 36,
       VK_FORMAT_R8G8B8A8_UNORM = 37,
       VK_FORMAT_R8G8B8A8_SNORM = 38,
       VK_FORMAT_R8G8B8A8_USCALED = 39,
       VK_FORMAT_R8G8B8A8_SSCALED = 40,
       VK_FORMAT_R8G8B8A8_UINT = 41,
       VK_FORMAT_R8G8B8A8_SINT = 42,
       VK_FORMAT_R8G8B8A8_SRGB = 43,
       VK_FORMAT_B8G8R8A8_UNORM = 44,
       VK_FORMAT_B8G8R8A8_SNORM = 45,
       VK_FORMAT_B8G8R8A8_USCALED = 46,
       VK_FORMAT_B8G8R8A8_SSCALED = 47,
       VK_FORMAT_B8G8R8A8_UINT = 48,
       VK_FORMAT_B8G8R8A8_SINT = 49,
       VK_FORMAT_B8G8R8A8_SRGB = 50,
       VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
       VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
       VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
       VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
       VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
       VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
       VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
       VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
       VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
       VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
       VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
       VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
       VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
       VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
       VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
       VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
       VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
       VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
       VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
       VK_FORMAT_R16_UNORM = 70,
       VK_FORMAT_R16_SNORM = 71,
       VK_FORMAT_R16_USCALED = 72,
       VK_FORMAT_R16_SSCALED = 73,
       VK_FORMAT_R16_UINT = 74,
       VK_FORMAT_R16_SINT = 75,
       VK_FORMAT_R16_SFLOAT = 76,
       VK_FORMAT_R16G16_UNORM = 77,
       VK_FORMAT_R16G16_SNORM = 78,
       VK_FORMAT_R16G16_USCALED = 79,
       VK_FORMAT_R16G16_SSCALED = 80,
       VK_FORMAT_R16G16_UINT = 81,
       VK_FORMAT_R16G16_SINT = 82,
       VK_FORMAT_R16G16_SFLOAT = 83,
       VK_FORMAT_R16G16B16_UNORM = 84,
       VK_FORMAT_R16G16B16_SNORM = 85,
       VK_FORMAT_R16G16B16_USCALED = 86,
       VK_FORMAT_R16G16B16_SSCALED = 87,
       VK_FORMAT_R16G16B16_UINT = 88,
       VK_FORMAT_R16G16B16_SINT = 89,
       VK_FORMAT_R16G16B16_SFLOAT = 90,
       VK_FORMAT_R16G16B16A16_UNORM = 91,
       VK_FORMAT_R16G16B16A16_SNORM = 92,
       VK_FORMAT_R16G16B16A16_USCALED = 93,
       VK_FORMAT_R16G16B16A16_SSCALED = 94,
       VK_FORMAT_R16G16B16A16_UINT = 95,
       VK_FORMAT_R16G16B16A16_SINT = 96,
       VK_FORMAT_R16G16B16A16_SFLOAT = 97,
       VK_FORMAT_R32_UINT = 98,
       VK_FORMAT_R32_SINT = 99,
       VK_FORMAT_R32_SFLOAT = 100,
       VK_FORMAT_R32G32_UINT = 101,
       VK_FORMAT_R32G32_SINT = 102,
       VK_FORMAT_R32G32_SFLOAT = 103,
       VK_FORMAT_R32G32B32_UINT = 104,
       VK_FORMAT_R32G32B32_SINT = 105,
       VK_FORMAT_R32G32B32_SFLOAT = 106,
       VK_FORMAT_R32G32B32A32_UINT = 107,
       VK_FORMAT_R32G32B32A32_SINT = 108,
       VK_FORMAT_R32G32B32A32_SFLOAT = 109,
       VK_FORMAT_R64_UINT = 110,
       VK_FORMAT_R64_SINT = 111,
       VK_FORMAT_R64_SFLOAT = 112,
       VK_FORMAT_R64G64_UINT = 113,
       VK_FORMAT_R64G64_SINT = 114,
       VK_FORMAT_R64G64_SFLOAT = 115,
       VK_FORMAT_R64G64B64_UINT = 116,
       VK_FORMAT_R64G64B64_SINT = 117,
       VK_FORMAT_R64G64B64_SFLOAT = 118,
       VK_FORMAT_R64G64B64A64_UINT = 119,
       VK_FORMAT_R64G64B64A64_SINT = 120,
       VK_FORMAT_R64G64B64A64_SFLOAT = 121,
       VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
       VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
       VK_FORMAT_D16_UNORM = 124,
       VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
       VK_FORMAT_D32_SFLOAT = 126,
       VK_FORMAT_S8_UINT = 127,
       VK_FORMAT_D16_UNORM_S8_UINT = 128,
       VK_FORMAT_D24_UNORM_S8_UINT = 129,
       VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
       VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
       VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
       VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
       VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
       VK_FORMAT_BC2_UNORM_BLOCK = 135,
       VK_FORMAT_BC2_SRGB_BLOCK = 136,
       VK_FORMAT_BC3_UNORM_BLOCK = 137,
       VK_FORMAT_BC3_SRGB_BLOCK = 138,
       VK_FORMAT_BC4_UNORM_BLOCK = 139,
       VK_FORMAT_BC4_SNORM_BLOCK = 140,
       VK_FORMAT_BC5_UNORM_BLOCK = 141,
       VK_FORMAT_BC5_SNORM_BLOCK = 142,
       VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
       VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
       VK_FORMAT_BC7_UNORM_BLOCK = 145,
       VK_FORMAT_BC7_SRGB_BLOCK = 146,
       VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
       VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
       VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
       VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
       VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
       VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
       VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
       VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
       VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
       VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
       VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
       VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
       VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
       VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
       VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
       VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
       VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
       VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
       VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
       VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
       VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
       VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
       VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
       VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
       VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
       VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
       VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
       VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
       VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
       VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
       VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
       VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
       VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
       VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
       VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
       VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
       VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
       VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
       VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000,
       VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001,
       VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
       VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
       VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
       VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
       VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
       VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007,
       VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
       VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
       VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
       VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
       VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
       VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
       VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
       VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
       VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
       VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
       VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
       VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
       VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
       VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
       VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
       VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
       VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
       VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
       VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
       VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
       VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
       VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
       VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
       VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
       VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
       VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
       VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
       VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
       VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
       VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
       VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
       VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
       VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
       VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
       VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000,
       VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001,
       VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002,
       VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003,
       VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004,
       VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005,
       VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006,
       VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007,
       VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008,
       VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009,
       VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010,
       VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011,
       VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012,
       VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013,
       VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000,
       VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001,
       VK_FORMAT_G8B8G8R8_422_UNORM_KHR = VK_FORMAT_G8B8G8R8_422_UNORM,
       VK_FORMAT_B8G8R8G8_422_UNORM_KHR = VK_FORMAT_B8G8R8G8_422_UNORM,
       VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
       VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
       VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
       VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
       VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
       VK_FORMAT_R10X6_UNORM_PACK16_KHR = VK_FORMAT_R10X6_UNORM_PACK16,
       VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
       VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
       VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
       VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
       VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
       VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
       VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
       VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
       VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
       VK_FORMAT_R12X4_UNORM_PACK16_KHR = VK_FORMAT_R12X4_UNORM_PACK16,
       VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
       VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
       VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
       VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
       VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
       VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
       VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
       VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
       VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
       VK_FORMAT_G16B16G16R16_422_UNORM_KHR = VK_FORMAT_G16B16G16R16_422_UNORM,
       VK_FORMAT_B16G16R16G16_422_UNORM_KHR = VK_FORMAT_B16G16R16G16_422_UNORM,
       VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
       VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
       VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
       VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
       VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
       VK_FORMAT_MAX_ENUM = 0x7FFFFFFF
     );

type VkImageTiling = (
       VK_IMAGE_TILING_OPTIMAL = 0,
       VK_IMAGE_TILING_LINEAR = 1,
       VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
       VK_IMAGE_TILING_MAX_ENUM = 0x7FFFFFFF
     );

type VkImageType = (
       VK_IMAGE_TYPE_1D = 0,
       VK_IMAGE_TYPE_2D = 1,
       VK_IMAGE_TYPE_3D = 2,
       VK_IMAGE_TYPE_MAX_ENUM = 0x7FFFFFFF
     );

type VkPhysicalDeviceType = (
       VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
       VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
       VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
       VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
       VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
       VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 0x7FFFFFFF
     );

type VkQueryType = (
       VK_QUERY_TYPE_OCCLUSION = 0,
       VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
       VK_QUERY_TYPE_TIMESTAMP = 2,
       VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004,
       VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000,
       VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000,
       VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001,
       VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000,
       VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000,
       VK_QUERY_TYPE_MAX_ENUM = 0x7FFFFFFF
     );

type VkSharingMode = (
       VK_SHARING_MODE_EXCLUSIVE = 0,
       VK_SHARING_MODE_CONCURRENT = 1,
       VK_SHARING_MODE_MAX_ENUM = 0x7FFFFFFF
     );

type VkComponentSwizzle = (
       VK_COMPONENT_SWIZZLE_IDENTITY = 0,
       VK_COMPONENT_SWIZZLE_ZERO = 1,
       VK_COMPONENT_SWIZZLE_ONE = 2,
       VK_COMPONENT_SWIZZLE_R = 3,
       VK_COMPONENT_SWIZZLE_G = 4,
       VK_COMPONENT_SWIZZLE_B = 5,
       VK_COMPONENT_SWIZZLE_A = 6,
       VK_COMPONENT_SWIZZLE_MAX_ENUM = 0x7FFFFFFF
     );

type VkImageViewType = (
       VK_IMAGE_VIEW_TYPE_1D = 0,
       VK_IMAGE_VIEW_TYPE_2D = 1,
       VK_IMAGE_VIEW_TYPE_3D = 2,
       VK_IMAGE_VIEW_TYPE_CUBE = 3,
       VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
       VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
       VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
       VK_IMAGE_VIEW_TYPE_MAX_ENUM = 0x7FFFFFFF
     );

type VkBlendFactor = (
       VK_BLEND_FACTOR_ZERO = 0,
       VK_BLEND_FACTOR_ONE = 1,
       VK_BLEND_FACTOR_SRC_COLOR = 2,
       VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
       VK_BLEND_FACTOR_DST_COLOR = 4,
       VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
       VK_BLEND_FACTOR_SRC_ALPHA = 6,
       VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
       VK_BLEND_FACTOR_DST_ALPHA = 8,
       VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
       VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
       VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
       VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
       VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
       VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
       VK_BLEND_FACTOR_SRC1_COLOR = 15,
       VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
       VK_BLEND_FACTOR_SRC1_ALPHA = 17,
       VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
       VK_BLEND_FACTOR_MAX_ENUM = 0x7FFFFFFF
     );

type VkBlendOp = (
       VK_BLEND_OP_ADD = 0,
       VK_BLEND_OP_SUBTRACT = 1,
       VK_BLEND_OP_REVERSE_SUBTRACT = 2,
       VK_BLEND_OP_MIN = 3,
       VK_BLEND_OP_MAX = 4,
       VK_BLEND_OP_ZERO_EXT = 1000148000,
       VK_BLEND_OP_SRC_EXT = 1000148001,
       VK_BLEND_OP_DST_EXT = 1000148002,
       VK_BLEND_OP_SRC_OVER_EXT = 1000148003,
       VK_BLEND_OP_DST_OVER_EXT = 1000148004,
       VK_BLEND_OP_SRC_IN_EXT = 1000148005,
       VK_BLEND_OP_DST_IN_EXT = 1000148006,
       VK_BLEND_OP_SRC_OUT_EXT = 1000148007,
       VK_BLEND_OP_DST_OUT_EXT = 1000148008,
       VK_BLEND_OP_SRC_ATOP_EXT = 1000148009,
       VK_BLEND_OP_DST_ATOP_EXT = 1000148010,
       VK_BLEND_OP_XOR_EXT = 1000148011,
       VK_BLEND_OP_MULTIPLY_EXT = 1000148012,
       VK_BLEND_OP_SCREEN_EXT = 1000148013,
       VK_BLEND_OP_OVERLAY_EXT = 1000148014,
       VK_BLEND_OP_DARKEN_EXT = 1000148015,
       VK_BLEND_OP_LIGHTEN_EXT = 1000148016,
       VK_BLEND_OP_COLORDODGE_EXT = 1000148017,
       VK_BLEND_OP_COLORBURN_EXT = 1000148018,
       VK_BLEND_OP_HARDLIGHT_EXT = 1000148019,
       VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020,
       VK_BLEND_OP_DIFFERENCE_EXT = 1000148021,
       VK_BLEND_OP_EXCLUSION_EXT = 1000148022,
       VK_BLEND_OP_INVERT_EXT = 1000148023,
       VK_BLEND_OP_INVERT_RGB_EXT = 1000148024,
       VK_BLEND_OP_LINEARDODGE_EXT = 1000148025,
       VK_BLEND_OP_LINEARBURN_EXT = 1000148026,
       VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
       VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028,
       VK_BLEND_OP_PINLIGHT_EXT = 1000148029,
       VK_BLEND_OP_HARDMIX_EXT = 1000148030,
       VK_BLEND_OP_HSL_HUE_EXT = 1000148031,
       VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032,
       VK_BLEND_OP_HSL_COLOR_EXT = 1000148033,
       VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
       VK_BLEND_OP_PLUS_EXT = 1000148035,
       VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
       VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
       VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038,
       VK_BLEND_OP_MINUS_EXT = 1000148039,
       VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
       VK_BLEND_OP_CONTRAST_EXT = 1000148041,
       VK_BLEND_OP_INVERT_OVG_EXT = 1000148042,
       VK_BLEND_OP_RED_EXT = 1000148043,
       VK_BLEND_OP_GREEN_EXT = 1000148044,
       VK_BLEND_OP_BLUE_EXT = 1000148045,
       VK_BLEND_OP_MAX_ENUM = 0x7FFFFFFF
     );

type VkCompareOp = (
       VK_COMPARE_OP_NEVER = 0,
       VK_COMPARE_OP_LESS = 1,
       VK_COMPARE_OP_EQUAL = 2,
       VK_COMPARE_OP_LESS_OR_EQUAL = 3,
       VK_COMPARE_OP_GREATER = 4,
       VK_COMPARE_OP_NOT_EQUAL = 5,
       VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
       VK_COMPARE_OP_ALWAYS = 7,
       VK_COMPARE_OP_MAX_ENUM = 0x7FFFFFFF
     );

type VkDynamicState = (
       VK_DYNAMIC_STATE_VIEWPORT = 0,
       VK_DYNAMIC_STATE_SCISSOR = 1,
       VK_DYNAMIC_STATE_LINE_WIDTH = 2,
       VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
       VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
       VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
       VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
       VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
       VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
       VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
       VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
       VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
       VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000,
       VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
       VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
       VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
       VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000,
       VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000,
       VK_DYNAMIC_STATE_CULL_MODE_EXT = 1000267000,
       VK_DYNAMIC_STATE_FRONT_FACE_EXT = 1000267001,
       VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = 1000267002,
       VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = 1000267003,
       VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = 1000267004,
       VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005,
       VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = 1000267006,
       VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = 1000267007,
       VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = 1000267008,
       VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009,
       VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = 1000267010,
       VK_DYNAMIC_STATE_STENCIL_OP_EXT = 1000267011,
       VK_DYNAMIC_STATE_MAX_ENUM = 0x7FFFFFFF
     );

type VkFrontFace = (
       VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
       VK_FRONT_FACE_CLOCKWISE = 1,
       VK_FRONT_FACE_MAX_ENUM = 0x7FFFFFFF
     );

type VkVertexInputRate = (
       VK_VERTEX_INPUT_RATE_VERTEX = 0,
       VK_VERTEX_INPUT_RATE_INSTANCE = 1,
       VK_VERTEX_INPUT_RATE_MAX_ENUM = 0x7FFFFFFF
     );

type VkPrimitiveTopology = (
       VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
       VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
       VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
       VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
       VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
       VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
       VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
       VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
       VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
       VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
       VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
       VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 0x7FFFFFFF
     );

type VkPolygonMode = (
       VK_POLYGON_MODE_FILL = 0,
       VK_POLYGON_MODE_LINE = 1,
       VK_POLYGON_MODE_POINT = 2,
       VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
       VK_POLYGON_MODE_MAX_ENUM = 0x7FFFFFFF
     );

type VkStencilOp = (
       VK_STENCIL_OP_KEEP = 0,
       VK_STENCIL_OP_ZERO = 1,
       VK_STENCIL_OP_REPLACE = 2,
       VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
       VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
       VK_STENCIL_OP_INVERT = 5,
       VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
       VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
       VK_STENCIL_OP_MAX_ENUM = 0x7FFFFFFF
     );

type VkLogicOp = (
       VK_LOGIC_OP_CLEAR = 0,
       VK_LOGIC_OP_AND = 1,
       VK_LOGIC_OP_AND_REVERSE = 2,
       VK_LOGIC_OP_COPY = 3,
       VK_LOGIC_OP_AND_INVERTED = 4,
       VK_LOGIC_OP_NO_OP = 5,
       VK_LOGIC_OP_XOR = 6,
       VK_LOGIC_OP_OR = 7,
       VK_LOGIC_OP_NOR = 8,
       VK_LOGIC_OP_EQUIVALENT = 9,
       VK_LOGIC_OP_INVERT = 10,
       VK_LOGIC_OP_OR_REVERSE = 11,
       VK_LOGIC_OP_COPY_INVERTED = 12,
       VK_LOGIC_OP_OR_INVERTED = 13,
       VK_LOGIC_OP_NAND = 14,
       VK_LOGIC_OP_SET = 15,
       VK_LOGIC_OP_MAX_ENUM = 0x7FFFFFFF
     );

type VkBorderColor = (
       VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
       VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
       VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
       VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
       VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
       VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
       VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003,
       VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004,
       VK_BORDER_COLOR_MAX_ENUM = 0x7FFFFFFF
     );

type VkFilter = (
       VK_FILTER_NEAREST = 0,
       VK_FILTER_LINEAR = 1,
       VK_FILTER_CUBIC_IMG = 1000015000,
       VK_FILTER_CUBIC_EXT = VK_FILTER_CUBIC_IMG,
       VK_FILTER_MAX_ENUM = 0x7FFFFFFF
     );

type VkSamplerAddressMode = (
       VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
       VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
       VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
       VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
       VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
       VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
       VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 0x7FFFFFFF
     );

type VkSamplerMipmapMode = (
       VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
       VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
       VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 0x7FFFFFFF
     );

type VkDescriptorType = (
       VK_DESCRIPTOR_TYPE_SAMPLER = 0,
       VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
       VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
       VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
       VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
       VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
       VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
       VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
       VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
       VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
       VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
       VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000,
       VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
       VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
       VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = 1000351000,
       VK_DESCRIPTOR_TYPE_MAX_ENUM = 0x7FFFFFFF
     );

type VkAttachmentLoadOp = (
       VK_ATTACHMENT_LOAD_OP_LOAD = 0,
       VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
       VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
       VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 0x7FFFFFFF
     );

type VkAttachmentStoreOp = (
       VK_ATTACHMENT_STORE_OP_STORE = 0,
       VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
       VK_ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000,
       VK_ATTACHMENT_STORE_OP_MAX_ENUM = 0x7FFFFFFF
     );

type VkPipelineBindPoint = (
       VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
       VK_PIPELINE_BIND_POINT_COMPUTE = 1,
       VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000,
       VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR,
       VK_PIPELINE_BIND_POINT_MAX_ENUM = 0x7FFFFFFF
     );

type VkCommandBufferLevel = (
       VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
       VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
       VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 0x7FFFFFFF
     );

type VkIndexType = (
       VK_INDEX_TYPE_UINT16 = 0,
       VK_INDEX_TYPE_UINT32 = 1,
       VK_INDEX_TYPE_NONE_KHR = 1000165000,
       VK_INDEX_TYPE_UINT8_EXT = 1000265000,
       VK_INDEX_TYPE_NONE_NV = VK_INDEX_TYPE_NONE_KHR,
       VK_INDEX_TYPE_MAX_ENUM = 0x7FFFFFFF
     );

type VkSubpassContents = (
       VK_SUBPASS_CONTENTS_INLINE = 0,
       VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
       VK_SUBPASS_CONTENTS_MAX_ENUM = 0x7FFFFFFF
     );

type VkAccessFlagBits = (
       VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 0x00000001,
       VK_ACCESS_INDEX_READ_BIT = 0x00000002,
       VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004,
       VK_ACCESS_UNIFORM_READ_BIT = 0x00000008,
       VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 0x00000010,
       VK_ACCESS_SHADER_READ_BIT = 0x00000020,
       VK_ACCESS_SHADER_WRITE_BIT = 0x00000040,
       VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 0x00000080,
       VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100,
       VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200,
       VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400,
       VK_ACCESS_TRANSFER_READ_BIT = 0x00000800,
       VK_ACCESS_TRANSFER_WRITE_BIT = 0x00001000,
       VK_ACCESS_HOST_READ_BIT = 0x00002000,
       VK_ACCESS_HOST_WRITE_BIT = 0x00004000,
       VK_ACCESS_MEMORY_READ_BIT = 0x00008000,
       VK_ACCESS_MEMORY_WRITE_BIT = 0x00010000,
       VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 0x02000000,
       VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 0x04000000,
       VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 0x08000000,
       VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 0x00100000,
       VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000,
       VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 0x00200000,
       VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 0x00400000,
       VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 0x00800000,
       VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 0x01000000,
       VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 0x00020000,
       VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 0x00040000,
       VK_ACCESS_NONE_KHR = 0,
       VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR,
       VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR,
       VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV,
       VK_ACCESS_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkAccessFlags = VkFlags;

type VkImageAspectFlagBits = (
       VK_IMAGE_ASPECT_COLOR_BIT = 0x00000001,
       VK_IMAGE_ASPECT_DEPTH_BIT = 0x00000002,
       VK_IMAGE_ASPECT_STENCIL_BIT = 0x00000004,
       VK_IMAGE_ASPECT_METADATA_BIT = 0x00000008,
       VK_IMAGE_ASPECT_PLANE_0_BIT = 0x00000010,
       VK_IMAGE_ASPECT_PLANE_1_BIT = 0x00000020,
       VK_IMAGE_ASPECT_PLANE_2_BIT = 0x00000040,
       VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 0x00000080,
       VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 0x00000100,
       VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 0x00000200,
       VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 0x00000400,
       VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = VK_IMAGE_ASPECT_PLANE_0_BIT,
       VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = VK_IMAGE_ASPECT_PLANE_1_BIT,
       VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = VK_IMAGE_ASPECT_PLANE_2_BIT,
       VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkImageAspectFlags = VkFlags;

type VkFormatFeatureFlagBits = (
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 0x00000001,
       VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 0x00000002,
       VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004,
       VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008,
       VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 0x00000010,
       VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020,
       VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 0x00000040,
       VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 0x00000080,
       VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100,
       VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200,
       VK_FORMAT_FEATURE_BLIT_SRC_BIT = 0x00000400,
       VK_FORMAT_FEATURE_BLIT_DST_BIT = 0x00000800,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000,
       VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 0x00004000,
       VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 0x00008000,
       VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 0x00020000,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 0x00040000,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 0x00080000,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 0x00100000,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 0x00200000,
       VK_FORMAT_FEATURE_DISJOINT_BIT = 0x00400000,
       VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 0x00800000,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 0x00010000,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 0x00002000,
       VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 0x20000000,
       VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x01000000,
       VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x40000000,
       VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_SRC_BIT,
       VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT,
       VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT,
       VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = VK_FORMAT_FEATURE_DISJOINT_BIT,
       VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT,
       VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG,
       VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkFormatFeatureFlags = VkFlags;

type VkImageCreateFlagBits = (
       VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 0x00000001,
       VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,
       VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 0x00000004,
       VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 0x00000008,
       VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 0x00000010,
       VK_IMAGE_CREATE_ALIAS_BIT = 0x00000400,
       VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 0x00000040,
       VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 0x00000020,
       VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 0x00000080,
       VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 0x00000100,
       VK_IMAGE_CREATE_PROTECTED_BIT = 0x00000800,
       VK_IMAGE_CREATE_DISJOINT_BIT = 0x00000200,
       VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 0x00002000,
       VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 0x00001000,
       VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 0x00004000,
       VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT,
       VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT,
       VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT,
       VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = VK_IMAGE_CREATE_EXTENDED_USAGE_BIT,
       VK_IMAGE_CREATE_DISJOINT_BIT_KHR = VK_IMAGE_CREATE_DISJOINT_BIT,
       VK_IMAGE_CREATE_ALIAS_BIT_KHR = VK_IMAGE_CREATE_ALIAS_BIT,
       VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkImageCreateFlags = VkFlags;

type VkSampleCountFlagBits = (
       VK_SAMPLE_COUNT_1_BIT = 0x00000001,
       VK_SAMPLE_COUNT_2_BIT = 0x00000002,
       VK_SAMPLE_COUNT_4_BIT = 0x00000004,
       VK_SAMPLE_COUNT_8_BIT = 0x00000008,
       VK_SAMPLE_COUNT_16_BIT = 0x00000010,
       VK_SAMPLE_COUNT_32_BIT = 0x00000020,
       VK_SAMPLE_COUNT_64_BIT = 0x00000040,
       VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkSampleCountFlags = VkFlags;

type VkImageUsageFlagBits = (
       VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 0x00000001,
       VK_IMAGE_USAGE_TRANSFER_DST_BIT = 0x00000002,
       VK_IMAGE_USAGE_SAMPLED_BIT = 0x00000004,
       VK_IMAGE_USAGE_STORAGE_BIT = 0x00000008,
       VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 0x00000010,
       VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020,
       VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 0x00000040,
       VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 0x00000080,
       VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 0x00000100,
       VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x00000200,
       VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV,
       VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkImageUsageFlags = VkFlags;
type VkInstanceCreateFlags = VkFlags;

type VkMemoryHeapFlagBits = (
       VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 0x00000001,
       VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 0x00000002,
       VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = VK_MEMORY_HEAP_MULTI_INSTANCE_BIT,
       VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkMemoryHeapFlags = VkFlags;

type VkMemoryPropertyFlagBits = (
       VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 0x00000001,
       VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 0x00000002,
       VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 0x00000004,
       VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 0x00000008,
       VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 0x00000010,
       VK_MEMORY_PROPERTY_PROTECTED_BIT = 0x00000020,
       VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 0x00000040,
       VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 0x00000080,
       VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkMemoryPropertyFlags = VkFlags;

type VkQueueFlagBits = (
       VK_QUEUE_GRAPHICS_BIT = 0x00000001,
       VK_QUEUE_COMPUTE_BIT = 0x00000002,
       VK_QUEUE_TRANSFER_BIT = 0x00000004,
       VK_QUEUE_SPARSE_BINDING_BIT = 0x00000008,
       VK_QUEUE_PROTECTED_BIT = 0x00000010,
       VK_QUEUE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkQueueFlags = VkFlags;
type VkDeviceCreateFlags = VkFlags;

type VkDeviceQueueCreateFlagBits = (
       VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 0x00000001,
       VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkDeviceQueueCreateFlags = VkFlags;

type VkPipelineStageFlagBits = (
       VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 0x00000001,
       VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 0x00000002,
       VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 0x00000004,
       VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 0x00000008,
       VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010,
       VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020,
       VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 0x00000040,
       VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 0x00000080,
       VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 0x00000100,
       VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 0x00000200,
       VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400,
       VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 0x00000800,
       VK_PIPELINE_STAGE_TRANSFER_BIT = 0x00001000,
       VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 0x00002000,
       VK_PIPELINE_STAGE_HOST_BIT = 0x00004000,
       VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 0x00008000,
       VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 0x00010000,
       VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 0x01000000,
       VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00040000,
       VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 0x02000000,
       VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 0x00200000,
       VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 0x00400000,
       VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 0x00080000,
       VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 0x00100000,
       VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 0x00800000,
       VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 0x00020000,
       VK_PIPELINE_STAGE_NONE_KHR = 0,
       VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR,
       VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,
       VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV,
       VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkPipelineStageFlags = VkFlags;
type VkMemoryMapFlags = VkFlags;

type VkSparseMemoryBindFlagBits = (
       VK_SPARSE_MEMORY_BIND_METADATA_BIT = 0x00000001,
       VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkSparseMemoryBindFlags = VkFlags;

type VkSparseImageFormatFlagBits = (
       VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 0x00000001,
       VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 0x00000002,
       VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 0x00000004,
       VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkSparseImageFormatFlags = VkFlags;

type VkFenceCreateFlagBits = (
       VK_FENCE_CREATE_SIGNALED_BIT = 0x00000001,
       VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkFenceCreateFlags = VkFlags;
type VkSemaphoreCreateFlags = VkFlags;

type VkEventCreateFlagBits = (
       VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR = 0x00000001,
       VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkEventCreateFlags = VkFlags;

type VkQueryPipelineStatisticFlagBits = (
       VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 0x00000001,
       VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 0x00000002,
       VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 0x00000004,
       VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 0x00000008,
       VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 0x00000010,
       VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 0x00000020,
       VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 0x00000040,
       VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 0x00000080,
       VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 0x00000100,
       VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200,
       VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 0x00000400,
       VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkQueryPipelineStatisticFlags = VkFlags;
type VkQueryPoolCreateFlags = VkFlags;

type VkQueryResultFlagBits = (
       VK_QUERY_RESULT_64_BIT = 0x00000001,
       VK_QUERY_RESULT_WAIT_BIT = 0x00000002,
       VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 0x00000004,
       VK_QUERY_RESULT_PARTIAL_BIT = 0x00000008,
       VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkQueryResultFlags = VkFlags;

type VkBufferCreateFlagBits = (
       VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 0x00000001,
       VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,
       VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 0x00000004,
       VK_BUFFER_CREATE_PROTECTED_BIT = 0x00000008,
       VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 0x00000010,
       VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
       VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
       VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkBufferCreateFlags = VkFlags;

type VkBufferUsageFlagBits = (
       VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 0x00000001,
       VK_BUFFER_USAGE_TRANSFER_DST_BIT = 0x00000002,
       VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004,
       VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 0x00000008,
       VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 0x00000010,
       VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 0x00000020,
       VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 0x00000040,
       VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 0x00000080,
       VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 0x00000100,
       VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 0x00020000,
       VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 0x00000800,
       VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 0x00001000,
       VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00000200,
       VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 0x00080000,
       VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 0x00100000,
       VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 0x00000400,
       VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR,
       VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
       VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
       VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkBufferUsageFlags = VkFlags;
type VkBufferViewCreateFlags = VkFlags;

type VkImageViewCreateFlagBits = (
       VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 0x00000001,
       VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 0x00000002,
       VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkImageViewCreateFlags = VkFlags;

type VkShaderModuleCreateFlagBits = (
       VK_SHADER_MODULE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkShaderModuleCreateFlags = VkFlags;

type VkPipelineCacheCreateFlagBits = (
       VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 0x00000001,
       VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkPipelineCacheCreateFlags = VkFlags;

type VkColorComponentFlagBits = (
       VK_COLOR_COMPONENT_R_BIT = 0x00000001,
       VK_COLOR_COMPONENT_G_BIT = 0x00000002,
       VK_COLOR_COMPONENT_B_BIT = 0x00000004,
       VK_COLOR_COMPONENT_A_BIT = 0x00000008,
       VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkColorComponentFlags = VkFlags;

type VkPipelineCreateFlagBits = (
       VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 0x00000001,
       VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 0x00000002,
       VK_PIPELINE_CREATE_DERIVATIVE_BIT = 0x00000004,
       VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 0x00000008,
       VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 0x00000010,
       VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 0x00004000,
       VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 0x00008000,
       VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 0x00010000,
       VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 0x00020000,
       VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 0x00001000,
       VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 0x00002000,
       VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 0x00080000,
       VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 0x00000020,
       VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 0x00000040,
       VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 0x00000080,
       VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 0x00040000,
       VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 0x00000800,
       VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 0x00000100,
       VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 0x00000200,
       VK_PIPELINE_CREATE_DISPATCH_BASE = VK_PIPELINE_CREATE_DISPATCH_BASE_BIT,
       VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT,
       VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = VK_PIPELINE_CREATE_DISPATCH_BASE,
       VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkPipelineCreateFlags = VkFlags;

type VkPipelineShaderStageCreateFlagBits = (
       VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 0x00000001,
       VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 0x00000002,
       VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkPipelineShaderStageCreateFlags = VkFlags;

type VkShaderStageFlagBits = (
       VK_SHADER_STAGE_VERTEX_BIT = 0x00000001,
       VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002,
       VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004,
       VK_SHADER_STAGE_GEOMETRY_BIT = 0x00000008,
       VK_SHADER_STAGE_FRAGMENT_BIT = 0x00000010,
       VK_SHADER_STAGE_COMPUTE_BIT = 0x00000020,
       VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,
       VK_SHADER_STAGE_ALL = 0x7FFFFFFF,
       VK_SHADER_STAGE_RAYGEN_BIT_KHR = 0x00000100,
       VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 0x00000200,
       VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 0x00000400,
       VK_SHADER_STAGE_MISS_BIT_KHR = 0x00000800,
       VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 0x00001000,
       VK_SHADER_STAGE_CALLABLE_BIT_KHR = 0x00002000,
       VK_SHADER_STAGE_TASK_BIT_NV = 0x00000040,
       VK_SHADER_STAGE_MESH_BIT_NV = 0x00000080,
       VK_SHADER_STAGE_RAYGEN_BIT_NV = VK_SHADER_STAGE_RAYGEN_BIT_KHR,
       VK_SHADER_STAGE_ANY_HIT_BIT_NV = VK_SHADER_STAGE_ANY_HIT_BIT_KHR,
       VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR,
       VK_SHADER_STAGE_MISS_BIT_NV = VK_SHADER_STAGE_MISS_BIT_KHR,
       VK_SHADER_STAGE_INTERSECTION_BIT_NV = VK_SHADER_STAGE_INTERSECTION_BIT_KHR,
       VK_SHADER_STAGE_CALLABLE_BIT_NV = VK_SHADER_STAGE_CALLABLE_BIT_KHR,
       VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );

type VkCullModeFlagBits = (
       VK_CULL_MODE_NONE = 0,
       VK_CULL_MODE_FRONT_BIT = 0x00000001,
       VK_CULL_MODE_BACK_BIT = 0x00000002,
       VK_CULL_MODE_FRONT_AND_BACK = 0x00000003,
       VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkCullModeFlags = VkFlags;
type VkPipelineVertexInputStateCreateFlags = VkFlags;
type VkPipelineInputAssemblyStateCreateFlags = VkFlags;
type VkPipelineTessellationStateCreateFlags = VkFlags;
type VkPipelineViewportStateCreateFlags = VkFlags;
type VkPipelineRasterizationStateCreateFlags = VkFlags;
type VkPipelineMultisampleStateCreateFlags = VkFlags;
type VkPipelineDepthStencilStateCreateFlags = VkFlags;
type VkPipelineColorBlendStateCreateFlags = VkFlags;
type VkPipelineDynamicStateCreateFlags = VkFlags;
type VkPipelineLayoutCreateFlags = VkFlags;
type VkShaderStageFlags = VkFlags;

type VkSamplerCreateFlagBits = (
       VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 0x00000001,
       VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 0x00000002,
       VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkSamplerCreateFlags = VkFlags;

type VkDescriptorPoolCreateFlagBits = (
       VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 0x00000001,
       VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 0x00000002,
       VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = 0x00000004,
       VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT,
       VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkDescriptorPoolCreateFlags = VkFlags;
type VkDescriptorPoolResetFlags = VkFlags;

type VkDescriptorSetLayoutCreateFlagBits = (
       VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 0x00000002,
       VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 0x00000001,
       VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = 0x00000004,
       VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT,
       VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkDescriptorSetLayoutCreateFlags = VkFlags;

type VkAttachmentDescriptionFlagBits = (
       VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 0x00000001,
       VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkAttachmentDescriptionFlags = VkFlags;

type VkDependencyFlagBits = (
       VK_DEPENDENCY_BY_REGION_BIT = 0x00000001,
       VK_DEPENDENCY_DEVICE_GROUP_BIT = 0x00000004,
       VK_DEPENDENCY_VIEW_LOCAL_BIT = 0x00000002,
       VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = VK_DEPENDENCY_VIEW_LOCAL_BIT,
       VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = VK_DEPENDENCY_DEVICE_GROUP_BIT,
       VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkDependencyFlags = VkFlags;

type VkFramebufferCreateFlagBits = (
       VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 0x00000001,
       VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT,
       VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkFramebufferCreateFlags = VkFlags;

type VkRenderPassCreateFlagBits = (
       VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 0x00000002,
       VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkRenderPassCreateFlags = VkFlags;

type VkSubpassDescriptionFlagBits = (
       VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 0x00000001,
       VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 0x00000002,
       VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 0x00000004,
       VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 0x00000008,
       VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkSubpassDescriptionFlags = VkFlags;

type VkCommandPoolCreateFlagBits = (
       VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 0x00000001,
       VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0x00000002,
       VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 0x00000004,
       VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkCommandPoolCreateFlags = VkFlags;

type VkCommandPoolResetFlagBits = (
       VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
       VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkCommandPoolResetFlags = VkFlags;

type VkCommandBufferUsageFlagBits = (
       VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 0x00000001,
       VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0x00000002,
       VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 0x00000004,
       VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkCommandBufferUsageFlags = VkFlags;

type VkQueryControlFlagBits = (
       VK_QUERY_CONTROL_PRECISE_BIT = 0x00000001,
       VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkQueryControlFlags = VkFlags;

type VkCommandBufferResetFlagBits = (
       VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
       VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkCommandBufferResetFlags = VkFlags;

type VkStencilFaceFlagBits = (
       VK_STENCIL_FACE_FRONT_BIT = 0x00000001,
       VK_STENCIL_FACE_BACK_BIT = 0x00000002,
       VK_STENCIL_FACE_FRONT_AND_BACK = 0x00000003,
       VK_STENCIL_FRONT_AND_BACK = VK_STENCIL_FACE_FRONT_AND_BACK,
       VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkStencilFaceFlags = VkFlags;
type VkExtent2D = record
       width :uint32_t;
       height :uint32_t;
     end;

type VkExtent3D = record
       width :uint32_t;
       height :uint32_t;
       depth :uint32_t;
     end;

type VkOffset2D = record
       x :int32_t;
       y :int32_t;
     end;

type VkOffset3D = record
       x :int32_t;
       y :int32_t;
       z :int32_t;
     end;

type VkRect2D = record
       offset :VkOffset2D;
       extent :VkExtent2D;
     end;

type VkBaseInStructure = record
       sType :VkStructureType;
       pNext :P_VkBaseInStructure;
     end;

type VkBaseOutStructure = record
       sType :VkStructureType;
       pNext :P_VkBaseOutStructure;
     end;

type VkBufferMemoryBarrier = record
       sType :VkStructureType;
       pNext :P_void;
       srcAccessMask :VkAccessFlags;
       dstAccessMask :VkAccessFlags;
       srcQueueFamilyIndex :uint32_t;
       dstQueueFamilyIndex :uint32_t;
       buffer :VkBuffer;
       offset :VkDeviceSize;
       size :VkDeviceSize;
     end;

type VkDispatchIndirectCommand = record
       x :uint32_t;
       y :uint32_t;
       z :uint32_t;
     end;

type VkDrawIndexedIndirectCommand = record
       indexCount :uint32_t;
       instanceCount :uint32_t;
       firstIndex :uint32_t;
       vertexOffset :int32_t;
       firstInstance :uint32_t;
     end;

type VkDrawIndirectCommand = record
       vertexCount :uint32_t;
       instanceCount :uint32_t;
       firstVertex :uint32_t;
       firstInstance :uint32_t;
     end;

type VkImageSubresourceRange = record
       aspectMask :VkImageAspectFlags;
       baseMipLevel :uint32_t;
       levelCount :uint32_t;
       baseArrayLayer :uint32_t;
       layerCount :uint32_t;
     end;

type VkImageMemoryBarrier = record
       sType :VkStructureType;
       pNext :P_void;
       srcAccessMask :VkAccessFlags;
       dstAccessMask :VkAccessFlags;
       oldLayout :VkImageLayout;
       newLayout :VkImageLayout;
       srcQueueFamilyIndex :uint32_t;
       dstQueueFamilyIndex :uint32_t;
       image :VkImage;
       subresourceRange :VkImageSubresourceRange;
     end;

type VkMemoryBarrier = record
       sType :VkStructureType;
       pNext :P_void;
       srcAccessMask :VkAccessFlags;
       dstAccessMask :VkAccessFlags;
     end;

typedef P_void (VKAPI_PTR *PFN_vkAllocationFunction)(
    P_void                                      pUserData,
    size_t                                      size,
    size_t                                      alignment,
    VkSystemAllocationScope                     allocationScope);

typedef void (VKAPI_PTR *PFN_vkFreeFunction)(
    P_void                                      pUserData,
    P_void                                      pMemory);

typedef void (VKAPI_PTR *PFN_vkInternalAllocationNotification)(
    P_void                                      pUserData,
    size_t                                      size,
    VkInternalAllocationType                    allocationType,
    VkSystemAllocationScope                     allocationScope);

typedef void (VKAPI_PTR *PFN_vkInternalFreeNotification)(
    P_void                                      pUserData,
    size_t                                      size,
    VkInternalAllocationType                    allocationType,
    VkSystemAllocationScope                     allocationScope);

typedef P_void (VKAPI_PTR *PFN_vkReallocationFunction)(
    P_void                                      pUserData,
    P_void                                      pOriginal,
    size_t                                      size,
    size_t                                      alignment,
    VkSystemAllocationScope                     allocationScope);

typedef void (VKAPI_PTR *PFN_vkVoidFunction)(void);
type VkAllocationCallbacks = record
       pUserData :P_void;
       pfnAllocation :PFN_vkAllocationFunction;
       pfnReallocation :PFN_vkReallocationFunction;
       pfnFree :PFN_vkFreeFunction;
       pfnInternalAllocation :PFN_vkInternalAllocationNotification;
       pfnInternalFree :PFN_vkInternalFreeNotification;
     end;

type VkApplicationInfo = record
       sType :VkStructureType;
       pNext :P_void;
       pApplicationName :P_char;
       applicationVersion :uint32_t;
       pEngineName :P_char;
       engineVersion :uint32_t;
       apiVersion :uint32_t;
     end;

type VkFormatProperties = record
       linearTilingFeatures :VkFormatFeatureFlags;
       optimalTilingFeatures :VkFormatFeatureFlags;
       bufferFeatures :VkFormatFeatureFlags;
     end;

type VkImageFormatProperties = record
       maxExtent :VkExtent3D;
       maxMipLevels :uint32_t;
       maxArrayLayers :uint32_t;
       sampleCounts :VkSampleCountFlags;
       maxResourceSize :VkDeviceSize;
     end;

type VkInstanceCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkInstanceCreateFlags;
       pApplicationInfo :P_VkApplicationInfo;
       enabledLayerCount :uint32_t;
       ppEnabledLayerNames :PP_char;
       enabledExtensionCount :uint32_t;
       ppEnabledExtensionNames :PP_char;
     end;

type VkMemoryHeap = record
       size :VkDeviceSize;
       flags :VkMemoryHeapFlags;
     end;

type VkMemoryType = record
       propertyFlags :VkMemoryPropertyFlags;
       heapIndex :uint32_t;
     end;

type VkPhysicalDeviceFeatures = record
       robustBufferAccess :VkBool32;
       fullDrawIndexUint32 :VkBool32;
       imageCubeArray :VkBool32;
       independentBlend :VkBool32;
       geometryShader :VkBool32;
       tessellationShader :VkBool32;
       sampleRateShading :VkBool32;
       dualSrcBlend :VkBool32;
       logicOp :VkBool32;
       multiDrawIndirect :VkBool32;
       drawIndirectFirstInstance :VkBool32;
       depthClamp :VkBool32;
       depthBiasClamp :VkBool32;
       fillModeNonSolid :VkBool32;
       depthBounds :VkBool32;
       wideLines :VkBool32;
       largePoints :VkBool32;
       alphaToOne :VkBool32;
       multiViewport :VkBool32;
       samplerAnisotropy :VkBool32;
       textureCompressionETC2 :VkBool32;
       textureCompressionASTC_LDR :VkBool32;
       textureCompressionBC :VkBool32;
       occlusionQueryPrecise :VkBool32;
       pipelineStatisticsQuery :VkBool32;
       vertexPipelineStoresAndAtomics :VkBool32;
       fragmentStoresAndAtomics :VkBool32;
       shaderTessellationAndGeometryPointSize :VkBool32;
       shaderImageGatherExtended :VkBool32;
       shaderStorageImageExtendedFormats :VkBool32;
       shaderStorageImageMultisample :VkBool32;
       shaderStorageImageReadWithoutFormat :VkBool32;
       shaderStorageImageWriteWithoutFormat :VkBool32;
       shaderUniformBufferArrayDynamicIndexing :VkBool32;
       shaderSampledImageArrayDynamicIndexing :VkBool32;
       shaderStorageBufferArrayDynamicIndexing :VkBool32;
       shaderStorageImageArrayDynamicIndexing :VkBool32;
       shaderClipDistance :VkBool32;
       shaderCullDistance :VkBool32;
       shaderFloat64 :VkBool32;
       shaderInt64 :VkBool32;
       shaderInt16 :VkBool32;
       shaderResourceResidency :VkBool32;
       shaderResourceMinLod :VkBool32;
       sparseBinding :VkBool32;
       sparseResidencyBuffer :VkBool32;
       sparseResidencyImage2D :VkBool32;
       sparseResidencyImage3D :VkBool32;
       sparseResidency2Samples :VkBool32;
       sparseResidency4Samples :VkBool32;
       sparseResidency8Samples :VkBool32;
       sparseResidency16Samples :VkBool32;
       sparseResidencyAliased :VkBool32;
       variableMultisampleRate :VkBool32;
       inheritedQueries :VkBool32;
     end;

type VkPhysicalDeviceLimits = record
       maxImageDimension1D :uint32_t;
       maxImageDimension2D :uint32_t;
       maxImageDimension3D :uint32_t;
       maxImageDimensionCube :uint32_t;
       maxImageArrayLayers :uint32_t;
       maxTexelBufferElements :uint32_t;
       maxUniformBufferRange :uint32_t;
       maxStorageBufferRange :uint32_t;
       maxPushConstantsSize :uint32_t;
       maxMemoryAllocationCount :uint32_t;
       maxSamplerAllocationCount :uint32_t;
       bufferImageGranularity :VkDeviceSize;
       sparseAddressSpaceSize :VkDeviceSize;
       maxBoundDescriptorSets :uint32_t;
       maxPerStageDescriptorSamplers :uint32_t;
       maxPerStageDescriptorUniformBuffers :uint32_t;
       maxPerStageDescriptorStorageBuffers :uint32_t;
       maxPerStageDescriptorSampledImages :uint32_t;
       maxPerStageDescriptorStorageImages :uint32_t;
       maxPerStageDescriptorInputAttachments :uint32_t;
       maxPerStageResources :uint32_t;
       maxDescriptorSetSamplers :uint32_t;
       maxDescriptorSetUniformBuffers :uint32_t;
       maxDescriptorSetUniformBuffersDynamic :uint32_t;
       maxDescriptorSetStorageBuffers :uint32_t;
       maxDescriptorSetStorageBuffersDynamic :uint32_t;
       maxDescriptorSetSampledImages :uint32_t;
       maxDescriptorSetStorageImages :uint32_t;
       maxDescriptorSetInputAttachments :uint32_t;
       maxVertexInputAttributes :uint32_t;
       maxVertexInputBindings :uint32_t;
       maxVertexInputAttributeOffset :uint32_t;
       maxVertexInputBindingStride :uint32_t;
       maxVertexOutputComponents :uint32_t;
       maxTessellationGenerationLevel :uint32_t;
       maxTessellationPatchSize :uint32_t;
       maxTessellationControlPerVertexInputComponents :uint32_t;
       maxTessellationControlPerVertexOutputComponents :uint32_t;
       maxTessellationControlPerPatchOutputComponents :uint32_t;
       maxTessellationControlTotalOutputComponents :uint32_t;
       maxTessellationEvaluationInputComponents :uint32_t;
       maxTessellationEvaluationOutputComponents :uint32_t;
       maxGeometryShaderInvocations :uint32_t;
       maxGeometryInputComponents :uint32_t;
       maxGeometryOutputComponents :uint32_t;
       maxGeometryOutputVertices :uint32_t;
       maxGeometryTotalOutputComponents :uint32_t;
       maxFragmentInputComponents :uint32_t;
       maxFragmentOutputAttachments :uint32_t;
       maxFragmentDualSrcAttachments :uint32_t;
       maxFragmentCombinedOutputResources :uint32_t;
       maxComputeSharedMemorySize :uint32_t;
       maxComputeWorkGroupCount :array [ 0..3-1 ] of uint32_t;
       maxComputeWorkGroupInvocations :uint32_t;
       maxComputeWorkGroupSize :array [ 0..3-1 ] of uint32_t;
       subPixelPrecisionBits :uint32_t;
       subTexelPrecisionBits :uint32_t;
       mipmapPrecisionBits :uint32_t;
       maxDrawIndexedIndexValue :uint32_t;
       maxDrawIndirectCount :uint32_t;
       maxSamplerLodBias :float;
       maxSamplerAnisotropy :float;
       maxViewports :uint32_t;
       maxViewportDimensions :array [ 0..2-1 ] of uint32_t;
       viewportBoundsRange :array [ 0..2-1 ] of float;
       viewportSubPixelBits :uint32_t;
       minMemoryMapAlignment :size_t;
       minTexelBufferOffsetAlignment :VkDeviceSize;
       minUniformBufferOffsetAlignment :VkDeviceSize;
       minStorageBufferOffsetAlignment :VkDeviceSize;
       minTexelOffset :int32_t;
       maxTexelOffset :uint32_t;
       minTexelGatherOffset :int32_t;
       maxTexelGatherOffset :uint32_t;
       minInterpolationOffset :float;
       maxInterpolationOffset :float;
       subPixelInterpolationOffsetBits :uint32_t;
       maxFramebufferWidth :uint32_t;
       maxFramebufferHeight :uint32_t;
       maxFramebufferLayers :uint32_t;
       framebufferColorSampleCounts :VkSampleCountFlags;
       framebufferDepthSampleCounts :VkSampleCountFlags;
       framebufferStencilSampleCounts :VkSampleCountFlags;
       framebufferNoAttachmentsSampleCounts :VkSampleCountFlags;
       maxColorAttachments :uint32_t;
       sampledImageColorSampleCounts :VkSampleCountFlags;
       sampledImageIntegerSampleCounts :VkSampleCountFlags;
       sampledImageDepthSampleCounts :VkSampleCountFlags;
       sampledImageStencilSampleCounts :VkSampleCountFlags;
       storageImageSampleCounts :VkSampleCountFlags;
       maxSampleMaskWords :uint32_t;
       timestampComputeAndGraphics :VkBool32;
       timestampPeriod :float;
       maxClipDistances :uint32_t;
       maxCullDistances :uint32_t;
       maxCombinedClipAndCullDistances :uint32_t;
       discreteQueuePriorities :uint32_t;
       pointSizeRange :array [ 0..2-1 ] of float;
       lineWidthRange :array [ 0..2-1 ] of float;
       pointSizeGranularity :float;
       lineWidthGranularity :float;
       strictLines :VkBool32;
       standardSampleLocations :VkBool32;
       optimalBufferCopyOffsetAlignment :VkDeviceSize;
       optimalBufferCopyRowPitchAlignment :VkDeviceSize;
       nonCoherentAtomSize :VkDeviceSize;
     end;

type VkPhysicalDeviceMemoryProperties = record
       memoryTypeCount :uint32_t;
       memoryTypes :array [ 0..VK_MAX_MEMORY_TYPES-1 ] of VkMemoryType;
       memoryHeapCount :uint32_t;
       memoryHeaps :array [ 0..VK_MAX_MEMORY_HEAPS-1 ] of VkMemoryHeap;
     end;

type VkPhysicalDeviceSparseProperties = record
       residencyStandard2DBlockShape :VkBool32;
       residencyStandard2DMultisampleBlockShape :VkBool32;
       residencyStandard3DBlockShape :VkBool32;
       residencyAlignedMipSize :VkBool32;
       residencyNonResidentStrict :VkBool32;
     end;

type VkPhysicalDeviceProperties = record
       apiVersion :uint32_t;
       driverVersion :uint32_t;
       vendorID :uint32_t;
       deviceID :uint32_t;
       deviceType :VkPhysicalDeviceType;
       deviceName :array [ 0..VK_MAX_PHYSICAL_DEVICE_NAME_SIZE-1 ] of char;
       pipelineCacheUUID :array [ 0..VK_UUID_SIZE-1 ] of uint8_t;
       limits :VkPhysicalDeviceLimits;
       sparseProperties :VkPhysicalDeviceSparseProperties;
     end;

type VkQueueFamilyProperties = record
       queueFlags :VkQueueFlags;
       queueCount :uint32_t;
       timestampValidBits :uint32_t;
       minImageTransferGranularity :VkExtent3D;
     end;

type VkDeviceQueueCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkDeviceQueueCreateFlags;
       queueFamilyIndex :uint32_t;
       queueCount :uint32_t;
       pQueuePriorities :P_float;
     end;

type VkDeviceCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkDeviceCreateFlags;
       queueCreateInfoCount :uint32_t;
       pQueueCreateInfos :P_VkDeviceQueueCreateInfo;
       enabledLayerCount :uint32_t;
       ppEnabledLayerNames :PP_char;
       enabledExtensionCount :uint32_t;
       ppEnabledExtensionNames :PP_char;
       pEnabledFeatures :P_VkPhysicalDeviceFeatures;
     end;

type VkExtensionProperties = record
       extensionName :array [ 0..VK_MAX_EXTENSION_NAME_SIZE-1 ] of char;
       specVersion :uint32_t;
     end;

type VkLayerProperties = record
       layerName :array [ 0..VK_MAX_EXTENSION_NAME_SIZE-1 ] of char;
       specVersion :uint32_t;
       implementationVersion :uint32_t;
       description :array [ 0..VK_MAX_DESCRIPTION_SIZE-1 ] of char;
     end;

type VkSubmitInfo = record
       sType :VkStructureType;
       pNext :P_void;
       waitSemaphoreCount :uint32_t;
       pWaitSemaphores :P_VkSemaphore;
       pWaitDstStageMask :P_VkPipelineStageFlags;
       commandBufferCount :uint32_t;
       pCommandBuffers :P_VkCommandBuffer;
       signalSemaphoreCount :uint32_t;
       pSignalSemaphores :P_VkSemaphore;
     end;

type VkMappedMemoryRange = record
       sType :VkStructureType;
       pNext :P_void;
       memory :VkDeviceMemory;
       offset :VkDeviceSize;
       size :VkDeviceSize;
     end;

type VkMemoryAllocateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       allocationSize :VkDeviceSize;
       memoryTypeIndex :uint32_t;
     end;

type VkMemoryRequirements = record
       size :VkDeviceSize;
       alignment :VkDeviceSize;
       memoryTypeBits :uint32_t;
     end;

type VkSparseMemoryBind = record
       resourceOffset :VkDeviceSize;
       size :VkDeviceSize;
       memory :VkDeviceMemory;
       memoryOffset :VkDeviceSize;
       flags :VkSparseMemoryBindFlags;
     end;

type VkSparseBufferMemoryBindInfo = record
       buffer :VkBuffer;
       bindCount :uint32_t;
       pBinds :P_VkSparseMemoryBind;
     end;

type VkSparseImageOpaqueMemoryBindInfo = record
       image :VkImage;
       bindCount :uint32_t;
       pBinds :P_VkSparseMemoryBind;
     end;

type VkImageSubresource = record
       aspectMask :VkImageAspectFlags;
       mipLevel :uint32_t;
       arrayLayer :uint32_t;
     end;

type VkSparseImageMemoryBind = record
       subresource :VkImageSubresource;
       offset :VkOffset3D;
       extent :VkExtent3D;
       memory :VkDeviceMemory;
       memoryOffset :VkDeviceSize;
       flags :VkSparseMemoryBindFlags;
     end;

type VkSparseImageMemoryBindInfo = record
       image :VkImage;
       bindCount :uint32_t;
       pBinds :P_VkSparseImageMemoryBind;
     end;

type VkBindSparseInfo = record
       sType :VkStructureType;
       pNext :P_void;
       waitSemaphoreCount :uint32_t;
       pWaitSemaphores :P_VkSemaphore;
       bufferBindCount :uint32_t;
       pBufferBinds :P_VkSparseBufferMemoryBindInfo;
       imageOpaqueBindCount :uint32_t;
       pImageOpaqueBinds :P_VkSparseImageOpaqueMemoryBindInfo;
       imageBindCount :uint32_t;
       pImageBinds :P_VkSparseImageMemoryBindInfo;
       signalSemaphoreCount :uint32_t;
       pSignalSemaphores :P_VkSemaphore;
     end;

type VkSparseImageFormatProperties = record
       aspectMask :VkImageAspectFlags;
       imageGranularity :VkExtent3D;
       flags :VkSparseImageFormatFlags;
     end;

type VkSparseImageMemoryRequirements = record
       formatProperties :VkSparseImageFormatProperties;
       imageMipTailFirstLod :uint32_t;
       imageMipTailSize :VkDeviceSize;
       imageMipTailOffset :VkDeviceSize;
       imageMipTailStride :VkDeviceSize;
     end;

type VkFenceCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkFenceCreateFlags;
     end;

type VkSemaphoreCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkSemaphoreCreateFlags;
     end;

type VkEventCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkEventCreateFlags;
     end;

type VkQueryPoolCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkQueryPoolCreateFlags;
       queryType :VkQueryType;
       queryCount :uint32_t;
       pipelineStatistics :VkQueryPipelineStatisticFlags;
     end;

type VkBufferCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkBufferCreateFlags;
       size :VkDeviceSize;
       usage :VkBufferUsageFlags;
       sharingMode :VkSharingMode;
       queueFamilyIndexCount :uint32_t;
       pQueueFamilyIndices :P_uint32_t;
     end;

type VkBufferViewCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkBufferViewCreateFlags;
       buffer :VkBuffer;
       format :VkFormat;
       offset :VkDeviceSize;
       range :VkDeviceSize;
     end;

type VkImageCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkImageCreateFlags;
       imageType :VkImageType;
       format :VkFormat;
       extent :VkExtent3D;
       mipLevels :uint32_t;
       arrayLayers :uint32_t;
       samples :VkSampleCountFlagBits;
       tiling :VkImageTiling;
       usage :VkImageUsageFlags;
       sharingMode :VkSharingMode;
       queueFamilyIndexCount :uint32_t;
       pQueueFamilyIndices :P_uint32_t;
       initialLayout :VkImageLayout;
     end;

type VkSubresourceLayout = record
       offset :VkDeviceSize;
       size :VkDeviceSize;
       rowPitch :VkDeviceSize;
       arrayPitch :VkDeviceSize;
       depthPitch :VkDeviceSize;
     end;

type VkComponentMapping = record
       r :VkComponentSwizzle;
       g :VkComponentSwizzle;
       b :VkComponentSwizzle;
       a :VkComponentSwizzle;
     end;

type VkImageViewCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkImageViewCreateFlags;
       image :VkImage;
       viewType :VkImageViewType;
       format :VkFormat;
       components :VkComponentMapping;
       subresourceRange :VkImageSubresourceRange;
     end;

type VkShaderModuleCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkShaderModuleCreateFlags;
       codeSize :size_t;
       pCode :P_uint32_t;
     end;

type VkPipelineCacheCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineCacheCreateFlags;
       initialDataSize :size_t;
       pInitialData :P_void;
     end;

type VkSpecializationMapEntry = record
       constantID :uint32_t;
       offset :uint32_t;
       size :size_t;
     end;

type VkSpecializationInfo = record
       mapEntryCount :uint32_t;
       pMapEntries :P_VkSpecializationMapEntry;
       dataSize :size_t;
       pData :P_void;
     end;

type VkPipelineShaderStageCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineShaderStageCreateFlags;
       stage :VkShaderStageFlagBits;
       module :VkShaderModule;
       pName :P_char;
       pSpecializationInfo :P_VkSpecializationInfo;
     end;

type VkComputePipelineCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineCreateFlags;
       stage :VkPipelineShaderStageCreateInfo;
       layout :VkPipelineLayout;
       basePipelineHandle :VkPipeline;
       basePipelineIndex :int32_t;
     end;

type VkVertexInputBindingDescription = record
       binding :uint32_t;
       stride :uint32_t;
       inputRate :VkVertexInputRate;
     end;

type VkVertexInputAttributeDescription = record
       location :uint32_t;
       binding :uint32_t;
       format :VkFormat;
       offset :uint32_t;
     end;

type VkPipelineVertexInputStateCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineVertexInputStateCreateFlags;
       vertexBindingDescriptionCount :uint32_t;
       pVertexBindingDescriptions :P_VkVertexInputBindingDescription;
       vertexAttributeDescriptionCount :uint32_t;
       pVertexAttributeDescriptions :P_VkVertexInputAttributeDescription;
     end;

type VkPipelineInputAssemblyStateCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineInputAssemblyStateCreateFlags;
       topology :VkPrimitiveTopology;
       primitiveRestartEnable :VkBool32;
     end;

type VkPipelineTessellationStateCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineTessellationStateCreateFlags;
       patchControlPoints :uint32_t;
     end;

type VkViewport = record
       x :float;
       y :float;
       width :float;
       height :float;
       minDepth :float;
       maxDepth :float;
     end;

type VkPipelineViewportStateCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineViewportStateCreateFlags;
       viewportCount :uint32_t;
       pViewports :P_VkViewport;
       scissorCount :uint32_t;
       pScissors :P_VkRect2D;
     end;

type VkPipelineRasterizationStateCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineRasterizationStateCreateFlags;
       depthClampEnable :VkBool32;
       rasterizerDiscardEnable :VkBool32;
       polygonMode :VkPolygonMode;
       cullMode :VkCullModeFlags;
       frontFace :VkFrontFace;
       depthBiasEnable :VkBool32;
       depthBiasConstantFactor :float;
       depthBiasClamp :float;
       depthBiasSlopeFactor :float;
       lineWidth :float;
     end;

type VkPipelineMultisampleStateCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineMultisampleStateCreateFlags;
       rasterizationSamples :VkSampleCountFlagBits;
       sampleShadingEnable :VkBool32;
       minSampleShading :float;
       pSampleMask :P_VkSampleMask;
       alphaToCoverageEnable :VkBool32;
       alphaToOneEnable :VkBool32;
     end;

type VkStencilOpState = record
       failOp :VkStencilOp;
       passOp :VkStencilOp;
       depthFailOp :VkStencilOp;
       compareOp :VkCompareOp;
       compareMask :uint32_t;
       writeMask :uint32_t;
       reference :uint32_t;
     end;

type VkPipelineDepthStencilStateCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineDepthStencilStateCreateFlags;
       depthTestEnable :VkBool32;
       depthWriteEnable :VkBool32;
       depthCompareOp :VkCompareOp;
       depthBoundsTestEnable :VkBool32;
       stencilTestEnable :VkBool32;
       front :VkStencilOpState;
       back :VkStencilOpState;
       minDepthBounds :float;
       maxDepthBounds :float;
     end;

type VkPipelineColorBlendAttachmentState = record
       blendEnable :VkBool32;
       srcColorBlendFactor :VkBlendFactor;
       dstColorBlendFactor :VkBlendFactor;
       colorBlendOp :VkBlendOp;
       srcAlphaBlendFactor :VkBlendFactor;
       dstAlphaBlendFactor :VkBlendFactor;
       alphaBlendOp :VkBlendOp;
       colorWriteMask :VkColorComponentFlags;
     end;

type VkPipelineColorBlendStateCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineColorBlendStateCreateFlags;
       logicOpEnable :VkBool32;
       logicOp :VkLogicOp;
       attachmentCount :uint32_t;
       pAttachments :P_VkPipelineColorBlendAttachmentState;
       blendConstants :array [ 0..4-1 ] of float;
     end;

type VkPipelineDynamicStateCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineDynamicStateCreateFlags;
       dynamicStateCount :uint32_t;
       pDynamicStates :P_VkDynamicState;
     end;

type VkGraphicsPipelineCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineCreateFlags;
       stageCount :uint32_t;
       pStages :P_VkPipelineShaderStageCreateInfo;
       pVertexInputState :P_VkPipelineVertexInputStateCreateInfo;
       pInputAssemblyState :P_VkPipelineInputAssemblyStateCreateInfo;
       pTessellationState :P_VkPipelineTessellationStateCreateInfo;
       pViewportState :P_VkPipelineViewportStateCreateInfo;
       pRasterizationState :P_VkPipelineRasterizationStateCreateInfo;
       pMultisampleState :P_VkPipelineMultisampleStateCreateInfo;
       pDepthStencilState :P_VkPipelineDepthStencilStateCreateInfo;
       pColorBlendState :P_VkPipelineColorBlendStateCreateInfo;
       pDynamicState :P_VkPipelineDynamicStateCreateInfo;
       layout :VkPipelineLayout;
       renderPass :VkRenderPass;
       subpass :uint32_t;
       basePipelineHandle :VkPipeline;
       basePipelineIndex :int32_t;
     end;

type VkPushConstantRange = record
       stageFlags :VkShaderStageFlags;
       offset :uint32_t;
       size :uint32_t;
     end;

type VkPipelineLayoutCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineLayoutCreateFlags;
       setLayoutCount :uint32_t;
       pSetLayouts :P_VkDescriptorSetLayout;
       pushConstantRangeCount :uint32_t;
       pPushConstantRanges :P_VkPushConstantRange;
     end;

type VkSamplerCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkSamplerCreateFlags;
       magFilter :VkFilter;
       minFilter :VkFilter;
       mipmapMode :VkSamplerMipmapMode;
       addressModeU :VkSamplerAddressMode;
       addressModeV :VkSamplerAddressMode;
       addressModeW :VkSamplerAddressMode;
       mipLodBias :float;
       anisotropyEnable :VkBool32;
       maxAnisotropy :float;
       compareEnable :VkBool32;
       compareOp :VkCompareOp;
       minLod :float;
       maxLod :float;
       borderColor :VkBorderColor;
       unnormalizedCoordinates :VkBool32;
     end;

type VkCopyDescriptorSet = record
       sType :VkStructureType;
       pNext :P_void;
       srcSet :VkDescriptorSet;
       srcBinding :uint32_t;
       srcArrayElement :uint32_t;
       dstSet :VkDescriptorSet;
       dstBinding :uint32_t;
       dstArrayElement :uint32_t;
       descriptorCount :uint32_t;
     end;

type VkDescriptorBufferInfo = record
       buffer :VkBuffer;
       offset :VkDeviceSize;
       range :VkDeviceSize;
     end;

type VkDescriptorImageInfo = record
       sampler :VkSampler;
       imageView :VkImageView;
       imageLayout :VkImageLayout;
     end;

type VkDescriptorPoolSize = record
       type :VkDescriptorType;
       descriptorCount :uint32_t;
     end;

type VkDescriptorPoolCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkDescriptorPoolCreateFlags;
       maxSets :uint32_t;
       poolSizeCount :uint32_t;
       pPoolSizes :P_VkDescriptorPoolSize;
     end;

type VkDescriptorSetAllocateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       descriptorPool :VkDescriptorPool;
       descriptorSetCount :uint32_t;
       pSetLayouts :P_VkDescriptorSetLayout;
     end;

type VkDescriptorSetLayoutBinding = record
       binding :uint32_t;
       descriptorType :VkDescriptorType;
       descriptorCount :uint32_t;
       stageFlags :VkShaderStageFlags;
       pImmutableSamplers :P_VkSampler;
     end;

type VkDescriptorSetLayoutCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkDescriptorSetLayoutCreateFlags;
       bindingCount :uint32_t;
       pBindings :P_VkDescriptorSetLayoutBinding;
     end;

type VkWriteDescriptorSet = record
       sType :VkStructureType;
       pNext :P_void;
       dstSet :VkDescriptorSet;
       dstBinding :uint32_t;
       dstArrayElement :uint32_t;
       descriptorCount :uint32_t;
       descriptorType :VkDescriptorType;
       pImageInfo :P_VkDescriptorImageInfo;
       pBufferInfo :P_VkDescriptorBufferInfo;
       pTexelBufferView :P_VkBufferView;
     end;

type VkAttachmentDescription = record
       flags :VkAttachmentDescriptionFlags;
       format :VkFormat;
       samples :VkSampleCountFlagBits;
       loadOp :VkAttachmentLoadOp;
       storeOp :VkAttachmentStoreOp;
       stencilLoadOp :VkAttachmentLoadOp;
       stencilStoreOp :VkAttachmentStoreOp;
       initialLayout :VkImageLayout;
       finalLayout :VkImageLayout;
     end;

type VkAttachmentReference = record
       attachment :uint32_t;
       layout :VkImageLayout;
     end;

type VkFramebufferCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkFramebufferCreateFlags;
       renderPass :VkRenderPass;
       attachmentCount :uint32_t;
       pAttachments :P_VkImageView;
       width :uint32_t;
       height :uint32_t;
       layers :uint32_t;
     end;

type VkSubpassDescription = record
       flags :VkSubpassDescriptionFlags;
       pipelineBindPoint :VkPipelineBindPoint;
       inputAttachmentCount :uint32_t;
       pInputAttachments :P_VkAttachmentReference;
       colorAttachmentCount :uint32_t;
       pColorAttachments :P_VkAttachmentReference;
       pResolveAttachments :P_VkAttachmentReference;
       pDepthStencilAttachment :P_VkAttachmentReference;
       preserveAttachmentCount :uint32_t;
       pPreserveAttachments :P_uint32_t;
     end;

type VkSubpassDependency = record
       srcSubpass :uint32_t;
       dstSubpass :uint32_t;
       srcStageMask :VkPipelineStageFlags;
       dstStageMask :VkPipelineStageFlags;
       srcAccessMask :VkAccessFlags;
       dstAccessMask :VkAccessFlags;
       dependencyFlags :VkDependencyFlags;
     end;

type VkRenderPassCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkRenderPassCreateFlags;
       attachmentCount :uint32_t;
       pAttachments :P_VkAttachmentDescription;
       subpassCount :uint32_t;
       pSubpasses :P_VkSubpassDescription;
       dependencyCount :uint32_t;
       pDependencies :P_VkSubpassDependency;
     end;

type VkCommandPoolCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkCommandPoolCreateFlags;
       queueFamilyIndex :uint32_t;
     end;

type VkCommandBufferAllocateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       commandPool :VkCommandPool;
       level :VkCommandBufferLevel;
       commandBufferCount :uint32_t;
     end;

type VkCommandBufferInheritanceInfo = record
       sType :VkStructureType;
       pNext :P_void;
       renderPass :VkRenderPass;
       subpass :uint32_t;
       framebuffer :VkFramebuffer;
       occlusionQueryEnable :VkBool32;
       queryFlags :VkQueryControlFlags;
       pipelineStatistics :VkQueryPipelineStatisticFlags;
     end;

type VkCommandBufferBeginInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkCommandBufferUsageFlags;
       pInheritanceInfo :P_VkCommandBufferInheritanceInfo;
     end;

type VkBufferCopy = record
       srcOffset :VkDeviceSize;
       dstOffset :VkDeviceSize;
       size :VkDeviceSize;
     end;

type VkImageSubresourceLayers = record
       aspectMask :VkImageAspectFlags;
       mipLevel :uint32_t;
       baseArrayLayer :uint32_t;
       layerCount :uint32_t;
     end;

type VkBufferImageCopy = record
       bufferOffset :VkDeviceSize;
       bufferRowLength :uint32_t;
       bufferImageHeight :uint32_t;
       imageSubresource :VkImageSubresourceLayers;
       imageOffset :VkOffset3D;
       imageExtent :VkExtent3D;
     end;

typedef union VkClearColorValue {
       float32 :array [ 0..4-1 ] of float;
       int32 :array [ 0..4-1 ] of int32_t;
       uint32 :array [ 0..4-1 ] of uint32_t;
} VkClearColorValue;

type VkClearDepthStencilValue = record
       depth :float;
       stencil :uint32_t;
     end;

typedef union VkClearValue {
       color :VkClearColorValue;
       depthStencil :VkClearDepthStencilValue;
} VkClearValue;

type VkClearAttachment = record
       aspectMask :VkImageAspectFlags;
       colorAttachment :uint32_t;
       clearValue :VkClearValue;
     end;

type VkClearRect = record
       rect :VkRect2D;
       baseArrayLayer :uint32_t;
       layerCount :uint32_t;
     end;

type VkImageBlit = record
       srcSubresource :VkImageSubresourceLayers;
       srcOffsets :array [ 0..2-1 ] of VkOffset3D;
       dstSubresource :VkImageSubresourceLayers;
       dstOffsets :array [ 0..2-1 ] of VkOffset3D;
     end;

type VkImageCopy = record
       srcSubresource :VkImageSubresourceLayers;
       srcOffset :VkOffset3D;
       dstSubresource :VkImageSubresourceLayers;
       dstOffset :VkOffset3D;
       extent :VkExtent3D;
     end;

type VkImageResolve = record
       srcSubresource :VkImageSubresourceLayers;
       srcOffset :VkOffset3D;
       dstSubresource :VkImageSubresourceLayers;
       dstOffset :VkOffset3D;
       extent :VkExtent3D;
     end;

type VkRenderPassBeginInfo = record
       sType :VkStructureType;
       pNext :P_void;
       renderPass :VkRenderPass;
       framebuffer :VkFramebuffer;
       renderArea :VkRect2D;
       clearValueCount :uint32_t;
       pClearValues :P_VkClearValue;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkCreateInstance)(const P_VkInstanceCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkInstance pInstance);
typedef void (VKAPI_PTR *PFN_vkDestroyInstance)(VkInstance instance, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkEnumeratePhysicalDevices)(VkInstance instance, P_uint32_t pPhysicalDeviceCount, P_VkPhysicalDevice pPhysicalDevices);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceFeatures)(VkPhysicalDevice physicalDevice, P_VkPhysicalDeviceFeatures pFeatures);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, P_VkFormatProperties pFormatProperties);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceImageFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, P_VkImageFormatProperties pImageFormatProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceProperties)(VkPhysicalDevice physicalDevice, P_VkPhysicalDeviceProperties pProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceQueueFamilyProperties)(VkPhysicalDevice physicalDevice, P_uint32_t pQueueFamilyPropertyCount, P_VkQueueFamilyProperties pQueueFamilyProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceMemoryProperties)(VkPhysicalDevice physicalDevice, P_VkPhysicalDeviceMemoryProperties pMemoryProperties);
typedef PFN_vkVoidFunction (VKAPI_PTR *PFN_vkGetInstanceProcAddr)(VkInstance instance, const P_char pName);
typedef PFN_vkVoidFunction (VKAPI_PTR *PFN_vkGetDeviceProcAddr)(VkDevice device, const P_char pName);
typedef VkResult (VKAPI_PTR *PFN_vkCreateDevice)(VkPhysicalDevice physicalDevice, const P_VkDeviceCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkDevice pDevice);
typedef void (VKAPI_PTR *PFN_vkDestroyDevice)(VkDevice device, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkEnumerateInstanceExtensionProperties)(const P_char pLayerName, P_uint32_t pPropertyCount, P_VkExtensionProperties pProperties);
typedef VkResult (VKAPI_PTR *PFN_vkEnumerateDeviceExtensionProperties)(VkPhysicalDevice physicalDevice, const P_char pLayerName, P_uint32_t pPropertyCount, P_VkExtensionProperties pProperties);
typedef VkResult (VKAPI_PTR *PFN_vkEnumerateInstanceLayerProperties)(P_uint32_t pPropertyCount, P_VkLayerProperties pProperties);
typedef VkResult (VKAPI_PTR *PFN_vkEnumerateDeviceLayerProperties)(VkPhysicalDevice physicalDevice, P_uint32_t pPropertyCount, P_VkLayerProperties pProperties);
typedef void (VKAPI_PTR *PFN_vkGetDeviceQueue)(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, P_VkQueue pQueue);
typedef VkResult (VKAPI_PTR *PFN_vkQueueSubmit)(VkQueue queue, uint32_t submitCount, const P_VkSubmitInfo pSubmits, VkFence fence);
typedef VkResult (VKAPI_PTR *PFN_vkQueueWaitIdle)(VkQueue queue);
typedef VkResult (VKAPI_PTR *PFN_vkDeviceWaitIdle)(VkDevice device);
typedef VkResult (VKAPI_PTR *PFN_vkAllocateMemory)(VkDevice device, const P_VkMemoryAllocateInfo pAllocateInfo, const P_VkAllocationCallbacks pAllocator, P_VkDeviceMemory pMemory);
typedef void (VKAPI_PTR *PFN_vkFreeMemory)(VkDevice device, VkDeviceMemory memory, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkMapMemory)(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, PP_void ppData);
typedef void (VKAPI_PTR *PFN_vkUnmapMemory)(VkDevice device, VkDeviceMemory memory);
typedef VkResult (VKAPI_PTR *PFN_vkFlushMappedMemoryRanges)(VkDevice device, uint32_t memoryRangeCount, const P_VkMappedMemoryRange pMemoryRanges);
typedef VkResult (VKAPI_PTR *PFN_vkInvalidateMappedMemoryRanges)(VkDevice device, uint32_t memoryRangeCount, const P_VkMappedMemoryRange pMemoryRanges);
typedef void (VKAPI_PTR *PFN_vkGetDeviceMemoryCommitment)(VkDevice device, VkDeviceMemory memory, P_VkDeviceSize pCommittedMemoryInBytes);
typedef VkResult (VKAPI_PTR *PFN_vkBindBufferMemory)(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset);
typedef VkResult (VKAPI_PTR *PFN_vkBindImageMemory)(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset);
typedef void (VKAPI_PTR *PFN_vkGetBufferMemoryRequirements)(VkDevice device, VkBuffer buffer, P_VkMemoryRequirements pMemoryRequirements);
typedef void (VKAPI_PTR *PFN_vkGetImageMemoryRequirements)(VkDevice device, VkImage image, P_VkMemoryRequirements pMemoryRequirements);
typedef void (VKAPI_PTR *PFN_vkGetImageSparseMemoryRequirements)(VkDevice device, VkImage image, P_uint32_t pSparseMemoryRequirementCount, P_VkSparseImageMemoryRequirements pSparseMemoryRequirements);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceSparseImageFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, P_uint32_t pPropertyCount, P_VkSparseImageFormatProperties pProperties);
typedef VkResult (VKAPI_PTR *PFN_vkQueueBindSparse)(VkQueue queue, uint32_t bindInfoCount, const P_VkBindSparseInfo pBindInfo, VkFence fence);
typedef VkResult (VKAPI_PTR *PFN_vkCreateFence)(VkDevice device, const P_VkFenceCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkFence pFence);
typedef void (VKAPI_PTR *PFN_vkDestroyFence)(VkDevice device, VkFence fence, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkResetFences)(VkDevice device, uint32_t fenceCount, const P_VkFence pFences);
typedef VkResult (VKAPI_PTR *PFN_vkGetFenceStatus)(VkDevice device, VkFence fence);
typedef VkResult (VKAPI_PTR *PFN_vkWaitForFences)(VkDevice device, uint32_t fenceCount, const P_VkFence pFences, VkBool32 waitAll, uint64_t timeout);
typedef VkResult (VKAPI_PTR *PFN_vkCreateSemaphore)(VkDevice device, const P_VkSemaphoreCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkSemaphore pSemaphore);
typedef void (VKAPI_PTR *PFN_vkDestroySemaphore)(VkDevice device, VkSemaphore semaphore, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreateEvent)(VkDevice device, const P_VkEventCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkEvent pEvent);
typedef void (VKAPI_PTR *PFN_vkDestroyEvent)(VkDevice device, VkEvent event, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkGetEventStatus)(VkDevice device, VkEvent event);
typedef VkResult (VKAPI_PTR *PFN_vkSetEvent)(VkDevice device, VkEvent event);
typedef VkResult (VKAPI_PTR *PFN_vkResetEvent)(VkDevice device, VkEvent event);
typedef VkResult (VKAPI_PTR *PFN_vkCreateQueryPool)(VkDevice device, const P_VkQueryPoolCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkQueryPool pQueryPool);
typedef void (VKAPI_PTR *PFN_vkDestroyQueryPool)(VkDevice device, VkQueryPool queryPool, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkGetQueryPoolResults)(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, P_void pData, VkDeviceSize stride, VkQueryResultFlags flags);
typedef VkResult (VKAPI_PTR *PFN_vkCreateBuffer)(VkDevice device, const P_VkBufferCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkBuffer pBuffer);
typedef void (VKAPI_PTR *PFN_vkDestroyBuffer)(VkDevice device, VkBuffer buffer, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreateBufferView)(VkDevice device, const P_VkBufferViewCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkBufferView pView);
typedef void (VKAPI_PTR *PFN_vkDestroyBufferView)(VkDevice device, VkBufferView bufferView, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreateImage)(VkDevice device, const P_VkImageCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkImage pImage);
typedef void (VKAPI_PTR *PFN_vkDestroyImage)(VkDevice device, VkImage image, const P_VkAllocationCallbacks pAllocator);
typedef void (VKAPI_PTR *PFN_vkGetImageSubresourceLayout)(VkDevice device, VkImage image, const P_VkImageSubresource pSubresource, P_VkSubresourceLayout pLayout);
typedef VkResult (VKAPI_PTR *PFN_vkCreateImageView)(VkDevice device, const P_VkImageViewCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkImageView pView);
typedef void (VKAPI_PTR *PFN_vkDestroyImageView)(VkDevice device, VkImageView imageView, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreateShaderModule)(VkDevice device, const P_VkShaderModuleCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkShaderModule pShaderModule);
typedef void (VKAPI_PTR *PFN_vkDestroyShaderModule)(VkDevice device, VkShaderModule shaderModule, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreatePipelineCache)(VkDevice device, const P_VkPipelineCacheCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkPipelineCache pPipelineCache);
typedef void (VKAPI_PTR *PFN_vkDestroyPipelineCache)(VkDevice device, VkPipelineCache pipelineCache, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkGetPipelineCacheData)(VkDevice device, VkPipelineCache pipelineCache, P_size_t pDataSize, P_void pData);
typedef VkResult (VKAPI_PTR *PFN_vkMergePipelineCaches)(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const P_VkPipelineCache pSrcCaches);
typedef VkResult (VKAPI_PTR *PFN_vkCreateGraphicsPipelines)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const P_VkGraphicsPipelineCreateInfo pCreateInfos, const P_VkAllocationCallbacks pAllocator, P_VkPipeline pPipelines);
typedef VkResult (VKAPI_PTR *PFN_vkCreateComputePipelines)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const P_VkComputePipelineCreateInfo pCreateInfos, const P_VkAllocationCallbacks pAllocator, P_VkPipeline pPipelines);
typedef void (VKAPI_PTR *PFN_vkDestroyPipeline)(VkDevice device, VkPipeline pipeline, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreatePipelineLayout)(VkDevice device, const P_VkPipelineLayoutCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkPipelineLayout pPipelineLayout);
typedef void (VKAPI_PTR *PFN_vkDestroyPipelineLayout)(VkDevice device, VkPipelineLayout pipelineLayout, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreateSampler)(VkDevice device, const P_VkSamplerCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkSampler pSampler);
typedef void (VKAPI_PTR *PFN_vkDestroySampler)(VkDevice device, VkSampler sampler, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreateDescriptorSetLayout)(VkDevice device, const P_VkDescriptorSetLayoutCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkDescriptorSetLayout pSetLayout);
typedef void (VKAPI_PTR *PFN_vkDestroyDescriptorSetLayout)(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreateDescriptorPool)(VkDevice device, const P_VkDescriptorPoolCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkDescriptorPool pDescriptorPool);
typedef void (VKAPI_PTR *PFN_vkDestroyDescriptorPool)(VkDevice device, VkDescriptorPool descriptorPool, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkResetDescriptorPool)(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags);
typedef VkResult (VKAPI_PTR *PFN_vkAllocateDescriptorSets)(VkDevice device, const P_VkDescriptorSetAllocateInfo pAllocateInfo, P_VkDescriptorSet pDescriptorSets);
typedef VkResult (VKAPI_PTR *PFN_vkFreeDescriptorSets)(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const P_VkDescriptorSet pDescriptorSets);
typedef void (VKAPI_PTR *PFN_vkUpdateDescriptorSets)(VkDevice device, uint32_t descriptorWriteCount, const P_VkWriteDescriptorSet pDescriptorWrites, uint32_t descriptorCopyCount, const P_VkCopyDescriptorSet pDescriptorCopies);
typedef VkResult (VKAPI_PTR *PFN_vkCreateFramebuffer)(VkDevice device, const P_VkFramebufferCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkFramebuffer pFramebuffer);
typedef void (VKAPI_PTR *PFN_vkDestroyFramebuffer)(VkDevice device, VkFramebuffer framebuffer, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreateRenderPass)(VkDevice device, const P_VkRenderPassCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkRenderPass pRenderPass);
typedef void (VKAPI_PTR *PFN_vkDestroyRenderPass)(VkDevice device, VkRenderPass renderPass, const P_VkAllocationCallbacks pAllocator);
typedef void (VKAPI_PTR *PFN_vkGetRenderAreaGranularity)(VkDevice device, VkRenderPass renderPass, P_VkExtent2D pGranularity);
typedef VkResult (VKAPI_PTR *PFN_vkCreateCommandPool)(VkDevice device, const P_VkCommandPoolCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkCommandPool pCommandPool);
typedef void (VKAPI_PTR *PFN_vkDestroyCommandPool)(VkDevice device, VkCommandPool commandPool, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkResetCommandPool)(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags);
typedef VkResult (VKAPI_PTR *PFN_vkAllocateCommandBuffers)(VkDevice device, const P_VkCommandBufferAllocateInfo pAllocateInfo, P_VkCommandBuffer pCommandBuffers);
typedef void (VKAPI_PTR *PFN_vkFreeCommandBuffers)(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const P_VkCommandBuffer pCommandBuffers);
typedef VkResult (VKAPI_PTR *PFN_vkBeginCommandBuffer)(VkCommandBuffer commandBuffer, const P_VkCommandBufferBeginInfo pBeginInfo);
typedef VkResult (VKAPI_PTR *PFN_vkEndCommandBuffer)(VkCommandBuffer commandBuffer);
typedef VkResult (VKAPI_PTR *PFN_vkResetCommandBuffer)(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags);
typedef void (VKAPI_PTR *PFN_vkCmdBindPipeline)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);
typedef void (VKAPI_PTR *PFN_vkCmdSetViewport)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const P_VkViewport pViewports);
typedef void (VKAPI_PTR *PFN_vkCmdSetScissor)(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const P_VkRect2D pScissors);
typedef void (VKAPI_PTR *PFN_vkCmdSetLineWidth)(VkCommandBuffer commandBuffer, float lineWidth);
typedef void (VKAPI_PTR *PFN_vkCmdSetDepthBias)(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
typedef void (VKAPI_PTR *PFN_vkCmdSetBlendConstants)(VkCommandBuffer commandBuffer, const float blendConstants[4]);
typedef void (VKAPI_PTR *PFN_vkCmdSetDepthBounds)(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);
typedef void (VKAPI_PTR *PFN_vkCmdSetStencilCompareMask)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask);
typedef void (VKAPI_PTR *PFN_vkCmdSetStencilWriteMask)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask);
typedef void (VKAPI_PTR *PFN_vkCmdSetStencilReference)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference);
typedef void (VKAPI_PTR *PFN_vkCmdBindDescriptorSets)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const P_VkDescriptorSet pDescriptorSets, uint32_t dynamicOffsetCount, const P_uint32_t pDynamicOffsets);
typedef void (VKAPI_PTR *PFN_vkCmdBindIndexBuffer)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType);
typedef void (VKAPI_PTR *PFN_vkCmdBindVertexBuffers)(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const P_VkBuffer pBuffers, const P_VkDeviceSize pOffsets);
typedef void (VKAPI_PTR *PFN_vkCmdDraw)(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);
typedef void (VKAPI_PTR *PFN_vkCmdDrawIndexed)(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance);
typedef void (VKAPI_PTR *PFN_vkCmdDrawIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
typedef void (VKAPI_PTR *PFN_vkCmdDrawIndexedIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
typedef void (VKAPI_PTR *PFN_vkCmdDispatch)(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
typedef void (VKAPI_PTR *PFN_vkCmdDispatchIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);
typedef void (VKAPI_PTR *PFN_vkCmdCopyBuffer)(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const P_VkBufferCopy pRegions);
typedef void (VKAPI_PTR *PFN_vkCmdCopyImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const P_VkImageCopy pRegions);
typedef void (VKAPI_PTR *PFN_vkCmdBlitImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const P_VkImageBlit pRegions, VkFilter filter);
typedef void (VKAPI_PTR *PFN_vkCmdCopyBufferToImage)(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const P_VkBufferImageCopy pRegions);
typedef void (VKAPI_PTR *PFN_vkCmdCopyImageToBuffer)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const P_VkBufferImageCopy pRegions);
typedef void (VKAPI_PTR *PFN_vkCmdUpdateBuffer)(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const P_void pData);
typedef void (VKAPI_PTR *PFN_vkCmdFillBuffer)(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data);
typedef void (VKAPI_PTR *PFN_vkCmdClearColorImage)(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const P_VkClearColorValue pColor, uint32_t rangeCount, const P_VkImageSubresourceRange pRanges);
typedef void (VKAPI_PTR *PFN_vkCmdClearDepthStencilImage)(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const P_VkClearDepthStencilValue pDepthStencil, uint32_t rangeCount, const P_VkImageSubresourceRange pRanges);
typedef void (VKAPI_PTR *PFN_vkCmdClearAttachments)(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const P_VkClearAttachment pAttachments, uint32_t rectCount, const P_VkClearRect pRects);
typedef void (VKAPI_PTR *PFN_vkCmdResolveImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const P_VkImageResolve pRegions);
typedef void (VKAPI_PTR *PFN_vkCmdSetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
typedef void (VKAPI_PTR *PFN_vkCmdResetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
typedef void (VKAPI_PTR *PFN_vkCmdWaitEvents)(VkCommandBuffer commandBuffer, uint32_t eventCount, const P_VkEvent pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const P_VkMemoryBarrier pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const P_VkBufferMemoryBarrier pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const P_VkImageMemoryBarrier pImageMemoryBarriers);
typedef void (VKAPI_PTR *PFN_vkCmdPipelineBarrier)(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const P_VkMemoryBarrier pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const P_VkBufferMemoryBarrier pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const P_VkImageMemoryBarrier pImageMemoryBarriers);
typedef void (VKAPI_PTR *PFN_vkCmdBeginQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags);
typedef void (VKAPI_PTR *PFN_vkCmdEndQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query);
typedef void (VKAPI_PTR *PFN_vkCmdResetQueryPool)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
typedef void (VKAPI_PTR *PFN_vkCmdWriteTimestamp)(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query);
typedef void (VKAPI_PTR *PFN_vkCmdCopyQueryPoolResults)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);
typedef void (VKAPI_PTR *PFN_vkCmdPushConstants)(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const P_void pValues);
typedef void (VKAPI_PTR *PFN_vkCmdBeginRenderPass)(VkCommandBuffer commandBuffer, const P_VkRenderPassBeginInfo pRenderPassBegin, VkSubpassContents contents);
typedef void (VKAPI_PTR *PFN_vkCmdNextSubpass)(VkCommandBuffer commandBuffer, VkSubpassContents contents);
typedef void (VKAPI_PTR *PFN_vkCmdEndRenderPass)(VkCommandBuffer commandBuffer);
typedef void (VKAPI_PTR *PFN_vkCmdExecuteCommands)(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const P_VkCommandBuffer pCommandBuffers);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkCreateInstance(
    P_VkInstanceCreateInfo                      pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkInstance                                pInstance);

VKAPI_ATTR void VKAPI_CALL vkDestroyInstance(
    VkInstance                                  instance,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkEnumeratePhysicalDevices(
    VkInstance                                  instance,
    P_uint32_t                                  pPhysicalDeviceCount,
    P_VkPhysicalDevice                          pPhysicalDevices);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFeatures(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceFeatures                  pFeatures);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFormatProperties(
    VkPhysicalDevice                            physicalDevice,
    VkFormat                                    format,
    P_VkFormatProperties                        pFormatProperties);

VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceImageFormatProperties(
    VkPhysicalDevice                            physicalDevice,
    VkFormat                                    format,
    VkImageType                                 type,
    VkImageTiling                               tiling,
    VkImageUsageFlags                           usage,
    VkImageCreateFlags                          flags,
    P_VkImageFormatProperties                   pImageFormatProperties);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceProperties(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceProperties                pProperties);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceQueueFamilyProperties(
    VkPhysicalDevice                            physicalDevice,
    P_uint32_t                                  pQueueFamilyPropertyCount,
    P_VkQueueFamilyProperties                   pQueueFamilyProperties);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceMemoryProperties(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceMemoryProperties          pMemoryProperties);

VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL vkGetInstanceProcAddr(
    VkInstance                                  instance,
    P_char                                      pName);

VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL vkGetDeviceProcAddr(
    VkDevice                                    device,
    P_char                                      pName);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateDevice(
    VkPhysicalDevice                            physicalDevice,
    P_VkDeviceCreateInfo                        pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkDevice                                  pDevice);

VKAPI_ATTR void VKAPI_CALL vkDestroyDevice(
    VkDevice                                    device,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkEnumerateInstanceExtensionProperties(
    P_char                                      pLayerName,
    P_uint32_t                                  pPropertyCount,
    P_VkExtensionProperties                     pProperties);

VKAPI_ATTR VkResult VKAPI_CALL vkEnumerateDeviceExtensionProperties(
    VkPhysicalDevice                            physicalDevice,
    P_char                                      pLayerName,
    P_uint32_t                                  pPropertyCount,
    P_VkExtensionProperties                     pProperties);

VKAPI_ATTR VkResult VKAPI_CALL vkEnumerateInstanceLayerProperties(
    P_uint32_t                                  pPropertyCount,
    P_VkLayerProperties                         pProperties);

VKAPI_ATTR VkResult VKAPI_CALL vkEnumerateDeviceLayerProperties(
    VkPhysicalDevice                            physicalDevice,
    P_uint32_t                                  pPropertyCount,
    P_VkLayerProperties                         pProperties);

VKAPI_ATTR void VKAPI_CALL vkGetDeviceQueue(
    VkDevice                                    device,
    uint32_t                                    queueFamilyIndex,
    uint32_t                                    queueIndex,
    P_VkQueue                                   pQueue);

VKAPI_ATTR VkResult VKAPI_CALL vkQueueSubmit(
    VkQueue                                     queue,
    uint32_t                                    submitCount,
    P_VkSubmitInfo                              pSubmits,
    VkFence                                     fence);

VKAPI_ATTR VkResult VKAPI_CALL vkQueueWaitIdle(
    VkQueue                                     queue);

VKAPI_ATTR VkResult VKAPI_CALL vkDeviceWaitIdle(
    VkDevice                                    device);

VKAPI_ATTR VkResult VKAPI_CALL vkAllocateMemory(
    VkDevice                                    device,
    P_VkMemoryAllocateInfo                      pAllocateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkDeviceMemory                            pMemory);

VKAPI_ATTR void VKAPI_CALL vkFreeMemory(
    VkDevice                                    device,
    VkDeviceMemory                              memory,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkMapMemory(
    VkDevice                                    device,
    VkDeviceMemory                              memory,
    VkDeviceSize                                offset,
    VkDeviceSize                                size,
    VkMemoryMapFlags                            flags,
    PP_void                                     ppData);

VKAPI_ATTR void VKAPI_CALL vkUnmapMemory(
    VkDevice                                    device,
    VkDeviceMemory                              memory);

VKAPI_ATTR VkResult VKAPI_CALL vkFlushMappedMemoryRanges(
    VkDevice                                    device,
    uint32_t                                    memoryRangeCount,
    P_VkMappedMemoryRange                       pMemoryRanges);

VKAPI_ATTR VkResult VKAPI_CALL vkInvalidateMappedMemoryRanges(
    VkDevice                                    device,
    uint32_t                                    memoryRangeCount,
    P_VkMappedMemoryRange                       pMemoryRanges);

VKAPI_ATTR void VKAPI_CALL vkGetDeviceMemoryCommitment(
    VkDevice                                    device,
    VkDeviceMemory                              memory,
    P_VkDeviceSize                              pCommittedMemoryInBytes);

VKAPI_ATTR VkResult VKAPI_CALL vkBindBufferMemory(
    VkDevice                                    device,
    VkBuffer                                    buffer,
    VkDeviceMemory                              memory,
    VkDeviceSize                                memoryOffset);

VKAPI_ATTR VkResult VKAPI_CALL vkBindImageMemory(
    VkDevice                                    device,
    VkImage                                     image,
    VkDeviceMemory                              memory,
    VkDeviceSize                                memoryOffset);

VKAPI_ATTR void VKAPI_CALL vkGetBufferMemoryRequirements(
    VkDevice                                    device,
    VkBuffer                                    buffer,
    P_VkMemoryRequirements                      pMemoryRequirements);

VKAPI_ATTR void VKAPI_CALL vkGetImageMemoryRequirements(
    VkDevice                                    device,
    VkImage                                     image,
    P_VkMemoryRequirements                      pMemoryRequirements);

VKAPI_ATTR void VKAPI_CALL vkGetImageSparseMemoryRequirements(
    VkDevice                                    device,
    VkImage                                     image,
    P_uint32_t                                  pSparseMemoryRequirementCount,
    P_VkSparseImageMemoryRequirements           pSparseMemoryRequirements);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceSparseImageFormatProperties(
    VkPhysicalDevice                            physicalDevice,
    VkFormat                                    format,
    VkImageType                                 type,
    VkSampleCountFlagBits                       samples,
    VkImageUsageFlags                           usage,
    VkImageTiling                               tiling,
    P_uint32_t                                  pPropertyCount,
    P_VkSparseImageFormatProperties             pProperties);

VKAPI_ATTR VkResult VKAPI_CALL vkQueueBindSparse(
    VkQueue                                     queue,
    uint32_t                                    bindInfoCount,
    P_VkBindSparseInfo                          pBindInfo,
    VkFence                                     fence);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateFence(
    VkDevice                                    device,
    P_VkFenceCreateInfo                         pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkFence                                   pFence);

VKAPI_ATTR void VKAPI_CALL vkDestroyFence(
    VkDevice                                    device,
    VkFence                                     fence,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkResetFences(
    VkDevice                                    device,
    uint32_t                                    fenceCount,
    P_VkFence                                   pFences);

VKAPI_ATTR VkResult VKAPI_CALL vkGetFenceStatus(
    VkDevice                                    device,
    VkFence                                     fence);

VKAPI_ATTR VkResult VKAPI_CALL vkWaitForFences(
    VkDevice                                    device,
    uint32_t                                    fenceCount,
    P_VkFence                                   pFences,
    VkBool32                                    waitAll,
    uint64_t                                    timeout);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateSemaphore(
    VkDevice                                    device,
    P_VkSemaphoreCreateInfo                     pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkSemaphore                               pSemaphore);

VKAPI_ATTR void VKAPI_CALL vkDestroySemaphore(
    VkDevice                                    device,
    VkSemaphore                                 semaphore,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateEvent(
    VkDevice                                    device,
    P_VkEventCreateInfo                         pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkEvent                                   pEvent);

VKAPI_ATTR void VKAPI_CALL vkDestroyEvent(
    VkDevice                                    device,
    VkEvent                                     event,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkGetEventStatus(
    VkDevice                                    device,
    VkEvent                                     event);

VKAPI_ATTR VkResult VKAPI_CALL vkSetEvent(
    VkDevice                                    device,
    VkEvent                                     event);

VKAPI_ATTR VkResult VKAPI_CALL vkResetEvent(
    VkDevice                                    device,
    VkEvent                                     event);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateQueryPool(
    VkDevice                                    device,
    P_VkQueryPoolCreateInfo                     pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkQueryPool                               pQueryPool);

VKAPI_ATTR void VKAPI_CALL vkDestroyQueryPool(
    VkDevice                                    device,
    VkQueryPool                                 queryPool,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkGetQueryPoolResults(
    VkDevice                                    device,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery,
    uint32_t                                    queryCount,
    size_t                                      dataSize,
    P_void                                      pData,
    VkDeviceSize                                stride,
    VkQueryResultFlags                          flags);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateBuffer(
    VkDevice                                    device,
    P_VkBufferCreateInfo                        pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkBuffer                                  pBuffer);

VKAPI_ATTR void VKAPI_CALL vkDestroyBuffer(
    VkDevice                                    device,
    VkBuffer                                    buffer,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateBufferView(
    VkDevice                                    device,
    P_VkBufferViewCreateInfo                    pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkBufferView                              pView);

VKAPI_ATTR void VKAPI_CALL vkDestroyBufferView(
    VkDevice                                    device,
    VkBufferView                                bufferView,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateImage(
    VkDevice                                    device,
    P_VkImageCreateInfo                         pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkImage                                   pImage);

VKAPI_ATTR void VKAPI_CALL vkDestroyImage(
    VkDevice                                    device,
    VkImage                                     image,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR void VKAPI_CALL vkGetImageSubresourceLayout(
    VkDevice                                    device,
    VkImage                                     image,
    P_VkImageSubresource                        pSubresource,
    P_VkSubresourceLayout                       pLayout);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateImageView(
    VkDevice                                    device,
    P_VkImageViewCreateInfo                     pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkImageView                               pView);

VKAPI_ATTR void VKAPI_CALL vkDestroyImageView(
    VkDevice                                    device,
    VkImageView                                 imageView,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateShaderModule(
    VkDevice                                    device,
    P_VkShaderModuleCreateInfo                  pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkShaderModule                            pShaderModule);

VKAPI_ATTR void VKAPI_CALL vkDestroyShaderModule(
    VkDevice                                    device,
    VkShaderModule                              shaderModule,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkCreatePipelineCache(
    VkDevice                                    device,
    P_VkPipelineCacheCreateInfo                 pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkPipelineCache                           pPipelineCache);

VKAPI_ATTR void VKAPI_CALL vkDestroyPipelineCache(
    VkDevice                                    device,
    VkPipelineCache                             pipelineCache,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkGetPipelineCacheData(
    VkDevice                                    device,
    VkPipelineCache                             pipelineCache,
    P_size_t                                    pDataSize,
    P_void                                      pData);

VKAPI_ATTR VkResult VKAPI_CALL vkMergePipelineCaches(
    VkDevice                                    device,
    VkPipelineCache                             dstCache,
    uint32_t                                    srcCacheCount,
    P_VkPipelineCache                           pSrcCaches);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateGraphicsPipelines(
    VkDevice                                    device,
    VkPipelineCache                             pipelineCache,
    uint32_t                                    createInfoCount,
    P_VkGraphicsPipelineCreateInfo              pCreateInfos,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkPipeline                                pPipelines);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateComputePipelines(
    VkDevice                                    device,
    VkPipelineCache                             pipelineCache,
    uint32_t                                    createInfoCount,
    P_VkComputePipelineCreateInfo               pCreateInfos,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkPipeline                                pPipelines);

VKAPI_ATTR void VKAPI_CALL vkDestroyPipeline(
    VkDevice                                    device,
    VkPipeline                                  pipeline,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkCreatePipelineLayout(
    VkDevice                                    device,
    P_VkPipelineLayoutCreateInfo                pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkPipelineLayout                          pPipelineLayout);

VKAPI_ATTR void VKAPI_CALL vkDestroyPipelineLayout(
    VkDevice                                    device,
    VkPipelineLayout                            pipelineLayout,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateSampler(
    VkDevice                                    device,
    P_VkSamplerCreateInfo                       pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkSampler                                 pSampler);

VKAPI_ATTR void VKAPI_CALL vkDestroySampler(
    VkDevice                                    device,
    VkSampler                                   sampler,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateDescriptorSetLayout(
    VkDevice                                    device,
    P_VkDescriptorSetLayoutCreateInfo           pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkDescriptorSetLayout                     pSetLayout);

VKAPI_ATTR void VKAPI_CALL vkDestroyDescriptorSetLayout(
    VkDevice                                    device,
    VkDescriptorSetLayout                       descriptorSetLayout,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateDescriptorPool(
    VkDevice                                    device,
    P_VkDescriptorPoolCreateInfo                pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkDescriptorPool                          pDescriptorPool);

VKAPI_ATTR void VKAPI_CALL vkDestroyDescriptorPool(
    VkDevice                                    device,
    VkDescriptorPool                            descriptorPool,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkResetDescriptorPool(
    VkDevice                                    device,
    VkDescriptorPool                            descriptorPool,
    VkDescriptorPoolResetFlags                  flags);

VKAPI_ATTR VkResult VKAPI_CALL vkAllocateDescriptorSets(
    VkDevice                                    device,
    P_VkDescriptorSetAllocateInfo               pAllocateInfo,
    P_VkDescriptorSet                           pDescriptorSets);

VKAPI_ATTR VkResult VKAPI_CALL vkFreeDescriptorSets(
    VkDevice                                    device,
    VkDescriptorPool                            descriptorPool,
    uint32_t                                    descriptorSetCount,
    P_VkDescriptorSet                           pDescriptorSets);

VKAPI_ATTR void VKAPI_CALL vkUpdateDescriptorSets(
    VkDevice                                    device,
    uint32_t                                    descriptorWriteCount,
    P_VkWriteDescriptorSet                      pDescriptorWrites,
    uint32_t                                    descriptorCopyCount,
    P_VkCopyDescriptorSet                       pDescriptorCopies);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateFramebuffer(
    VkDevice                                    device,
    P_VkFramebufferCreateInfo                   pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkFramebuffer                             pFramebuffer);

VKAPI_ATTR void VKAPI_CALL vkDestroyFramebuffer(
    VkDevice                                    device,
    VkFramebuffer                               framebuffer,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateRenderPass(
    VkDevice                                    device,
    P_VkRenderPassCreateInfo                    pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkRenderPass                              pRenderPass);

VKAPI_ATTR void VKAPI_CALL vkDestroyRenderPass(
    VkDevice                                    device,
    VkRenderPass                                renderPass,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR void VKAPI_CALL vkGetRenderAreaGranularity(
    VkDevice                                    device,
    VkRenderPass                                renderPass,
    P_VkExtent2D                                pGranularity);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateCommandPool(
    VkDevice                                    device,
    P_VkCommandPoolCreateInfo                   pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkCommandPool                             pCommandPool);

VKAPI_ATTR void VKAPI_CALL vkDestroyCommandPool(
    VkDevice                                    device,
    VkCommandPool                               commandPool,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkResetCommandPool(
    VkDevice                                    device,
    VkCommandPool                               commandPool,
    VkCommandPoolResetFlags                     flags);

VKAPI_ATTR VkResult VKAPI_CALL vkAllocateCommandBuffers(
    VkDevice                                    device,
    P_VkCommandBufferAllocateInfo               pAllocateInfo,
    P_VkCommandBuffer                           pCommandBuffers);

VKAPI_ATTR void VKAPI_CALL vkFreeCommandBuffers(
    VkDevice                                    device,
    VkCommandPool                               commandPool,
    uint32_t                                    commandBufferCount,
    P_VkCommandBuffer                           pCommandBuffers);

VKAPI_ATTR VkResult VKAPI_CALL vkBeginCommandBuffer(
    VkCommandBuffer                             commandBuffer,
    P_VkCommandBufferBeginInfo                  pBeginInfo);

VKAPI_ATTR VkResult VKAPI_CALL vkEndCommandBuffer(
    VkCommandBuffer                             commandBuffer);

VKAPI_ATTR VkResult VKAPI_CALL vkResetCommandBuffer(
    VkCommandBuffer                             commandBuffer,
    VkCommandBufferResetFlags                   flags);

VKAPI_ATTR void VKAPI_CALL vkCmdBindPipeline(
    VkCommandBuffer                             commandBuffer,
    VkPipelineBindPoint                         pipelineBindPoint,
    VkPipeline                                  pipeline);

VKAPI_ATTR void VKAPI_CALL vkCmdSetViewport(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstViewport,
    uint32_t                                    viewportCount,
    P_VkViewport                                pViewports);

VKAPI_ATTR void VKAPI_CALL vkCmdSetScissor(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstScissor,
    uint32_t                                    scissorCount,
    P_VkRect2D                                  pScissors);

VKAPI_ATTR void VKAPI_CALL vkCmdSetLineWidth(
    VkCommandBuffer                             commandBuffer,
    float                                       lineWidth);

VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthBias(
    VkCommandBuffer                             commandBuffer,
    float                                       depthBiasConstantFactor,
    float                                       depthBiasClamp,
    float                                       depthBiasSlopeFactor);

VKAPI_ATTR void VKAPI_CALL vkCmdSetBlendConstants(
    VkCommandBuffer                             commandBuffer,
    const float                                 blendConstants[4]);

VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthBounds(
    VkCommandBuffer                             commandBuffer,
    float                                       minDepthBounds,
    float                                       maxDepthBounds);

VKAPI_ATTR void VKAPI_CALL vkCmdSetStencilCompareMask(
    VkCommandBuffer                             commandBuffer,
    VkStencilFaceFlags                          faceMask,
    uint32_t                                    compareMask);

VKAPI_ATTR void VKAPI_CALL vkCmdSetStencilWriteMask(
    VkCommandBuffer                             commandBuffer,
    VkStencilFaceFlags                          faceMask,
    uint32_t                                    writeMask);

VKAPI_ATTR void VKAPI_CALL vkCmdSetStencilReference(
    VkCommandBuffer                             commandBuffer,
    VkStencilFaceFlags                          faceMask,
    uint32_t                                    reference);

VKAPI_ATTR void VKAPI_CALL vkCmdBindDescriptorSets(
    VkCommandBuffer                             commandBuffer,
    VkPipelineBindPoint                         pipelineBindPoint,
    VkPipelineLayout                            layout,
    uint32_t                                    firstSet,
    uint32_t                                    descriptorSetCount,
    P_VkDescriptorSet                           pDescriptorSets,
    uint32_t                                    dynamicOffsetCount,
    P_uint32_t                                  pDynamicOffsets);

VKAPI_ATTR void VKAPI_CALL vkCmdBindIndexBuffer(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkIndexType                                 indexType);

VKAPI_ATTR void VKAPI_CALL vkCmdBindVertexBuffers(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstBinding,
    uint32_t                                    bindingCount,
    P_VkBuffer                                  pBuffers,
    P_VkDeviceSize                              pOffsets);

VKAPI_ATTR void VKAPI_CALL vkCmdDraw(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    vertexCount,
    uint32_t                                    instanceCount,
    uint32_t                                    firstVertex,
    uint32_t                                    firstInstance);

VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndexed(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    indexCount,
    uint32_t                                    instanceCount,
    uint32_t                                    firstIndex,
    int32_t                                     vertexOffset,
    uint32_t                                    firstInstance);

VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndirect(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    uint32_t                                    drawCount,
    uint32_t                                    stride);

VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndexedIndirect(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    uint32_t                                    drawCount,
    uint32_t                                    stride);

VKAPI_ATTR void VKAPI_CALL vkCmdDispatch(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    groupCountX,
    uint32_t                                    groupCountY,
    uint32_t                                    groupCountZ);

VKAPI_ATTR void VKAPI_CALL vkCmdDispatchIndirect(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset);

VKAPI_ATTR void VKAPI_CALL vkCmdCopyBuffer(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    srcBuffer,
    VkBuffer                                    dstBuffer,
    uint32_t                                    regionCount,
    P_VkBufferCopy                              pRegions);

VKAPI_ATTR void VKAPI_CALL vkCmdCopyImage(
    VkCommandBuffer                             commandBuffer,
    VkImage                                     srcImage,
    VkImageLayout                               srcImageLayout,
    VkImage                                     dstImage,
    VkImageLayout                               dstImageLayout,
    uint32_t                                    regionCount,
    P_VkImageCopy                               pRegions);

VKAPI_ATTR void VKAPI_CALL vkCmdBlitImage(
    VkCommandBuffer                             commandBuffer,
    VkImage                                     srcImage,
    VkImageLayout                               srcImageLayout,
    VkImage                                     dstImage,
    VkImageLayout                               dstImageLayout,
    uint32_t                                    regionCount,
    P_VkImageBlit                               pRegions,
    VkFilter                                    filter);

VKAPI_ATTR void VKAPI_CALL vkCmdCopyBufferToImage(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    srcBuffer,
    VkImage                                     dstImage,
    VkImageLayout                               dstImageLayout,
    uint32_t                                    regionCount,
    P_VkBufferImageCopy                         pRegions);

VKAPI_ATTR void VKAPI_CALL vkCmdCopyImageToBuffer(
    VkCommandBuffer                             commandBuffer,
    VkImage                                     srcImage,
    VkImageLayout                               srcImageLayout,
    VkBuffer                                    dstBuffer,
    uint32_t                                    regionCount,
    P_VkBufferImageCopy                         pRegions);

VKAPI_ATTR void VKAPI_CALL vkCmdUpdateBuffer(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    dstBuffer,
    VkDeviceSize                                dstOffset,
    VkDeviceSize                                dataSize,
    P_void                                      pData);

VKAPI_ATTR void VKAPI_CALL vkCmdFillBuffer(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    dstBuffer,
    VkDeviceSize                                dstOffset,
    VkDeviceSize                                size,
    uint32_t                                    data);

VKAPI_ATTR void VKAPI_CALL vkCmdClearColorImage(
    VkCommandBuffer                             commandBuffer,
    VkImage                                     image,
    VkImageLayout                               imageLayout,
    P_VkClearColorValue                         pColor,
    uint32_t                                    rangeCount,
    P_VkImageSubresourceRange                   pRanges);

VKAPI_ATTR void VKAPI_CALL vkCmdClearDepthStencilImage(
    VkCommandBuffer                             commandBuffer,
    VkImage                                     image,
    VkImageLayout                               imageLayout,
    P_VkClearDepthStencilValue                  pDepthStencil,
    uint32_t                                    rangeCount,
    P_VkImageSubresourceRange                   pRanges);

VKAPI_ATTR void VKAPI_CALL vkCmdClearAttachments(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    attachmentCount,
    P_VkClearAttachment                         pAttachments,
    uint32_t                                    rectCount,
    P_VkClearRect                               pRects);

VKAPI_ATTR void VKAPI_CALL vkCmdResolveImage(
    VkCommandBuffer                             commandBuffer,
    VkImage                                     srcImage,
    VkImageLayout                               srcImageLayout,
    VkImage                                     dstImage,
    VkImageLayout                               dstImageLayout,
    uint32_t                                    regionCount,
    P_VkImageResolve                            pRegions);

VKAPI_ATTR void VKAPI_CALL vkCmdSetEvent(
    VkCommandBuffer                             commandBuffer,
    VkEvent                                     event,
    VkPipelineStageFlags                        stageMask);

VKAPI_ATTR void VKAPI_CALL vkCmdResetEvent(
    VkCommandBuffer                             commandBuffer,
    VkEvent                                     event,
    VkPipelineStageFlags                        stageMask);

VKAPI_ATTR void VKAPI_CALL vkCmdWaitEvents(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    eventCount,
    P_VkEvent                                   pEvents,
    VkPipelineStageFlags                        srcStageMask,
    VkPipelineStageFlags                        dstStageMask,
    uint32_t                                    memoryBarrierCount,
    P_VkMemoryBarrier                           pMemoryBarriers,
    uint32_t                                    bufferMemoryBarrierCount,
    P_VkBufferMemoryBarrier                     pBufferMemoryBarriers,
    uint32_t                                    imageMemoryBarrierCount,
    P_VkImageMemoryBarrier                      pImageMemoryBarriers);

VKAPI_ATTR void VKAPI_CALL vkCmdPipelineBarrier(
    VkCommandBuffer                             commandBuffer,
    VkPipelineStageFlags                        srcStageMask,
    VkPipelineStageFlags                        dstStageMask,
    VkDependencyFlags                           dependencyFlags,
    uint32_t                                    memoryBarrierCount,
    P_VkMemoryBarrier                           pMemoryBarriers,
    uint32_t                                    bufferMemoryBarrierCount,
    P_VkBufferMemoryBarrier                     pBufferMemoryBarriers,
    uint32_t                                    imageMemoryBarrierCount,
    P_VkImageMemoryBarrier                      pImageMemoryBarriers);

VKAPI_ATTR void VKAPI_CALL vkCmdBeginQuery(
    VkCommandBuffer                             commandBuffer,
    VkQueryPool                                 queryPool,
    uint32_t                                    query,
    VkQueryControlFlags                         flags);

VKAPI_ATTR void VKAPI_CALL vkCmdEndQuery(
    VkCommandBuffer                             commandBuffer,
    VkQueryPool                                 queryPool,
    uint32_t                                    query);

VKAPI_ATTR void VKAPI_CALL vkCmdResetQueryPool(
    VkCommandBuffer                             commandBuffer,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery,
    uint32_t                                    queryCount);

VKAPI_ATTR void VKAPI_CALL vkCmdWriteTimestamp(
    VkCommandBuffer                             commandBuffer,
    VkPipelineStageFlagBits                     pipelineStage,
    VkQueryPool                                 queryPool,
    uint32_t                                    query);

VKAPI_ATTR void VKAPI_CALL vkCmdCopyQueryPoolResults(
    VkCommandBuffer                             commandBuffer,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery,
    uint32_t                                    queryCount,
    VkBuffer                                    dstBuffer,
    VkDeviceSize                                dstOffset,
    VkDeviceSize                                stride,
    VkQueryResultFlags                          flags);

VKAPI_ATTR void VKAPI_CALL vkCmdPushConstants(
    VkCommandBuffer                             commandBuffer,
    VkPipelineLayout                            layout,
    VkShaderStageFlags                          stageFlags,
    uint32_t                                    offset,
    uint32_t                                    size,
    P_void                                      pValues);

VKAPI_ATTR void VKAPI_CALL vkCmdBeginRenderPass(
    VkCommandBuffer                             commandBuffer,
    P_VkRenderPassBeginInfo                     pRenderPassBegin,
    VkSubpassContents                           contents);

VKAPI_ATTR void VKAPI_CALL vkCmdNextSubpass(
    VkCommandBuffer                             commandBuffer,
    VkSubpassContents                           contents);

VKAPI_ATTR void VKAPI_CALL vkCmdEndRenderPass(
    VkCommandBuffer                             commandBuffer);

VKAPI_ATTR void VKAPI_CALL vkCmdExecuteCommands(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    commandBufferCount,
    P_VkCommandBuffer                           pCommandBuffers);
{$ENDIF}


const VK_VERSION_1_1 = 1;
// Vulkan 1.1 version number
#define VK_API_VERSION_1_1 VK_MAKE_VERSION(1, 1, 0)// Patch version should always be set to 0

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSamplerYcbcrConversion)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorUpdateTemplate)
const VK_MAX_DEVICE_GROUP_SIZE          = 32;
const VK_LUID_SIZE                      = 8;
const VK_QUEUE_FAMILY_EXTERNAL          = (~0U-1);

type VkPointClippingBehavior = (
       VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
       VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,
       VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
       VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY,
       VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 0x7FFFFFFF
     );

type VkTessellationDomainOrigin = (
       VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
       VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,
       VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,
       VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,
       VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 0x7FFFFFFF
     );

type VkSamplerYcbcrModelConversion = (
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,
       VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 0x7FFFFFFF
     );

type VkSamplerYcbcrRange = (
       VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
       VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
       VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
       VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_NARROW,
       VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 0x7FFFFFFF
     );

type VkChromaLocation = (
       VK_CHROMA_LOCATION_COSITED_EVEN = 0,
       VK_CHROMA_LOCATION_MIDPOINT = 1,
       VK_CHROMA_LOCATION_COSITED_EVEN_KHR = VK_CHROMA_LOCATION_COSITED_EVEN,
       VK_CHROMA_LOCATION_MIDPOINT_KHR = VK_CHROMA_LOCATION_MIDPOINT,
       VK_CHROMA_LOCATION_MAX_ENUM = 0x7FFFFFFF
     );

type VkDescriptorUpdateTemplateType = (
       VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,
       VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1,
       VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,
       VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 0x7FFFFFFF
     );

type VkSubgroupFeatureFlagBits = (
       VK_SUBGROUP_FEATURE_BASIC_BIT = 0x00000001,
       VK_SUBGROUP_FEATURE_VOTE_BIT = 0x00000002,
       VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 0x00000004,
       VK_SUBGROUP_FEATURE_BALLOT_BIT = 0x00000008,
       VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 0x00000010,
       VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 0x00000020,
       VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 0x00000040,
       VK_SUBGROUP_FEATURE_QUAD_BIT = 0x00000080,
       VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0x00000100,
       VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkSubgroupFeatureFlags = VkFlags;

type VkPeerMemoryFeatureFlagBits = (
       VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 0x00000001,
       VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 0x00000002,
       VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 0x00000004,
       VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 0x00000008,
       VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,
       VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,
       VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,
       VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,
       VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkPeerMemoryFeatureFlags = VkFlags;

type VkMemoryAllocateFlagBits = (
       VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 0x00000001,
       VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 0x00000002,
       VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 0x00000004,
       VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,
       VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT,
       VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
       VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkMemoryAllocateFlags = VkFlags;
type VkCommandPoolTrimFlags = VkFlags;
type VkDescriptorUpdateTemplateCreateFlags = VkFlags;

type VkExternalMemoryHandleTypeFlagBits = (
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 0x00000008,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 0x00000010,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 0x00000020,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 0x00000040,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 0x00000200,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 0x00000400,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 0x00000080,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 0x00000100,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkExternalMemoryHandleTypeFlags = VkFlags;

type VkExternalMemoryFeatureFlagBits = (
       VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 0x00000001,
       VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 0x00000002,
       VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 0x00000004,
       VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
       VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
       VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
       VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkExternalMemoryFeatureFlags = VkFlags;

type VkExternalFenceHandleTypeFlagBits = (
       VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001,
       VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002,
       VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004,
       VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000008,
       VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
       VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
       VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
       VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
       VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkExternalFenceHandleTypeFlags = VkFlags;

type VkExternalFenceFeatureFlagBits = (
       VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 0x00000001,
       VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 0x00000002,
       VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
       VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
       VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkExternalFenceFeatureFlags = VkFlags;

type VkFenceImportFlagBits = (
       VK_FENCE_IMPORT_TEMPORARY_BIT = 0x00000001,
       VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = VK_FENCE_IMPORT_TEMPORARY_BIT,
       VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkFenceImportFlags = VkFlags;

type VkSemaphoreImportFlagBits = (
       VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 0x00000001,
       VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
       VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkSemaphoreImportFlags = VkFlags;

type VkExternalSemaphoreHandleTypeFlagBits = (
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 0x00000008,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000010,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
       VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkExternalSemaphoreHandleTypeFlags = VkFlags;

type VkExternalSemaphoreFeatureFlagBits = (
       VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 0x00000001,
       VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 0x00000002,
       VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
       VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
       VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkExternalSemaphoreFeatureFlags = VkFlags;
type VkPhysicalDeviceSubgroupProperties = record
       sType :VkStructureType;
       pNext :P_void;
       subgroupSize :uint32_t;
       supportedStages :VkShaderStageFlags;
       supportedOperations :VkSubgroupFeatureFlags;
       quadOperationsInAllStages :VkBool32;
     end;

type VkBindBufferMemoryInfo = record
       sType :VkStructureType;
       pNext :P_void;
       buffer :VkBuffer;
       memory :VkDeviceMemory;
       memoryOffset :VkDeviceSize;
     end;

type VkBindImageMemoryInfo = record
       sType :VkStructureType;
       pNext :P_void;
       image :VkImage;
       memory :VkDeviceMemory;
       memoryOffset :VkDeviceSize;
     end;

type VkPhysicalDevice16BitStorageFeatures = record
       sType :VkStructureType;
       pNext :P_void;
       storageBuffer16BitAccess :VkBool32;
       uniformAndStorageBuffer16BitAccess :VkBool32;
       storagePushConstant16 :VkBool32;
       storageInputOutput16 :VkBool32;
     end;

type VkMemoryDedicatedRequirements = record
       sType :VkStructureType;
       pNext :P_void;
       prefersDedicatedAllocation :VkBool32;
       requiresDedicatedAllocation :VkBool32;
     end;

type VkMemoryDedicatedAllocateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       image :VkImage;
       buffer :VkBuffer;
     end;

type VkMemoryAllocateFlagsInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkMemoryAllocateFlags;
       deviceMask :uint32_t;
     end;

type VkDeviceGroupRenderPassBeginInfo = record
       sType :VkStructureType;
       pNext :P_void;
       deviceMask :uint32_t;
       deviceRenderAreaCount :uint32_t;
       pDeviceRenderAreas :P_VkRect2D;
     end;

type VkDeviceGroupCommandBufferBeginInfo = record
       sType :VkStructureType;
       pNext :P_void;
       deviceMask :uint32_t;
     end;

type VkDeviceGroupSubmitInfo = record
       sType :VkStructureType;
       pNext :P_void;
       waitSemaphoreCount :uint32_t;
       pWaitSemaphoreDeviceIndices :P_uint32_t;
       commandBufferCount :uint32_t;
       pCommandBufferDeviceMasks :P_uint32_t;
       signalSemaphoreCount :uint32_t;
       pSignalSemaphoreDeviceIndices :P_uint32_t;
     end;

type VkDeviceGroupBindSparseInfo = record
       sType :VkStructureType;
       pNext :P_void;
       resourceDeviceIndex :uint32_t;
       memoryDeviceIndex :uint32_t;
     end;

type VkBindBufferMemoryDeviceGroupInfo = record
       sType :VkStructureType;
       pNext :P_void;
       deviceIndexCount :uint32_t;
       pDeviceIndices :P_uint32_t;
     end;

type VkBindImageMemoryDeviceGroupInfo = record
       sType :VkStructureType;
       pNext :P_void;
       deviceIndexCount :uint32_t;
       pDeviceIndices :P_uint32_t;
       splitInstanceBindRegionCount :uint32_t;
       pSplitInstanceBindRegions :P_VkRect2D;
     end;

type VkPhysicalDeviceGroupProperties = record
       sType :VkStructureType;
       pNext :P_void;
       physicalDeviceCount :uint32_t;
       physicalDevices :array [ 0..VK_MAX_DEVICE_GROUP_SIZE-1 ] of VkPhysicalDevice;
       subsetAllocation :VkBool32;
     end;

type VkDeviceGroupDeviceCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       physicalDeviceCount :uint32_t;
       pPhysicalDevices :P_VkPhysicalDevice;
     end;

type VkBufferMemoryRequirementsInfo2 = record
       sType :VkStructureType;
       pNext :P_void;
       buffer :VkBuffer;
     end;

type VkImageMemoryRequirementsInfo2 = record
       sType :VkStructureType;
       pNext :P_void;
       image :VkImage;
     end;

type VkImageSparseMemoryRequirementsInfo2 = record
       sType :VkStructureType;
       pNext :P_void;
       image :VkImage;
     end;

type VkMemoryRequirements2 = record
       sType :VkStructureType;
       pNext :P_void;
       memoryRequirements :VkMemoryRequirements;
     end;

type VkSparseImageMemoryRequirements2 = record
       sType :VkStructureType;
       pNext :P_void;
       memoryRequirements :VkSparseImageMemoryRequirements;
     end;

type VkPhysicalDeviceFeatures2 = record
       sType :VkStructureType;
       pNext :P_void;
       features :VkPhysicalDeviceFeatures;
     end;

type VkPhysicalDeviceProperties2 = record
       sType :VkStructureType;
       pNext :P_void;
       properties :VkPhysicalDeviceProperties;
     end;

type VkFormatProperties2 = record
       sType :VkStructureType;
       pNext :P_void;
       formatProperties :VkFormatProperties;
     end;

type VkImageFormatProperties2 = record
       sType :VkStructureType;
       pNext :P_void;
       imageFormatProperties :VkImageFormatProperties;
     end;

type VkPhysicalDeviceImageFormatInfo2 = record
       sType :VkStructureType;
       pNext :P_void;
       format :VkFormat;
       type :VkImageType;
       tiling :VkImageTiling;
       usage :VkImageUsageFlags;
       flags :VkImageCreateFlags;
     end;

type VkQueueFamilyProperties2 = record
       sType :VkStructureType;
       pNext :P_void;
       queueFamilyProperties :VkQueueFamilyProperties;
     end;

type VkPhysicalDeviceMemoryProperties2 = record
       sType :VkStructureType;
       pNext :P_void;
       memoryProperties :VkPhysicalDeviceMemoryProperties;
     end;

type VkSparseImageFormatProperties2 = record
       sType :VkStructureType;
       pNext :P_void;
       properties :VkSparseImageFormatProperties;
     end;

type VkPhysicalDeviceSparseImageFormatInfo2 = record
       sType :VkStructureType;
       pNext :P_void;
       format :VkFormat;
       type :VkImageType;
       samples :VkSampleCountFlagBits;
       usage :VkImageUsageFlags;
       tiling :VkImageTiling;
     end;

type VkPhysicalDevicePointClippingProperties = record
       sType :VkStructureType;
       pNext :P_void;
       pointClippingBehavior :VkPointClippingBehavior;
     end;

type VkInputAttachmentAspectReference = record
       subpass :uint32_t;
       inputAttachmentIndex :uint32_t;
       aspectMask :VkImageAspectFlags;
     end;

type VkRenderPassInputAttachmentAspectCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       aspectReferenceCount :uint32_t;
       pAspectReferences :P_VkInputAttachmentAspectReference;
     end;

type VkImageViewUsageCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       usage :VkImageUsageFlags;
     end;

type VkPipelineTessellationDomainOriginStateCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       domainOrigin :VkTessellationDomainOrigin;
     end;

type VkRenderPassMultiviewCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       subpassCount :uint32_t;
       pViewMasks :P_uint32_t;
       dependencyCount :uint32_t;
       pViewOffsets :P_int32_t;
       correlationMaskCount :uint32_t;
       pCorrelationMasks :P_uint32_t;
     end;

type VkPhysicalDeviceMultiviewFeatures = record
       sType :VkStructureType;
       pNext :P_void;
       multiview :VkBool32;
       multiviewGeometryShader :VkBool32;
       multiviewTessellationShader :VkBool32;
     end;

type VkPhysicalDeviceMultiviewProperties = record
       sType :VkStructureType;
       pNext :P_void;
       maxMultiviewViewCount :uint32_t;
       maxMultiviewInstanceIndex :uint32_t;
     end;

type VkPhysicalDeviceVariablePointersFeatures = record
       sType :VkStructureType;
       pNext :P_void;
       variablePointersStorageBuffer :VkBool32;
       variablePointers :VkBool32;
     end;

type VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures;

type VkPhysicalDeviceProtectedMemoryFeatures = record
       sType :VkStructureType;
       pNext :P_void;
       protectedMemory :VkBool32;
     end;

type VkPhysicalDeviceProtectedMemoryProperties = record
       sType :VkStructureType;
       pNext :P_void;
       protectedNoFault :VkBool32;
     end;

type VkDeviceQueueInfo2 = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkDeviceQueueCreateFlags;
       queueFamilyIndex :uint32_t;
       queueIndex :uint32_t;
     end;

type VkProtectedSubmitInfo = record
       sType :VkStructureType;
       pNext :P_void;
       protectedSubmit :VkBool32;
     end;

type VkSamplerYcbcrConversionCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       format :VkFormat;
       ycbcrModel :VkSamplerYcbcrModelConversion;
       ycbcrRange :VkSamplerYcbcrRange;
       components :VkComponentMapping;
       xChromaOffset :VkChromaLocation;
       yChromaOffset :VkChromaLocation;
       chromaFilter :VkFilter;
       forceExplicitReconstruction :VkBool32;
     end;

type VkSamplerYcbcrConversionInfo = record
       sType :VkStructureType;
       pNext :P_void;
       conversion :VkSamplerYcbcrConversion;
     end;

type VkBindImagePlaneMemoryInfo = record
       sType :VkStructureType;
       pNext :P_void;
       planeAspect :VkImageAspectFlagBits;
     end;

type VkImagePlaneMemoryRequirementsInfo = record
       sType :VkStructureType;
       pNext :P_void;
       planeAspect :VkImageAspectFlagBits;
     end;

type VkPhysicalDeviceSamplerYcbcrConversionFeatures = record
       sType :VkStructureType;
       pNext :P_void;
       samplerYcbcrConversion :VkBool32;
     end;

type VkSamplerYcbcrConversionImageFormatProperties = record
       sType :VkStructureType;
       pNext :P_void;
       combinedImageSamplerDescriptorCount :uint32_t;
     end;

type VkDescriptorUpdateTemplateEntry = record
       dstBinding :uint32_t;
       dstArrayElement :uint32_t;
       descriptorCount :uint32_t;
       descriptorType :VkDescriptorType;
       offset :size_t;
       stride :size_t;
     end;

type VkDescriptorUpdateTemplateCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkDescriptorUpdateTemplateCreateFlags;
       descriptorUpdateEntryCount :uint32_t;
       pDescriptorUpdateEntries :P_VkDescriptorUpdateTemplateEntry;
       templateType :VkDescriptorUpdateTemplateType;
       descriptorSetLayout :VkDescriptorSetLayout;
       pipelineBindPoint :VkPipelineBindPoint;
       pipelineLayout :VkPipelineLayout;
       set :uint32_t;
     end;

type VkExternalMemoryProperties = record
       externalMemoryFeatures :VkExternalMemoryFeatureFlags;
       exportFromImportedHandleTypes :VkExternalMemoryHandleTypeFlags;
       compatibleHandleTypes :VkExternalMemoryHandleTypeFlags;
     end;

type VkPhysicalDeviceExternalImageFormatInfo = record
       sType :VkStructureType;
       pNext :P_void;
       handleType :VkExternalMemoryHandleTypeFlagBits;
     end;

type VkExternalImageFormatProperties = record
       sType :VkStructureType;
       pNext :P_void;
       externalMemoryProperties :VkExternalMemoryProperties;
     end;

type VkPhysicalDeviceExternalBufferInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkBufferCreateFlags;
       usage :VkBufferUsageFlags;
       handleType :VkExternalMemoryHandleTypeFlagBits;
     end;

type VkExternalBufferProperties = record
       sType :VkStructureType;
       pNext :P_void;
       externalMemoryProperties :VkExternalMemoryProperties;
     end;

type VkPhysicalDeviceIDProperties = record
       sType :VkStructureType;
       pNext :P_void;
       deviceUUID :array [ 0..VK_UUID_SIZE-1 ] of uint8_t;
       driverUUID :array [ 0..VK_UUID_SIZE-1 ] of uint8_t;
       deviceLUID :array [ 0..VK_LUID_SIZE-1 ] of uint8_t;
       deviceNodeMask :uint32_t;
       deviceLUIDValid :VkBool32;
     end;

type VkExternalMemoryImageCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       handleTypes :VkExternalMemoryHandleTypeFlags;
     end;

type VkExternalMemoryBufferCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       handleTypes :VkExternalMemoryHandleTypeFlags;
     end;

type VkExportMemoryAllocateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       handleTypes :VkExternalMemoryHandleTypeFlags;
     end;

type VkPhysicalDeviceExternalFenceInfo = record
       sType :VkStructureType;
       pNext :P_void;
       handleType :VkExternalFenceHandleTypeFlagBits;
     end;

type VkExternalFenceProperties = record
       sType :VkStructureType;
       pNext :P_void;
       exportFromImportedHandleTypes :VkExternalFenceHandleTypeFlags;
       compatibleHandleTypes :VkExternalFenceHandleTypeFlags;
       externalFenceFeatures :VkExternalFenceFeatureFlags;
     end;

type VkExportFenceCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       handleTypes :VkExternalFenceHandleTypeFlags;
     end;

type VkExportSemaphoreCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       handleTypes :VkExternalSemaphoreHandleTypeFlags;
     end;

type VkPhysicalDeviceExternalSemaphoreInfo = record
       sType :VkStructureType;
       pNext :P_void;
       handleType :VkExternalSemaphoreHandleTypeFlagBits;
     end;

type VkExternalSemaphoreProperties = record
       sType :VkStructureType;
       pNext :P_void;
       exportFromImportedHandleTypes :VkExternalSemaphoreHandleTypeFlags;
       compatibleHandleTypes :VkExternalSemaphoreHandleTypeFlags;
       externalSemaphoreFeatures :VkExternalSemaphoreFeatureFlags;
     end;

type VkPhysicalDeviceMaintenance3Properties = record
       sType :VkStructureType;
       pNext :P_void;
       maxPerSetDescriptors :uint32_t;
       maxMemoryAllocationSize :VkDeviceSize;
     end;

type VkDescriptorSetLayoutSupport = record
       sType :VkStructureType;
       pNext :P_void;
       supported :VkBool32;
     end;

type VkPhysicalDeviceShaderDrawParametersFeatures = record
       sType :VkStructureType;
       pNext :P_void;
       shaderDrawParameters :VkBool32;
     end;

type VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures;

typedef VkResult (VKAPI_PTR *PFN_vkEnumerateInstanceVersion)(P_uint32_t pApiVersion);
typedef VkResult (VKAPI_PTR *PFN_vkBindBufferMemory2)(VkDevice device, uint32_t bindInfoCount, const P_VkBindBufferMemoryInfo pBindInfos);
typedef VkResult (VKAPI_PTR *PFN_vkBindImageMemory2)(VkDevice device, uint32_t bindInfoCount, const P_VkBindImageMemoryInfo pBindInfos);
typedef void (VKAPI_PTR *PFN_vkGetDeviceGroupPeerMemoryFeatures)(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, P_VkPeerMemoryFeatureFlags pPeerMemoryFeatures);
typedef void (VKAPI_PTR *PFN_vkCmdSetDeviceMask)(VkCommandBuffer commandBuffer, uint32_t deviceMask);
typedef void (VKAPI_PTR *PFN_vkCmdDispatchBase)(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
typedef VkResult (VKAPI_PTR *PFN_vkEnumeratePhysicalDeviceGroups)(VkInstance instance, P_uint32_t pPhysicalDeviceGroupCount, P_VkPhysicalDeviceGroupProperties pPhysicalDeviceGroupProperties);
typedef void (VKAPI_PTR *PFN_vkGetImageMemoryRequirements2)(VkDevice device, const P_VkImageMemoryRequirementsInfo2 pInfo, P_VkMemoryRequirements2 pMemoryRequirements);
typedef void (VKAPI_PTR *PFN_vkGetBufferMemoryRequirements2)(VkDevice device, const P_VkBufferMemoryRequirementsInfo2 pInfo, P_VkMemoryRequirements2 pMemoryRequirements);
typedef void (VKAPI_PTR *PFN_vkGetImageSparseMemoryRequirements2)(VkDevice device, const P_VkImageSparseMemoryRequirementsInfo2 pInfo, P_uint32_t pSparseMemoryRequirementCount, P_VkSparseImageMemoryRequirements2 pSparseMemoryRequirements);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceFeatures2)(VkPhysicalDevice physicalDevice, P_VkPhysicalDeviceFeatures2 pFeatures);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceProperties2)(VkPhysicalDevice physicalDevice, P_VkPhysicalDeviceProperties2 pProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceFormatProperties2)(VkPhysicalDevice physicalDevice, VkFormat format, P_VkFormatProperties2 pFormatProperties);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceImageFormatProperties2)(VkPhysicalDevice physicalDevice, const P_VkPhysicalDeviceImageFormatInfo2 pImageFormatInfo, P_VkImageFormatProperties2 pImageFormatProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceQueueFamilyProperties2)(VkPhysicalDevice physicalDevice, P_uint32_t pQueueFamilyPropertyCount, P_VkQueueFamilyProperties2 pQueueFamilyProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceMemoryProperties2)(VkPhysicalDevice physicalDevice, P_VkPhysicalDeviceMemoryProperties2 pMemoryProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceSparseImageFormatProperties2)(VkPhysicalDevice physicalDevice, const P_VkPhysicalDeviceSparseImageFormatInfo2 pFormatInfo, P_uint32_t pPropertyCount, P_VkSparseImageFormatProperties2 pProperties);
typedef void (VKAPI_PTR *PFN_vkTrimCommandPool)(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);
typedef void (VKAPI_PTR *PFN_vkGetDeviceQueue2)(VkDevice device, const P_VkDeviceQueueInfo2 pQueueInfo, P_VkQueue pQueue);
typedef VkResult (VKAPI_PTR *PFN_vkCreateSamplerYcbcrConversion)(VkDevice device, const P_VkSamplerYcbcrConversionCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkSamplerYcbcrConversion pYcbcrConversion);
typedef void (VKAPI_PTR *PFN_vkDestroySamplerYcbcrConversion)(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreateDescriptorUpdateTemplate)(VkDevice device, const P_VkDescriptorUpdateTemplateCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkDescriptorUpdateTemplate pDescriptorUpdateTemplate);
typedef void (VKAPI_PTR *PFN_vkDestroyDescriptorUpdateTemplate)(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const P_VkAllocationCallbacks pAllocator);
typedef void (VKAPI_PTR *PFN_vkUpdateDescriptorSetWithTemplate)(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const P_void pData);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceExternalBufferProperties)(VkPhysicalDevice physicalDevice, const P_VkPhysicalDeviceExternalBufferInfo pExternalBufferInfo, P_VkExternalBufferProperties pExternalBufferProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceExternalFenceProperties)(VkPhysicalDevice physicalDevice, const P_VkPhysicalDeviceExternalFenceInfo pExternalFenceInfo, P_VkExternalFenceProperties pExternalFenceProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceExternalSemaphoreProperties)(VkPhysicalDevice physicalDevice, const P_VkPhysicalDeviceExternalSemaphoreInfo pExternalSemaphoreInfo, P_VkExternalSemaphoreProperties pExternalSemaphoreProperties);
typedef void (VKAPI_PTR *PFN_vkGetDescriptorSetLayoutSupport)(VkDevice device, const P_VkDescriptorSetLayoutCreateInfo pCreateInfo, P_VkDescriptorSetLayoutSupport pSupport);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkEnumerateInstanceVersion(
    P_uint32_t                                  pApiVersion);

VKAPI_ATTR VkResult VKAPI_CALL vkBindBufferMemory2(
    VkDevice                                    device,
    uint32_t                                    bindInfoCount,
    P_VkBindBufferMemoryInfo                    pBindInfos);

VKAPI_ATTR VkResult VKAPI_CALL vkBindImageMemory2(
    VkDevice                                    device,
    uint32_t                                    bindInfoCount,
    P_VkBindImageMemoryInfo                     pBindInfos);

VKAPI_ATTR void VKAPI_CALL vkGetDeviceGroupPeerMemoryFeatures(
    VkDevice                                    device,
    uint32_t                                    heapIndex,
    uint32_t                                    localDeviceIndex,
    uint32_t                                    remoteDeviceIndex,
    P_VkPeerMemoryFeatureFlags                  pPeerMemoryFeatures);

VKAPI_ATTR void VKAPI_CALL vkCmdSetDeviceMask(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    deviceMask);

VKAPI_ATTR void VKAPI_CALL vkCmdDispatchBase(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    baseGroupX,
    uint32_t                                    baseGroupY,
    uint32_t                                    baseGroupZ,
    uint32_t                                    groupCountX,
    uint32_t                                    groupCountY,
    uint32_t                                    groupCountZ);

VKAPI_ATTR VkResult VKAPI_CALL vkEnumeratePhysicalDeviceGroups(
    VkInstance                                  instance,
    P_uint32_t                                  pPhysicalDeviceGroupCount,
    P_VkPhysicalDeviceGroupProperties           pPhysicalDeviceGroupProperties);

VKAPI_ATTR void VKAPI_CALL vkGetImageMemoryRequirements2(
    VkDevice                                    device,
    P_VkImageMemoryRequirementsInfo2            pInfo,
    P_VkMemoryRequirements2                     pMemoryRequirements);

VKAPI_ATTR void VKAPI_CALL vkGetBufferMemoryRequirements2(
    VkDevice                                    device,
    P_VkBufferMemoryRequirementsInfo2           pInfo,
    P_VkMemoryRequirements2                     pMemoryRequirements);

VKAPI_ATTR void VKAPI_CALL vkGetImageSparseMemoryRequirements2(
    VkDevice                                    device,
    P_VkImageSparseMemoryRequirementsInfo2      pInfo,
    P_uint32_t                                  pSparseMemoryRequirementCount,
    P_VkSparseImageMemoryRequirements2          pSparseMemoryRequirements);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFeatures2(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceFeatures2                 pFeatures);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceProperties2(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceProperties2               pProperties);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFormatProperties2(
    VkPhysicalDevice                            physicalDevice,
    VkFormat                                    format,
    P_VkFormatProperties2                       pFormatProperties);

VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceImageFormatProperties2(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceImageFormatInfo2          pImageFormatInfo,
    P_VkImageFormatProperties2                  pImageFormatProperties);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceQueueFamilyProperties2(
    VkPhysicalDevice                            physicalDevice,
    P_uint32_t                                  pQueueFamilyPropertyCount,
    P_VkQueueFamilyProperties2                  pQueueFamilyProperties);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceMemoryProperties2(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceMemoryProperties2         pMemoryProperties);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceSparseImageFormatProperties2(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceSparseImageFormatInfo2      pFormatInfo,
    P_uint32_t                                  pPropertyCount,
    P_VkSparseImageFormatProperties2            pProperties);

VKAPI_ATTR void VKAPI_CALL vkTrimCommandPool(
    VkDevice                                    device,
    VkCommandPool                               commandPool,
    VkCommandPoolTrimFlags                      flags);

VKAPI_ATTR void VKAPI_CALL vkGetDeviceQueue2(
    VkDevice                                    device,
    P_VkDeviceQueueInfo2                        pQueueInfo,
    P_VkQueue                                   pQueue);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateSamplerYcbcrConversion(
    VkDevice                                    device,
    P_VkSamplerYcbcrConversionCreateInfo        pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkSamplerYcbcrConversion                  pYcbcrConversion);

VKAPI_ATTR void VKAPI_CALL vkDestroySamplerYcbcrConversion(
    VkDevice                                    device,
    VkSamplerYcbcrConversion                    ycbcrConversion,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateDescriptorUpdateTemplate(
    VkDevice                                    device,
    P_VkDescriptorUpdateTemplateCreateInfo      pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkDescriptorUpdateTemplate                pDescriptorUpdateTemplate);

VKAPI_ATTR void VKAPI_CALL vkDestroyDescriptorUpdateTemplate(
    VkDevice                                    device,
    VkDescriptorUpdateTemplate                  descriptorUpdateTemplate,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR void VKAPI_CALL vkUpdateDescriptorSetWithTemplate(
    VkDevice                                    device,
    VkDescriptorSet                             descriptorSet,
    VkDescriptorUpdateTemplate                  descriptorUpdateTemplate,
    P_void                                      pData);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceExternalBufferProperties(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceExternalBufferInfo        pExternalBufferInfo,
    P_VkExternalBufferProperties                pExternalBufferProperties);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceExternalFenceProperties(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceExternalFenceInfo         pExternalFenceInfo,
    P_VkExternalFenceProperties                 pExternalFenceProperties);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceExternalSemaphoreProperties(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceExternalSemaphoreInfo      pExternalSemaphoreInfo,
    P_VkExternalSemaphoreProperties             pExternalSemaphoreProperties);

VKAPI_ATTR void VKAPI_CALL vkGetDescriptorSetLayoutSupport(
    VkDevice                                    device,
    P_VkDescriptorSetLayoutCreateInfo           pCreateInfo,
    P_VkDescriptorSetLayoutSupport              pSupport);
{$ENDIF}


const VK_VERSION_1_2 = 1;
// Vulkan 1.2 version number
#define VK_API_VERSION_1_2 VK_MAKE_VERSION(1, 2, 0)// Patch version should always be set to 0

const VK_MAX_DRIVER_NAME_SIZE           = 256;
const VK_MAX_DRIVER_INFO_SIZE           = 256;

type VkDriverId = (
       VK_DRIVER_ID_AMD_PROPRIETARY = 1,
       VK_DRIVER_ID_AMD_OPEN_SOURCE = 2,
       VK_DRIVER_ID_MESA_RADV = 3,
       VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4,
       VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5,
       VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6,
       VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7,
       VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8,
       VK_DRIVER_ID_ARM_PROPRIETARY = 9,
       VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10,
       VK_DRIVER_ID_GGP_PROPRIETARY = 11,
       VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12,
       VK_DRIVER_ID_MESA_LLVMPIPE = 13,
       VK_DRIVER_ID_MOLTENVK = 14,
       VK_DRIVER_ID_AMD_PROPRIETARY_KHR = VK_DRIVER_ID_AMD_PROPRIETARY,
       VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = VK_DRIVER_ID_AMD_OPEN_SOURCE,
       VK_DRIVER_ID_MESA_RADV_KHR = VK_DRIVER_ID_MESA_RADV,
       VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = VK_DRIVER_ID_NVIDIA_PROPRIETARY,
       VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS,
       VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA,
       VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = VK_DRIVER_ID_IMAGINATION_PROPRIETARY,
       VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = VK_DRIVER_ID_QUALCOMM_PROPRIETARY,
       VK_DRIVER_ID_ARM_PROPRIETARY_KHR = VK_DRIVER_ID_ARM_PROPRIETARY,
       VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = VK_DRIVER_ID_GOOGLE_SWIFTSHADER,
       VK_DRIVER_ID_GGP_PROPRIETARY_KHR = VK_DRIVER_ID_GGP_PROPRIETARY,
       VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = VK_DRIVER_ID_BROADCOM_PROPRIETARY,
       VK_DRIVER_ID_MAX_ENUM = 0x7FFFFFFF
     );

type VkShaderFloatControlsIndependence = (
       VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0,
       VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1,
       VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2,
       VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY,
       VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL,
       VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE,
       VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 0x7FFFFFFF
     );

type VkSamplerReductionMode = (
       VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0,
       VK_SAMPLER_REDUCTION_MODE_MIN = 1,
       VK_SAMPLER_REDUCTION_MODE_MAX = 2,
       VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE,
       VK_SAMPLER_REDUCTION_MODE_MIN_EXT = VK_SAMPLER_REDUCTION_MODE_MIN,
       VK_SAMPLER_REDUCTION_MODE_MAX_EXT = VK_SAMPLER_REDUCTION_MODE_MAX,
       VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = 0x7FFFFFFF
     );

type VkSemaphoreType = (
       VK_SEMAPHORE_TYPE_BINARY = 0,
       VK_SEMAPHORE_TYPE_TIMELINE = 1,
       VK_SEMAPHORE_TYPE_BINARY_KHR = VK_SEMAPHORE_TYPE_BINARY,
       VK_SEMAPHORE_TYPE_TIMELINE_KHR = VK_SEMAPHORE_TYPE_TIMELINE,
       VK_SEMAPHORE_TYPE_MAX_ENUM = 0x7FFFFFFF
     );

type VkResolveModeFlagBits = (
       VK_RESOLVE_MODE_NONE = 0,
       VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 0x00000001,
       VK_RESOLVE_MODE_AVERAGE_BIT = 0x00000002,
       VK_RESOLVE_MODE_MIN_BIT = 0x00000004,
       VK_RESOLVE_MODE_MAX_BIT = 0x00000008,
       VK_RESOLVE_MODE_NONE_KHR = VK_RESOLVE_MODE_NONE,
       VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = VK_RESOLVE_MODE_SAMPLE_ZERO_BIT,
       VK_RESOLVE_MODE_AVERAGE_BIT_KHR = VK_RESOLVE_MODE_AVERAGE_BIT,
       VK_RESOLVE_MODE_MIN_BIT_KHR = VK_RESOLVE_MODE_MIN_BIT,
       VK_RESOLVE_MODE_MAX_BIT_KHR = VK_RESOLVE_MODE_MAX_BIT,
       VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkResolveModeFlags = VkFlags;

type VkDescriptorBindingFlagBits = (
       VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 0x00000001,
       VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 0x00000002,
       VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 0x00000004,
       VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 0x00000008,
       VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT,
       VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT,
       VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT,
       VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT,
       VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkDescriptorBindingFlags = VkFlags;

type VkSemaphoreWaitFlagBits = (
       VK_SEMAPHORE_WAIT_ANY_BIT = 0x00000001,
       VK_SEMAPHORE_WAIT_ANY_BIT_KHR = VK_SEMAPHORE_WAIT_ANY_BIT,
       VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
     );
type VkSemaphoreWaitFlags = VkFlags;
type VkPhysicalDeviceVulkan11Features = record
       sType :VkStructureType;
       pNext :P_void;
       storageBuffer16BitAccess :VkBool32;
       uniformAndStorageBuffer16BitAccess :VkBool32;
       storagePushConstant16 :VkBool32;
       storageInputOutput16 :VkBool32;
       multiview :VkBool32;
       multiviewGeometryShader :VkBool32;
       multiviewTessellationShader :VkBool32;
       variablePointersStorageBuffer :VkBool32;
       variablePointers :VkBool32;
       protectedMemory :VkBool32;
       samplerYcbcrConversion :VkBool32;
       shaderDrawParameters :VkBool32;
     end;

type VkPhysicalDeviceVulkan11Properties = record
       sType :VkStructureType;
       pNext :P_void;
       deviceUUID :array [ 0..VK_UUID_SIZE-1 ] of uint8_t;
       driverUUID :array [ 0..VK_UUID_SIZE-1 ] of uint8_t;
       deviceLUID :array [ 0..VK_LUID_SIZE-1 ] of uint8_t;
       deviceNodeMask :uint32_t;
       deviceLUIDValid :VkBool32;
       subgroupSize :uint32_t;
       subgroupSupportedStages :VkShaderStageFlags;
       subgroupSupportedOperations :VkSubgroupFeatureFlags;
       subgroupQuadOperationsInAllStages :VkBool32;
       pointClippingBehavior :VkPointClippingBehavior;
       maxMultiviewViewCount :uint32_t;
       maxMultiviewInstanceIndex :uint32_t;
       protectedNoFault :VkBool32;
       maxPerSetDescriptors :uint32_t;
       maxMemoryAllocationSize :VkDeviceSize;
     end;

type VkPhysicalDeviceVulkan12Features = record
       sType :VkStructureType;
       pNext :P_void;
       samplerMirrorClampToEdge :VkBool32;
       drawIndirectCount :VkBool32;
       storageBuffer8BitAccess :VkBool32;
       uniformAndStorageBuffer8BitAccess :VkBool32;
       storagePushConstant8 :VkBool32;
       shaderBufferInt64Atomics :VkBool32;
       shaderSharedInt64Atomics :VkBool32;
       shaderFloat16 :VkBool32;
       shaderInt8 :VkBool32;
       descriptorIndexing :VkBool32;
       shaderInputAttachmentArrayDynamicIndexing :VkBool32;
       shaderUniformTexelBufferArrayDynamicIndexing :VkBool32;
       shaderStorageTexelBufferArrayDynamicIndexing :VkBool32;
       shaderUniformBufferArrayNonUniformIndexing :VkBool32;
       shaderSampledImageArrayNonUniformIndexing :VkBool32;
       shaderStorageBufferArrayNonUniformIndexing :VkBool32;
       shaderStorageImageArrayNonUniformIndexing :VkBool32;
       shaderInputAttachmentArrayNonUniformIndexing :VkBool32;
       shaderUniformTexelBufferArrayNonUniformIndexing :VkBool32;
       shaderStorageTexelBufferArrayNonUniformIndexing :VkBool32;
       descriptorBindingUniformBufferUpdateAfterBind :VkBool32;
       descriptorBindingSampledImageUpdateAfterBind :VkBool32;
       descriptorBindingStorageImageUpdateAfterBind :VkBool32;
       descriptorBindingStorageBufferUpdateAfterBind :VkBool32;
       descriptorBindingUniformTexelBufferUpdateAfterBind :VkBool32;
       descriptorBindingStorageTexelBufferUpdateAfterBind :VkBool32;
       descriptorBindingUpdateUnusedWhilePending :VkBool32;
       descriptorBindingPartiallyBound :VkBool32;
       descriptorBindingVariableDescriptorCount :VkBool32;
       runtimeDescriptorArray :VkBool32;
       samplerFilterMinmax :VkBool32;
       scalarBlockLayout :VkBool32;
       imagelessFramebuffer :VkBool32;
       uniformBufferStandardLayout :VkBool32;
       shaderSubgroupExtendedTypes :VkBool32;
       separateDepthStencilLayouts :VkBool32;
       hostQueryReset :VkBool32;
       timelineSemaphore :VkBool32;
       bufferDeviceAddress :VkBool32;
       bufferDeviceAddressCaptureReplay :VkBool32;
       bufferDeviceAddressMultiDevice :VkBool32;
       vulkanMemoryModel :VkBool32;
       vulkanMemoryModelDeviceScope :VkBool32;
       vulkanMemoryModelAvailabilityVisibilityChains :VkBool32;
       shaderOutputViewportIndex :VkBool32;
       shaderOutputLayer :VkBool32;
       subgroupBroadcastDynamicId :VkBool32;
     end;

type VkConformanceVersion = record
       major :uint8_t;
       minor :uint8_t;
       subminor :uint8_t;
       patch :uint8_t;
     end;

type VkPhysicalDeviceVulkan12Properties = record
       sType :VkStructureType;
       pNext :P_void;
       driverID :VkDriverId;
       driverName :array [ 0..VK_MAX_DRIVER_NAME_SIZE-1 ] of char;
       driverInfo :array [ 0..VK_MAX_DRIVER_INFO_SIZE-1 ] of char;
       conformanceVersion :VkConformanceVersion;
       denormBehaviorIndependence :VkShaderFloatControlsIndependence;
       roundingModeIndependence :VkShaderFloatControlsIndependence;
       shaderSignedZeroInfNanPreserveFloat16 :VkBool32;
       shaderSignedZeroInfNanPreserveFloat32 :VkBool32;
       shaderSignedZeroInfNanPreserveFloat64 :VkBool32;
       shaderDenormPreserveFloat16 :VkBool32;
       shaderDenormPreserveFloat32 :VkBool32;
       shaderDenormPreserveFloat64 :VkBool32;
       shaderDenormFlushToZeroFloat16 :VkBool32;
       shaderDenormFlushToZeroFloat32 :VkBool32;
       shaderDenormFlushToZeroFloat64 :VkBool32;
       shaderRoundingModeRTEFloat16 :VkBool32;
       shaderRoundingModeRTEFloat32 :VkBool32;
       shaderRoundingModeRTEFloat64 :VkBool32;
       shaderRoundingModeRTZFloat16 :VkBool32;
       shaderRoundingModeRTZFloat32 :VkBool32;
       shaderRoundingModeRTZFloat64 :VkBool32;
       maxUpdateAfterBindDescriptorsInAllPools :uint32_t;
       shaderUniformBufferArrayNonUniformIndexingNative :VkBool32;
       shaderSampledImageArrayNonUniformIndexingNative :VkBool32;
       shaderStorageBufferArrayNonUniformIndexingNative :VkBool32;
       shaderStorageImageArrayNonUniformIndexingNative :VkBool32;
       shaderInputAttachmentArrayNonUniformIndexingNative :VkBool32;
       robustBufferAccessUpdateAfterBind :VkBool32;
       quadDivergentImplicitLod :VkBool32;
       maxPerStageDescriptorUpdateAfterBindSamplers :uint32_t;
       maxPerStageDescriptorUpdateAfterBindUniformBuffers :uint32_t;
       maxPerStageDescriptorUpdateAfterBindStorageBuffers :uint32_t;
       maxPerStageDescriptorUpdateAfterBindSampledImages :uint32_t;
       maxPerStageDescriptorUpdateAfterBindStorageImages :uint32_t;
       maxPerStageDescriptorUpdateAfterBindInputAttachments :uint32_t;
       maxPerStageUpdateAfterBindResources :uint32_t;
       maxDescriptorSetUpdateAfterBindSamplers :uint32_t;
       maxDescriptorSetUpdateAfterBindUniformBuffers :uint32_t;
       maxDescriptorSetUpdateAfterBindUniformBuffersDynamic :uint32_t;
       maxDescriptorSetUpdateAfterBindStorageBuffers :uint32_t;
       maxDescriptorSetUpdateAfterBindStorageBuffersDynamic :uint32_t;
       maxDescriptorSetUpdateAfterBindSampledImages :uint32_t;
       maxDescriptorSetUpdateAfterBindStorageImages :uint32_t;
       maxDescriptorSetUpdateAfterBindInputAttachments :uint32_t;
       supportedDepthResolveModes :VkResolveModeFlags;
       supportedStencilResolveModes :VkResolveModeFlags;
       independentResolveNone :VkBool32;
       independentResolve :VkBool32;
       filterMinmaxSingleComponentFormats :VkBool32;
       filterMinmaxImageComponentMapping :VkBool32;
       maxTimelineSemaphoreValueDifference :uint64_t;
       framebufferIntegerColorSampleCounts :VkSampleCountFlags;
     end;

type VkImageFormatListCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       viewFormatCount :uint32_t;
       pViewFormats :P_VkFormat;
     end;

type VkAttachmentDescription2 = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkAttachmentDescriptionFlags;
       format :VkFormat;
       samples :VkSampleCountFlagBits;
       loadOp :VkAttachmentLoadOp;
       storeOp :VkAttachmentStoreOp;
       stencilLoadOp :VkAttachmentLoadOp;
       stencilStoreOp :VkAttachmentStoreOp;
       initialLayout :VkImageLayout;
       finalLayout :VkImageLayout;
     end;

type VkAttachmentReference2 = record
       sType :VkStructureType;
       pNext :P_void;
       attachment :uint32_t;
       layout :VkImageLayout;
       aspectMask :VkImageAspectFlags;
     end;

type VkSubpassDescription2 = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkSubpassDescriptionFlags;
       pipelineBindPoint :VkPipelineBindPoint;
       viewMask :uint32_t;
       inputAttachmentCount :uint32_t;
       pInputAttachments :P_VkAttachmentReference2;
       colorAttachmentCount :uint32_t;
       pColorAttachments :P_VkAttachmentReference2;
       pResolveAttachments :P_VkAttachmentReference2;
       pDepthStencilAttachment :P_VkAttachmentReference2;
       preserveAttachmentCount :uint32_t;
       pPreserveAttachments :P_uint32_t;
     end;

type VkSubpassDependency2 = record
       sType :VkStructureType;
       pNext :P_void;
       srcSubpass :uint32_t;
       dstSubpass :uint32_t;
       srcStageMask :VkPipelineStageFlags;
       dstStageMask :VkPipelineStageFlags;
       srcAccessMask :VkAccessFlags;
       dstAccessMask :VkAccessFlags;
       dependencyFlags :VkDependencyFlags;
       viewOffset :int32_t;
     end;

type VkRenderPassCreateInfo2 = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkRenderPassCreateFlags;
       attachmentCount :uint32_t;
       pAttachments :P_VkAttachmentDescription2;
       subpassCount :uint32_t;
       pSubpasses :P_VkSubpassDescription2;
       dependencyCount :uint32_t;
       pDependencies :P_VkSubpassDependency2;
       correlatedViewMaskCount :uint32_t;
       pCorrelatedViewMasks :P_uint32_t;
     end;

type VkSubpassBeginInfo = record
       sType :VkStructureType;
       pNext :P_void;
       contents :VkSubpassContents;
     end;

type VkSubpassEndInfo = record
       sType :VkStructureType;
       pNext :P_void;
     end;

type VkPhysicalDevice8BitStorageFeatures = record
       sType :VkStructureType;
       pNext :P_void;
       storageBuffer8BitAccess :VkBool32;
       uniformAndStorageBuffer8BitAccess :VkBool32;
       storagePushConstant8 :VkBool32;
     end;

type VkPhysicalDeviceDriverProperties = record
       sType :VkStructureType;
       pNext :P_void;
       driverID :VkDriverId;
       driverName :array [ 0..VK_MAX_DRIVER_NAME_SIZE-1 ] of char;
       driverInfo :array [ 0..VK_MAX_DRIVER_INFO_SIZE-1 ] of char;
       conformanceVersion :VkConformanceVersion;
     end;

type VkPhysicalDeviceShaderAtomicInt64Features = record
       sType :VkStructureType;
       pNext :P_void;
       shaderBufferInt64Atomics :VkBool32;
       shaderSharedInt64Atomics :VkBool32;
     end;

type VkPhysicalDeviceShaderFloat16Int8Features = record
       sType :VkStructureType;
       pNext :P_void;
       shaderFloat16 :VkBool32;
       shaderInt8 :VkBool32;
     end;

type VkPhysicalDeviceFloatControlsProperties = record
       sType :VkStructureType;
       pNext :P_void;
       denormBehaviorIndependence :VkShaderFloatControlsIndependence;
       roundingModeIndependence :VkShaderFloatControlsIndependence;
       shaderSignedZeroInfNanPreserveFloat16 :VkBool32;
       shaderSignedZeroInfNanPreserveFloat32 :VkBool32;
       shaderSignedZeroInfNanPreserveFloat64 :VkBool32;
       shaderDenormPreserveFloat16 :VkBool32;
       shaderDenormPreserveFloat32 :VkBool32;
       shaderDenormPreserveFloat64 :VkBool32;
       shaderDenormFlushToZeroFloat16 :VkBool32;
       shaderDenormFlushToZeroFloat32 :VkBool32;
       shaderDenormFlushToZeroFloat64 :VkBool32;
       shaderRoundingModeRTEFloat16 :VkBool32;
       shaderRoundingModeRTEFloat32 :VkBool32;
       shaderRoundingModeRTEFloat64 :VkBool32;
       shaderRoundingModeRTZFloat16 :VkBool32;
       shaderRoundingModeRTZFloat32 :VkBool32;
       shaderRoundingModeRTZFloat64 :VkBool32;
     end;

type VkDescriptorSetLayoutBindingFlagsCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       bindingCount :uint32_t;
       pBindingFlags :P_VkDescriptorBindingFlags;
     end;

type VkPhysicalDeviceDescriptorIndexingFeatures = record
       sType :VkStructureType;
       pNext :P_void;
       shaderInputAttachmentArrayDynamicIndexing :VkBool32;
       shaderUniformTexelBufferArrayDynamicIndexing :VkBool32;
       shaderStorageTexelBufferArrayDynamicIndexing :VkBool32;
       shaderUniformBufferArrayNonUniformIndexing :VkBool32;
       shaderSampledImageArrayNonUniformIndexing :VkBool32;
       shaderStorageBufferArrayNonUniformIndexing :VkBool32;
       shaderStorageImageArrayNonUniformIndexing :VkBool32;
       shaderInputAttachmentArrayNonUniformIndexing :VkBool32;
       shaderUniformTexelBufferArrayNonUniformIndexing :VkBool32;
       shaderStorageTexelBufferArrayNonUniformIndexing :VkBool32;
       descriptorBindingUniformBufferUpdateAfterBind :VkBool32;
       descriptorBindingSampledImageUpdateAfterBind :VkBool32;
       descriptorBindingStorageImageUpdateAfterBind :VkBool32;
       descriptorBindingStorageBufferUpdateAfterBind :VkBool32;
       descriptorBindingUniformTexelBufferUpdateAfterBind :VkBool32;
       descriptorBindingStorageTexelBufferUpdateAfterBind :VkBool32;
       descriptorBindingUpdateUnusedWhilePending :VkBool32;
       descriptorBindingPartiallyBound :VkBool32;
       descriptorBindingVariableDescriptorCount :VkBool32;
       runtimeDescriptorArray :VkBool32;
     end;

type VkPhysicalDeviceDescriptorIndexingProperties = record
       sType :VkStructureType;
       pNext :P_void;
       maxUpdateAfterBindDescriptorsInAllPools :uint32_t;
       shaderUniformBufferArrayNonUniformIndexingNative :VkBool32;
       shaderSampledImageArrayNonUniformIndexingNative :VkBool32;
       shaderStorageBufferArrayNonUniformIndexingNative :VkBool32;
       shaderStorageImageArrayNonUniformIndexingNative :VkBool32;
       shaderInputAttachmentArrayNonUniformIndexingNative :VkBool32;
       robustBufferAccessUpdateAfterBind :VkBool32;
       quadDivergentImplicitLod :VkBool32;
       maxPerStageDescriptorUpdateAfterBindSamplers :uint32_t;
       maxPerStageDescriptorUpdateAfterBindUniformBuffers :uint32_t;
       maxPerStageDescriptorUpdateAfterBindStorageBuffers :uint32_t;
       maxPerStageDescriptorUpdateAfterBindSampledImages :uint32_t;
       maxPerStageDescriptorUpdateAfterBindStorageImages :uint32_t;
       maxPerStageDescriptorUpdateAfterBindInputAttachments :uint32_t;
       maxPerStageUpdateAfterBindResources :uint32_t;
       maxDescriptorSetUpdateAfterBindSamplers :uint32_t;
       maxDescriptorSetUpdateAfterBindUniformBuffers :uint32_t;
       maxDescriptorSetUpdateAfterBindUniformBuffersDynamic :uint32_t;
       maxDescriptorSetUpdateAfterBindStorageBuffers :uint32_t;
       maxDescriptorSetUpdateAfterBindStorageBuffersDynamic :uint32_t;
       maxDescriptorSetUpdateAfterBindSampledImages :uint32_t;
       maxDescriptorSetUpdateAfterBindStorageImages :uint32_t;
       maxDescriptorSetUpdateAfterBindInputAttachments :uint32_t;
     end;

type VkDescriptorSetVariableDescriptorCountAllocateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       descriptorSetCount :uint32_t;
       pDescriptorCounts :P_uint32_t;
     end;

type VkDescriptorSetVariableDescriptorCountLayoutSupport = record
       sType :VkStructureType;
       pNext :P_void;
       maxVariableDescriptorCount :uint32_t;
     end;

type VkSubpassDescriptionDepthStencilResolve = record
       sType :VkStructureType;
       pNext :P_void;
       depthResolveMode :VkResolveModeFlagBits;
       stencilResolveMode :VkResolveModeFlagBits;
       pDepthStencilResolveAttachment :P_VkAttachmentReference2;
     end;

type VkPhysicalDeviceDepthStencilResolveProperties = record
       sType :VkStructureType;
       pNext :P_void;
       supportedDepthResolveModes :VkResolveModeFlags;
       supportedStencilResolveModes :VkResolveModeFlags;
       independentResolveNone :VkBool32;
       independentResolve :VkBool32;
     end;

type VkPhysicalDeviceScalarBlockLayoutFeatures = record
       sType :VkStructureType;
       pNext :P_void;
       scalarBlockLayout :VkBool32;
     end;

type VkImageStencilUsageCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       stencilUsage :VkImageUsageFlags;
     end;

type VkSamplerReductionModeCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       reductionMode :VkSamplerReductionMode;
     end;

type VkPhysicalDeviceSamplerFilterMinmaxProperties = record
       sType :VkStructureType;
       pNext :P_void;
       filterMinmaxSingleComponentFormats :VkBool32;
       filterMinmaxImageComponentMapping :VkBool32;
     end;

type VkPhysicalDeviceVulkanMemoryModelFeatures = record
       sType :VkStructureType;
       pNext :P_void;
       vulkanMemoryModel :VkBool32;
       vulkanMemoryModelDeviceScope :VkBool32;
       vulkanMemoryModelAvailabilityVisibilityChains :VkBool32;
     end;

type VkPhysicalDeviceImagelessFramebufferFeatures = record
       sType :VkStructureType;
       pNext :P_void;
       imagelessFramebuffer :VkBool32;
     end;

type VkFramebufferAttachmentImageInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkImageCreateFlags;
       usage :VkImageUsageFlags;
       width :uint32_t;
       height :uint32_t;
       layerCount :uint32_t;
       viewFormatCount :uint32_t;
       pViewFormats :P_VkFormat;
     end;

type VkFramebufferAttachmentsCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       attachmentImageInfoCount :uint32_t;
       pAttachmentImageInfos :P_VkFramebufferAttachmentImageInfo;
     end;

type VkRenderPassAttachmentBeginInfo = record
       sType :VkStructureType;
       pNext :P_void;
       attachmentCount :uint32_t;
       pAttachments :P_VkImageView;
     end;

type VkPhysicalDeviceUniformBufferStandardLayoutFeatures = record
       sType :VkStructureType;
       pNext :P_void;
       uniformBufferStandardLayout :VkBool32;
     end;

type VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures = record
       sType :VkStructureType;
       pNext :P_void;
       shaderSubgroupExtendedTypes :VkBool32;
     end;

type VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures = record
       sType :VkStructureType;
       pNext :P_void;
       separateDepthStencilLayouts :VkBool32;
     end;

type VkAttachmentReferenceStencilLayout = record
       sType :VkStructureType;
       pNext :P_void;
       stencilLayout :VkImageLayout;
     end;

type VkAttachmentDescriptionStencilLayout = record
       sType :VkStructureType;
       pNext :P_void;
       stencilInitialLayout :VkImageLayout;
       stencilFinalLayout :VkImageLayout;
     end;

type VkPhysicalDeviceHostQueryResetFeatures = record
       sType :VkStructureType;
       pNext :P_void;
       hostQueryReset :VkBool32;
     end;

type VkPhysicalDeviceTimelineSemaphoreFeatures = record
       sType :VkStructureType;
       pNext :P_void;
       timelineSemaphore :VkBool32;
     end;

type VkPhysicalDeviceTimelineSemaphoreProperties = record
       sType :VkStructureType;
       pNext :P_void;
       maxTimelineSemaphoreValueDifference :uint64_t;
     end;

type VkSemaphoreTypeCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       semaphoreType :VkSemaphoreType;
       initialValue :uint64_t;
     end;

type VkTimelineSemaphoreSubmitInfo = record
       sType :VkStructureType;
       pNext :P_void;
       waitSemaphoreValueCount :uint32_t;
       pWaitSemaphoreValues :P_uint64_t;
       signalSemaphoreValueCount :uint32_t;
       pSignalSemaphoreValues :P_uint64_t;
     end;

type VkSemaphoreWaitInfo = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkSemaphoreWaitFlags;
       semaphoreCount :uint32_t;
       pSemaphores :P_VkSemaphore;
       pValues :P_uint64_t;
     end;

type VkSemaphoreSignalInfo = record
       sType :VkStructureType;
       pNext :P_void;
       semaphore :VkSemaphore;
       value :uint64_t;
     end;

type VkPhysicalDeviceBufferDeviceAddressFeatures = record
       sType :VkStructureType;
       pNext :P_void;
       bufferDeviceAddress :VkBool32;
       bufferDeviceAddressCaptureReplay :VkBool32;
       bufferDeviceAddressMultiDevice :VkBool32;
     end;

type VkBufferDeviceAddressInfo = record
       sType :VkStructureType;
       pNext :P_void;
       buffer :VkBuffer;
     end;

type VkBufferOpaqueCaptureAddressCreateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       opaqueCaptureAddress :uint64_t;
     end;

type VkMemoryOpaqueCaptureAddressAllocateInfo = record
       sType :VkStructureType;
       pNext :P_void;
       opaqueCaptureAddress :uint64_t;
     end;

type VkDeviceMemoryOpaqueCaptureAddressInfo = record
       sType :VkStructureType;
       pNext :P_void;
       memory :VkDeviceMemory;
     end;

typedef void (VKAPI_PTR *PFN_vkCmdDrawIndirectCount)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
typedef void (VKAPI_PTR *PFN_vkCmdDrawIndexedIndirectCount)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
typedef VkResult (VKAPI_PTR *PFN_vkCreateRenderPass2)(VkDevice device, const P_VkRenderPassCreateInfo2 pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkRenderPass pRenderPass);
typedef void (VKAPI_PTR *PFN_vkCmdBeginRenderPass2)(VkCommandBuffer commandBuffer, const P_VkRenderPassBeginInfo      pRenderPassBegin, const P_VkSubpassBeginInfo      pSubpassBeginInfo);
typedef void (VKAPI_PTR *PFN_vkCmdNextSubpass2)(VkCommandBuffer commandBuffer, const P_VkSubpassBeginInfo      pSubpassBeginInfo, const P_VkSubpassEndInfo        pSubpassEndInfo);
typedef void (VKAPI_PTR *PFN_vkCmdEndRenderPass2)(VkCommandBuffer commandBuffer, const P_VkSubpassEndInfo        pSubpassEndInfo);
typedef void (VKAPI_PTR *PFN_vkResetQueryPool)(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
typedef VkResult (VKAPI_PTR *PFN_vkGetSemaphoreCounterValue)(VkDevice device, VkSemaphore semaphore, P_uint64_t pValue);
typedef VkResult (VKAPI_PTR *PFN_vkWaitSemaphores)(VkDevice device, const P_VkSemaphoreWaitInfo pWaitInfo, uint64_t timeout);
typedef VkResult (VKAPI_PTR *PFN_vkSignalSemaphore)(VkDevice device, const P_VkSemaphoreSignalInfo pSignalInfo);
typedef VkDeviceAddress (VKAPI_PTR *PFN_vkGetBufferDeviceAddress)(VkDevice device, const P_VkBufferDeviceAddressInfo pInfo);
typedef uint64_t (VKAPI_PTR *PFN_vkGetBufferOpaqueCaptureAddress)(VkDevice device, const P_VkBufferDeviceAddressInfo pInfo);
typedef uint64_t (VKAPI_PTR *PFN_vkGetDeviceMemoryOpaqueCaptureAddress)(VkDevice device, const P_VkDeviceMemoryOpaqueCaptureAddressInfo pInfo);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndirectCount(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride);

VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndexedIndirectCount(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateRenderPass2(
    VkDevice                                    device,
    P_VkRenderPassCreateInfo2                   pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkRenderPass                              pRenderPass);

VKAPI_ATTR void VKAPI_CALL vkCmdBeginRenderPass2(
    VkCommandBuffer                             commandBuffer,
    P_VkRenderPassBeginInfo                     pRenderPassBegin,
    P_VkSubpassBeginInfo                        pSubpassBeginInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdNextSubpass2(
    VkCommandBuffer                             commandBuffer,
    P_VkSubpassBeginInfo                        pSubpassBeginInfo,
    P_VkSubpassEndInfo                          pSubpassEndInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdEndRenderPass2(
    VkCommandBuffer                             commandBuffer,
    P_VkSubpassEndInfo                          pSubpassEndInfo);

VKAPI_ATTR void VKAPI_CALL vkResetQueryPool(
    VkDevice                                    device,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery,
    uint32_t                                    queryCount);

VKAPI_ATTR VkResult VKAPI_CALL vkGetSemaphoreCounterValue(
    VkDevice                                    device,
    VkSemaphore                                 semaphore,
    P_uint64_t                                  pValue);

VKAPI_ATTR VkResult VKAPI_CALL vkWaitSemaphores(
    VkDevice                                    device,
    P_VkSemaphoreWaitInfo                       pWaitInfo,
    uint64_t                                    timeout);

VKAPI_ATTR VkResult VKAPI_CALL vkSignalSemaphore(
    VkDevice                                    device,
    P_VkSemaphoreSignalInfo                     pSignalInfo);

VKAPI_ATTR VkDeviceAddress VKAPI_CALL vkGetBufferDeviceAddress(
    VkDevice                                    device,
    P_VkBufferDeviceAddressInfo                 pInfo);

VKAPI_ATTR uint64_t VKAPI_CALL vkGetBufferOpaqueCaptureAddress(
    VkDevice                                    device,
    P_VkBufferDeviceAddressInfo                 pInfo);

VKAPI_ATTR uint64_t VKAPI_CALL vkGetDeviceMemoryOpaqueCaptureAddress(
    VkDevice                                    device,
    P_VkDeviceMemoryOpaqueCaptureAddressInfo      pInfo);
{$ENDIF}


const VK_KHR_surface = 1;
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSurfaceKHR)
const VK_KHR_SURFACE_SPEC_VERSION       = 25;
const VK_KHR_SURFACE_EXTENSION_NAME = 'VK_KHR_surface';

type VkPresentModeKHR = (
       VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
       VK_PRESENT_MODE_MAILBOX_KHR = 1,
       VK_PRESENT_MODE_FIFO_KHR = 2,
       VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,
       VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000,
       VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
       VK_PRESENT_MODE_MAX_ENUM_KHR = 0x7FFFFFFF
     );

type VkColorSpaceKHR = (
       VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
       VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001,
       VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002,
       VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003,
       VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004,
       VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005,
       VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006,
       VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007,
       VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008,
       VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009,
       VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010,
       VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011,
       VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012,
       VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013,
       VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
       VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000,
       VK_COLORSPACE_SRGB_NONLINEAR_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,
       VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT,
       VK_COLOR_SPACE_MAX_ENUM_KHR = 0x7FFFFFFF
     );

type VkSurfaceTransformFlagBitsKHR = (
       VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 0x00000001,
       VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 0x00000002,
       VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 0x00000004,
       VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 0x00000008,
       VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 0x00000010,
       VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 0x00000020,
       VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040,
       VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080,
       VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 0x00000100,
       VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
     );

type VkCompositeAlphaFlagBitsKHR = (
       VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 0x00000001,
       VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 0x00000002,
       VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 0x00000004,
       VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 0x00000008,
       VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
     );
type VkCompositeAlphaFlagsKHR = VkFlags;
type VkSurfaceTransformFlagsKHR = VkFlags;
type VkSurfaceCapabilitiesKHR = record
       minImageCount :uint32_t;
       maxImageCount :uint32_t;
       currentExtent :VkExtent2D;
       minImageExtent :VkExtent2D;
       maxImageExtent :VkExtent2D;
       maxImageArrayLayers :uint32_t;
       supportedTransforms :VkSurfaceTransformFlagsKHR;
       currentTransform :VkSurfaceTransformFlagBitsKHR;
       supportedCompositeAlpha :VkCompositeAlphaFlagsKHR;
       supportedUsageFlags :VkImageUsageFlags;
     end;

type VkSurfaceFormatKHR = record
       format :VkFormat;
       colorSpace :VkColorSpaceKHR;
     end;

typedef void (VKAPI_PTR *PFN_vkDestroySurfaceKHR)(VkInstance instance, VkSurfaceKHR surface, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, P_VkBool32 pSupported);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, P_VkSurfaceCapabilitiesKHR pSurfaceCapabilities);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceFormatsKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, P_uint32_t pSurfaceFormatCount, P_VkSurfaceFormatKHR pSurfaceFormats);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfacePresentModesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, P_uint32_t pPresentModeCount, P_VkPresentModeKHR pPresentModes);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkDestroySurfaceKHR(
    VkInstance                                  instance,
    VkSurfaceKHR                                surface,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceSupportKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    queueFamilyIndex,
    VkSurfaceKHR                                surface,
    P_VkBool32                                  pSupported);

VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    VkPhysicalDevice                            physicalDevice,
    VkSurfaceKHR                                surface,
    P_VkSurfaceCapabilitiesKHR                  pSurfaceCapabilities);

VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceFormatsKHR(
    VkPhysicalDevice                            physicalDevice,
    VkSurfaceKHR                                surface,
    P_uint32_t                                  pSurfaceFormatCount,
    P_VkSurfaceFormatKHR                        pSurfaceFormats);

VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfacePresentModesKHR(
    VkPhysicalDevice                            physicalDevice,
    VkSurfaceKHR                                surface,
    P_uint32_t                                  pPresentModeCount,
    P_VkPresentModeKHR                          pPresentModes);
{$ENDIF}


const VK_KHR_swapchain = 1;
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSwapchainKHR)
const VK_KHR_SWAPCHAIN_SPEC_VERSION     = 70;
const VK_KHR_SWAPCHAIN_EXTENSION_NAME = 'VK_KHR_swapchain';

type VkSwapchainCreateFlagBitsKHR = (
       VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 0x00000001,
       VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 0x00000002,
       VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 0x00000004,
       VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
     );
type VkSwapchainCreateFlagsKHR = VkFlags;

type VkDeviceGroupPresentModeFlagBitsKHR = (
       VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 0x00000001,
       VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 0x00000002,
       VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 0x00000004,
       VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 0x00000008,
       VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
     );
type VkDeviceGroupPresentModeFlagsKHR = VkFlags;
type VkSwapchainCreateInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkSwapchainCreateFlagsKHR;
       surface :VkSurfaceKHR;
       minImageCount :uint32_t;
       imageFormat :VkFormat;
       imageColorSpace :VkColorSpaceKHR;
       imageExtent :VkExtent2D;
       imageArrayLayers :uint32_t;
       imageUsage :VkImageUsageFlags;
       imageSharingMode :VkSharingMode;
       queueFamilyIndexCount :uint32_t;
       pQueueFamilyIndices :P_uint32_t;
       preTransform :VkSurfaceTransformFlagBitsKHR;
       compositeAlpha :VkCompositeAlphaFlagBitsKHR;
       presentMode :VkPresentModeKHR;
       clipped :VkBool32;
       oldSwapchain :VkSwapchainKHR;
     end;

type VkPresentInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       waitSemaphoreCount :uint32_t;
       pWaitSemaphores :P_VkSemaphore;
       swapchainCount :uint32_t;
       pSwapchains :P_VkSwapchainKHR;
       pImageIndices :P_uint32_t;
       pResults :P_VkResult;
     end;

type VkImageSwapchainCreateInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       swapchain :VkSwapchainKHR;
     end;

type VkBindImageMemorySwapchainInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       swapchain :VkSwapchainKHR;
       imageIndex :uint32_t;
     end;

type VkAcquireNextImageInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       swapchain :VkSwapchainKHR;
       timeout :uint64_t;
       semaphore :VkSemaphore;
       fence :VkFence;
       deviceMask :uint32_t;
     end;

type VkDeviceGroupPresentCapabilitiesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       presentMask :array [ 0..VK_MAX_DEVICE_GROUP_SIZE-1 ] of uint32_t;
       modes :VkDeviceGroupPresentModeFlagsKHR;
     end;

type VkDeviceGroupPresentInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       swapchainCount :uint32_t;
       pDeviceMasks :P_uint32_t;
       mode :VkDeviceGroupPresentModeFlagBitsKHR;
     end;

type VkDeviceGroupSwapchainCreateInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       modes :VkDeviceGroupPresentModeFlagsKHR;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkCreateSwapchainKHR)(VkDevice device, const P_VkSwapchainCreateInfoKHR pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkSwapchainKHR pSwapchain);
typedef void (VKAPI_PTR *PFN_vkDestroySwapchainKHR)(VkDevice device, VkSwapchainKHR swapchain, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkGetSwapchainImagesKHR)(VkDevice device, VkSwapchainKHR swapchain, P_uint32_t pSwapchainImageCount, P_VkImage pSwapchainImages);
typedef VkResult (VKAPI_PTR *PFN_vkAcquireNextImageKHR)(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, P_uint32_t pImageIndex);
typedef VkResult (VKAPI_PTR *PFN_vkQueuePresentKHR)(VkQueue queue, const P_VkPresentInfoKHR pPresentInfo);
typedef VkResult (VKAPI_PTR *PFN_vkGetDeviceGroupPresentCapabilitiesKHR)(VkDevice device, P_VkDeviceGroupPresentCapabilitiesKHR pDeviceGroupPresentCapabilities);
typedef VkResult (VKAPI_PTR *PFN_vkGetDeviceGroupSurfacePresentModesKHR)(VkDevice device, VkSurfaceKHR surface, P_VkDeviceGroupPresentModeFlagsKHR pModes);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDevicePresentRectanglesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, P_uint32_t pRectCount, P_VkRect2D pRects);
typedef VkResult (VKAPI_PTR *PFN_vkAcquireNextImage2KHR)(VkDevice device, const P_VkAcquireNextImageInfoKHR pAcquireInfo, P_uint32_t pImageIndex);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkCreateSwapchainKHR(
    VkDevice                                    device,
    P_VkSwapchainCreateInfoKHR                  pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkSwapchainKHR                            pSwapchain);

VKAPI_ATTR void VKAPI_CALL vkDestroySwapchainKHR(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkGetSwapchainImagesKHR(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain,
    P_uint32_t                                  pSwapchainImageCount,
    P_VkImage                                   pSwapchainImages);

VKAPI_ATTR VkResult VKAPI_CALL vkAcquireNextImageKHR(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain,
    uint64_t                                    timeout,
    VkSemaphore                                 semaphore,
    VkFence                                     fence,
    P_uint32_t                                  pImageIndex);

VKAPI_ATTR VkResult VKAPI_CALL vkQueuePresentKHR(
    VkQueue                                     queue,
    P_VkPresentInfoKHR                          pPresentInfo);

VKAPI_ATTR VkResult VKAPI_CALL vkGetDeviceGroupPresentCapabilitiesKHR(
    VkDevice                                    device,
    P_VkDeviceGroupPresentCapabilitiesKHR       pDeviceGroupPresentCapabilities);

VKAPI_ATTR VkResult VKAPI_CALL vkGetDeviceGroupSurfacePresentModesKHR(
    VkDevice                                    device,
    VkSurfaceKHR                                surface,
    P_VkDeviceGroupPresentModeFlagsKHR          pModes);

VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDevicePresentRectanglesKHR(
    VkPhysicalDevice                            physicalDevice,
    VkSurfaceKHR                                surface,
    P_uint32_t                                  pRectCount,
    P_VkRect2D                                  pRects);

VKAPI_ATTR VkResult VKAPI_CALL vkAcquireNextImage2KHR(
    VkDevice                                    device,
    P_VkAcquireNextImageInfoKHR                 pAcquireInfo,
    P_uint32_t                                  pImageIndex);
{$ENDIF}


const VK_KHR_display = 1;
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDisplayKHR)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDisplayModeKHR)
const VK_KHR_DISPLAY_SPEC_VERSION       = 23;
const VK_KHR_DISPLAY_EXTENSION_NAME = 'VK_KHR_display';
type VkDisplayModeCreateFlagsKHR = VkFlags;

type VkDisplayPlaneAlphaFlagBitsKHR = (
       VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 0x00000001,
       VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 0x00000002,
       VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 0x00000004,
       VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0x00000008,
       VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
     );
type VkDisplayPlaneAlphaFlagsKHR = VkFlags;
type VkDisplaySurfaceCreateFlagsKHR = VkFlags;
type VkDisplayModeParametersKHR = record
       visibleRegion :VkExtent2D;
       refreshRate :uint32_t;
     end;

type VkDisplayModeCreateInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkDisplayModeCreateFlagsKHR;
       parameters :VkDisplayModeParametersKHR;
     end;

type VkDisplayModePropertiesKHR = record
       displayMode :VkDisplayModeKHR;
       parameters :VkDisplayModeParametersKHR;
     end;

type VkDisplayPlaneCapabilitiesKHR = record
       supportedAlpha :VkDisplayPlaneAlphaFlagsKHR;
       minSrcPosition :VkOffset2D;
       maxSrcPosition :VkOffset2D;
       minSrcExtent :VkExtent2D;
       maxSrcExtent :VkExtent2D;
       minDstPosition :VkOffset2D;
       maxDstPosition :VkOffset2D;
       minDstExtent :VkExtent2D;
       maxDstExtent :VkExtent2D;
     end;

type VkDisplayPlanePropertiesKHR = record
       currentDisplay :VkDisplayKHR;
       currentStackIndex :uint32_t;
     end;

type VkDisplayPropertiesKHR = record
       display :VkDisplayKHR;
       displayName :P_char;
       physicalDimensions :VkExtent2D;
       physicalResolution :VkExtent2D;
       supportedTransforms :VkSurfaceTransformFlagsKHR;
       planeReorderPossible :VkBool32;
       persistentContent :VkBool32;
     end;

type VkDisplaySurfaceCreateInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkDisplaySurfaceCreateFlagsKHR;
       displayMode :VkDisplayModeKHR;
       planeIndex :uint32_t;
       planeStackIndex :uint32_t;
       transform :VkSurfaceTransformFlagBitsKHR;
       globalAlpha :float;
       alphaMode :VkDisplayPlaneAlphaFlagBitsKHR;
       imageExtent :VkExtent2D;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceDisplayPropertiesKHR)(VkPhysicalDevice physicalDevice, P_uint32_t pPropertyCount, P_VkDisplayPropertiesKHR pProperties);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR)(VkPhysicalDevice physicalDevice, P_uint32_t pPropertyCount, P_VkDisplayPlanePropertiesKHR pProperties);
typedef VkResult (VKAPI_PTR *PFN_vkGetDisplayPlaneSupportedDisplaysKHR)(VkPhysicalDevice physicalDevice, uint32_t planeIndex, P_uint32_t pDisplayCount, P_VkDisplayKHR pDisplays);
typedef VkResult (VKAPI_PTR *PFN_vkGetDisplayModePropertiesKHR)(VkPhysicalDevice physicalDevice, VkDisplayKHR display, P_uint32_t pPropertyCount, P_VkDisplayModePropertiesKHR pProperties);
typedef VkResult (VKAPI_PTR *PFN_vkCreateDisplayModeKHR)(VkPhysicalDevice physicalDevice, VkDisplayKHR display, const P_VkDisplayModeCreateInfoKHR pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkDisplayModeKHR pMode);
typedef VkResult (VKAPI_PTR *PFN_vkGetDisplayPlaneCapabilitiesKHR)(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, P_VkDisplayPlaneCapabilitiesKHR pCapabilities);
typedef VkResult (VKAPI_PTR *PFN_vkCreateDisplayPlaneSurfaceKHR)(VkInstance instance, const P_VkDisplaySurfaceCreateInfoKHR pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkSurfaceKHR pSurface);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceDisplayPropertiesKHR(
    VkPhysicalDevice                            physicalDevice,
    P_uint32_t                                  pPropertyCount,
    P_VkDisplayPropertiesKHR                    pProperties);

VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
    VkPhysicalDevice                            physicalDevice,
    P_uint32_t                                  pPropertyCount,
    P_VkDisplayPlanePropertiesKHR               pProperties);

VKAPI_ATTR VkResult VKAPI_CALL vkGetDisplayPlaneSupportedDisplaysKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    planeIndex,
    P_uint32_t                                  pDisplayCount,
    P_VkDisplayKHR                              pDisplays);

VKAPI_ATTR VkResult VKAPI_CALL vkGetDisplayModePropertiesKHR(
    VkPhysicalDevice                            physicalDevice,
    VkDisplayKHR                                display,
    P_uint32_t                                  pPropertyCount,
    P_VkDisplayModePropertiesKHR                pProperties);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateDisplayModeKHR(
    VkPhysicalDevice                            physicalDevice,
    VkDisplayKHR                                display,
    P_VkDisplayModeCreateInfoKHR                pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkDisplayModeKHR                          pMode);

VKAPI_ATTR VkResult VKAPI_CALL vkGetDisplayPlaneCapabilitiesKHR(
    VkPhysicalDevice                            physicalDevice,
    VkDisplayModeKHR                            mode,
    uint32_t                                    planeIndex,
    P_VkDisplayPlaneCapabilitiesKHR             pCapabilities);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateDisplayPlaneSurfaceKHR(
    VkInstance                                  instance,
    P_VkDisplaySurfaceCreateInfoKHR             pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkSurfaceKHR                              pSurface);
{$ENDIF}


const VK_KHR_display_swapchain = 1;
const VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = 10;
const VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = 'VK_KHR_display_swapchain';
type VkDisplayPresentInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       srcRect :VkRect2D;
       dstRect :VkRect2D;
       persistent :VkBool32;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkCreateSharedSwapchainsKHR)(VkDevice device, uint32_t swapchainCount, const P_VkSwapchainCreateInfoKHR pCreateInfos, const P_VkAllocationCallbacks pAllocator, P_VkSwapchainKHR pSwapchains);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkCreateSharedSwapchainsKHR(
    VkDevice                                    device,
    uint32_t                                    swapchainCount,
    P_VkSwapchainCreateInfoKHR                  pCreateInfos,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkSwapchainKHR                            pSwapchains);
{$ENDIF}


const VK_KHR_sampler_mirror_clamp_to_edge = 1;
const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION = 3;
const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME = 'VK_KHR_sampler_mirror_clamp_to_edge';


const VK_KHR_multiview = 1;
const VK_KHR_MULTIVIEW_SPEC_VERSION     = 1;
const VK_KHR_MULTIVIEW_EXTENSION_NAME = 'VK_KHR_multiview';
type VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo;

type VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures;

type VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties;



const VK_KHR_get_physical_device_properties2 = 1;
const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION = 2;
const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME = 'VK_KHR_get_physical_device_properties2';
type VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2;

type VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2;

type VkFormatProperties2KHR = VkFormatProperties2;

type VkImageFormatProperties2KHR = VkImageFormatProperties2;

type VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2;

type VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2;

type VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2;

type VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2;

type VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2;

typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceFeatures2KHR)(VkPhysicalDevice physicalDevice, P_VkPhysicalDeviceFeatures2 pFeatures);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceProperties2KHR)(VkPhysicalDevice physicalDevice, P_VkPhysicalDeviceProperties2 pProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceFormatProperties2KHR)(VkPhysicalDevice physicalDevice, VkFormat format, P_VkFormatProperties2 pFormatProperties);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceImageFormatProperties2KHR)(VkPhysicalDevice physicalDevice, const P_VkPhysicalDeviceImageFormatInfo2 pImageFormatInfo, P_VkImageFormatProperties2 pImageFormatProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR)(VkPhysicalDevice physicalDevice, P_uint32_t pQueueFamilyPropertyCount, P_VkQueueFamilyProperties2 pQueueFamilyProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceMemoryProperties2KHR)(VkPhysicalDevice physicalDevice, P_VkPhysicalDeviceMemoryProperties2 pMemoryProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR)(VkPhysicalDevice physicalDevice, const P_VkPhysicalDeviceSparseImageFormatInfo2 pFormatInfo, P_uint32_t pPropertyCount, P_VkSparseImageFormatProperties2 pProperties);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFeatures2KHR(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceFeatures2                 pFeatures);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceProperties2               pProperties);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFormatProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    VkFormat                                    format,
    P_VkFormatProperties2                       pFormatProperties);

VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceImageFormatProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceImageFormatInfo2          pImageFormatInfo,
    P_VkImageFormatProperties2                  pImageFormatProperties);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceQueueFamilyProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    P_uint32_t                                  pQueueFamilyPropertyCount,
    P_VkQueueFamilyProperties2                  pQueueFamilyProperties);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceMemoryProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceMemoryProperties2         pMemoryProperties);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceSparseImageFormatProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceSparseImageFormatInfo2      pFormatInfo,
    P_uint32_t                                  pPropertyCount,
    P_VkSparseImageFormatProperties2            pProperties);
{$ENDIF}


const VK_KHR_device_group = 1;
const VK_KHR_DEVICE_GROUP_SPEC_VERSION  = 4;
const VK_KHR_DEVICE_GROUP_EXTENSION_NAME = 'VK_KHR_device_group';
type VkPeerMemoryFeatureFlagsKHR = VkPeerMemoryFeatureFlags;

type VkPeerMemoryFeatureFlagBitsKHR = VkPeerMemoryFeatureFlagBits;

type VkMemoryAllocateFlagsKHR = VkMemoryAllocateFlags;

type VkMemoryAllocateFlagBitsKHR = VkMemoryAllocateFlagBits;

type VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo;

type VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo;

type VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo;

type VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo;

type VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo;

type VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo;

type VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo;

typedef void (VKAPI_PTR *PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR)(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, P_VkPeerMemoryFeatureFlags pPeerMemoryFeatures);
typedef void (VKAPI_PTR *PFN_vkCmdSetDeviceMaskKHR)(VkCommandBuffer commandBuffer, uint32_t deviceMask);
typedef void (VKAPI_PTR *PFN_vkCmdDispatchBaseKHR)(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkGetDeviceGroupPeerMemoryFeaturesKHR(
    VkDevice                                    device,
    uint32_t                                    heapIndex,
    uint32_t                                    localDeviceIndex,
    uint32_t                                    remoteDeviceIndex,
    P_VkPeerMemoryFeatureFlags                  pPeerMemoryFeatures);

VKAPI_ATTR void VKAPI_CALL vkCmdSetDeviceMaskKHR(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    deviceMask);

VKAPI_ATTR void VKAPI_CALL vkCmdDispatchBaseKHR(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    baseGroupX,
    uint32_t                                    baseGroupY,
    uint32_t                                    baseGroupZ,
    uint32_t                                    groupCountX,
    uint32_t                                    groupCountY,
    uint32_t                                    groupCountZ);
{$ENDIF}


const VK_KHR_shader_draw_parameters = 1;
const VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION = 1;
const VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME = 'VK_KHR_shader_draw_parameters';


const VK_KHR_maintenance1 = 1;
const VK_KHR_MAINTENANCE1_SPEC_VERSION  = 2;
const VK_KHR_MAINTENANCE1_EXTENSION_NAME = 'VK_KHR_maintenance1';
type VkCommandPoolTrimFlagsKHR = VkCommandPoolTrimFlags;

typedef void (VKAPI_PTR *PFN_vkTrimCommandPoolKHR)(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkTrimCommandPoolKHR(
    VkDevice                                    device,
    VkCommandPool                               commandPool,
    VkCommandPoolTrimFlags                      flags);
{$ENDIF}


const VK_KHR_device_group_creation = 1;
const VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION = 1;
const VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME = 'VK_KHR_device_group_creation';
const VK_MAX_DEVICE_GROUP_SIZE_KHR      = VK_MAX_DEVICE_GROUP_SIZE;
type VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties;

type VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo;

typedef VkResult (VKAPI_PTR *PFN_vkEnumeratePhysicalDeviceGroupsKHR)(VkInstance instance, P_uint32_t pPhysicalDeviceGroupCount, P_VkPhysicalDeviceGroupProperties pPhysicalDeviceGroupProperties);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkEnumeratePhysicalDeviceGroupsKHR(
    VkInstance                                  instance,
    P_uint32_t                                  pPhysicalDeviceGroupCount,
    P_VkPhysicalDeviceGroupProperties           pPhysicalDeviceGroupProperties);
{$ENDIF}


const VK_KHR_external_memory_capabilities = 1;
const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1;
const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = 'VK_KHR_external_memory_capabilities';
const VK_LUID_SIZE_KHR                  = VK_LUID_SIZE;
type VkExternalMemoryHandleTypeFlagsKHR = VkExternalMemoryHandleTypeFlags;

type VkExternalMemoryHandleTypeFlagBitsKHR = VkExternalMemoryHandleTypeFlagBits;

type VkExternalMemoryFeatureFlagsKHR = VkExternalMemoryFeatureFlags;

type VkExternalMemoryFeatureFlagBitsKHR = VkExternalMemoryFeatureFlagBits;

type VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties;

type VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo;

type VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties;

type VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo;

type VkExternalBufferPropertiesKHR = VkExternalBufferProperties;

type VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties;

typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR)(VkPhysicalDevice physicalDevice, const P_VkPhysicalDeviceExternalBufferInfo pExternalBufferInfo, P_VkExternalBufferProperties pExternalBufferProperties);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceExternalBufferPropertiesKHR(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceExternalBufferInfo        pExternalBufferInfo,
    P_VkExternalBufferProperties                pExternalBufferProperties);
{$ENDIF}


const VK_KHR_external_memory = 1;
const VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION = 1;
const VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME = 'VK_KHR_external_memory';
const VK_QUEUE_FAMILY_EXTERNAL_KHR      = VK_QUEUE_FAMILY_EXTERNAL;
type VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo;

type VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo;

type VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo;



const VK_KHR_external_memory_fd = 1;
const VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION = 1;
const VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME = 'VK_KHR_external_memory_fd';
type VkImportMemoryFdInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       handleType :VkExternalMemoryHandleTypeFlagBits;
       fd :int;
     end;

type VkMemoryFdPropertiesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       memoryTypeBits :uint32_t;
     end;

type VkMemoryGetFdInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       memory :VkDeviceMemory;
       handleType :VkExternalMemoryHandleTypeFlagBits;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkGetMemoryFdKHR)(VkDevice device, const P_VkMemoryGetFdInfoKHR pGetFdInfo, P_int pFd);
typedef VkResult (VKAPI_PTR *PFN_vkGetMemoryFdPropertiesKHR)(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, P_VkMemoryFdPropertiesKHR pMemoryFdProperties);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryFdKHR(
    VkDevice                                    device,
    P_VkMemoryGetFdInfoKHR                      pGetFdInfo,
    P_int                                       pFd);

VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryFdPropertiesKHR(
    VkDevice                                    device,
    VkExternalMemoryHandleTypeFlagBits          handleType,
    int                                         fd,
    P_VkMemoryFdPropertiesKHR                   pMemoryFdProperties);
{$ENDIF}


const VK_KHR_external_semaphore_capabilities = 1;
const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION = 1;
const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME = 'VK_KHR_external_semaphore_capabilities';
type VkExternalSemaphoreHandleTypeFlagsKHR = VkExternalSemaphoreHandleTypeFlags;

type VkExternalSemaphoreHandleTypeFlagBitsKHR = VkExternalSemaphoreHandleTypeFlagBits;

type VkExternalSemaphoreFeatureFlagsKHR = VkExternalSemaphoreFeatureFlags;

type VkExternalSemaphoreFeatureFlagBitsKHR = VkExternalSemaphoreFeatureFlagBits;

type VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo;

type VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties;

typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR)(VkPhysicalDevice physicalDevice, const P_VkPhysicalDeviceExternalSemaphoreInfo pExternalSemaphoreInfo, P_VkExternalSemaphoreProperties pExternalSemaphoreProperties);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceExternalSemaphoreInfo      pExternalSemaphoreInfo,
    P_VkExternalSemaphoreProperties             pExternalSemaphoreProperties);
{$ENDIF}


const VK_KHR_external_semaphore = 1;
const VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION = 1;
const VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME = 'VK_KHR_external_semaphore';
type VkSemaphoreImportFlagsKHR = VkSemaphoreImportFlags;

type VkSemaphoreImportFlagBitsKHR = VkSemaphoreImportFlagBits;

type VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo;



const VK_KHR_external_semaphore_fd = 1;
const VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION = 1;
const VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME = 'VK_KHR_external_semaphore_fd';
type VkImportSemaphoreFdInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       semaphore :VkSemaphore;
       flags :VkSemaphoreImportFlags;
       handleType :VkExternalSemaphoreHandleTypeFlagBits;
       fd :int;
     end;

type VkSemaphoreGetFdInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       semaphore :VkSemaphore;
       handleType :VkExternalSemaphoreHandleTypeFlagBits;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkImportSemaphoreFdKHR)(VkDevice device, const P_VkImportSemaphoreFdInfoKHR pImportSemaphoreFdInfo);
typedef VkResult (VKAPI_PTR *PFN_vkGetSemaphoreFdKHR)(VkDevice device, const P_VkSemaphoreGetFdInfoKHR pGetFdInfo, P_int pFd);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkImportSemaphoreFdKHR(
    VkDevice                                    device,
    P_VkImportSemaphoreFdInfoKHR                pImportSemaphoreFdInfo);

VKAPI_ATTR VkResult VKAPI_CALL vkGetSemaphoreFdKHR(
    VkDevice                                    device,
    P_VkSemaphoreGetFdInfoKHR                   pGetFdInfo,
    P_int                                       pFd);
{$ENDIF}


const VK_KHR_push_descriptor = 1;
const VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION = 2;
const VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME = 'VK_KHR_push_descriptor';
type VkPhysicalDevicePushDescriptorPropertiesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       maxPushDescriptors :uint32_t;
     end;

typedef void (VKAPI_PTR *PFN_vkCmdPushDescriptorSetKHR)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const P_VkWriteDescriptorSet pDescriptorWrites);
typedef void (VKAPI_PTR *PFN_vkCmdPushDescriptorSetWithTemplateKHR)(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const P_void pData);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdPushDescriptorSetKHR(
    VkCommandBuffer                             commandBuffer,
    VkPipelineBindPoint                         pipelineBindPoint,
    VkPipelineLayout                            layout,
    uint32_t                                    set,
    uint32_t                                    descriptorWriteCount,
    P_VkWriteDescriptorSet                      pDescriptorWrites);

VKAPI_ATTR void VKAPI_CALL vkCmdPushDescriptorSetWithTemplateKHR(
    VkCommandBuffer                             commandBuffer,
    VkDescriptorUpdateTemplate                  descriptorUpdateTemplate,
    VkPipelineLayout                            layout,
    uint32_t                                    set,
    P_void                                      pData);
{$ENDIF}


const VK_KHR_shader_float16_int8 = 1;
const VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION = 1;
const VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME = 'VK_KHR_shader_float16_int8';
type VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;

type VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;



const VK_KHR_16bit_storage = 1;
const VK_KHR_16BIT_STORAGE_SPEC_VERSION = 1;
const VK_KHR_16BIT_STORAGE_EXTENSION_NAME = 'VK_KHR_16bit_storage';
type VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures;



const VK_KHR_incremental_present = 1;
const VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION = 1;
const VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME = 'VK_KHR_incremental_present';
type VkRectLayerKHR = record
       offset :VkOffset2D;
       extent :VkExtent2D;
       layer :uint32_t;
     end;

type VkPresentRegionKHR = record
       rectangleCount :uint32_t;
       pRectangles :P_VkRectLayerKHR;
     end;

type VkPresentRegionsKHR = record
       sType :VkStructureType;
       pNext :P_void;
       swapchainCount :uint32_t;
       pRegions :P_VkPresentRegionKHR;
     end;



const VK_KHR_descriptor_update_template = 1;
type VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate;

const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION = 1;
const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME = 'VK_KHR_descriptor_update_template';
type VkDescriptorUpdateTemplateTypeKHR = VkDescriptorUpdateTemplateType;

type VkDescriptorUpdateTemplateCreateFlagsKHR = VkDescriptorUpdateTemplateCreateFlags;

type VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry;

type VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo;

typedef VkResult (VKAPI_PTR *PFN_vkCreateDescriptorUpdateTemplateKHR)(VkDevice device, const P_VkDescriptorUpdateTemplateCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkDescriptorUpdateTemplate pDescriptorUpdateTemplate);
typedef void (VKAPI_PTR *PFN_vkDestroyDescriptorUpdateTemplateKHR)(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const P_VkAllocationCallbacks pAllocator);
typedef void (VKAPI_PTR *PFN_vkUpdateDescriptorSetWithTemplateKHR)(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const P_void pData);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDescriptorUpdateTemplateKHR(
    VkDevice                                    device,
    P_VkDescriptorUpdateTemplateCreateInfo      pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkDescriptorUpdateTemplate                pDescriptorUpdateTemplate);

VKAPI_ATTR void VKAPI_CALL vkDestroyDescriptorUpdateTemplateKHR(
    VkDevice                                    device,
    VkDescriptorUpdateTemplate                  descriptorUpdateTemplate,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR void VKAPI_CALL vkUpdateDescriptorSetWithTemplateKHR(
    VkDevice                                    device,
    VkDescriptorSet                             descriptorSet,
    VkDescriptorUpdateTemplate                  descriptorUpdateTemplate,
    P_void                                      pData);
{$ENDIF}


const VK_KHR_imageless_framebuffer = 1;
const VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION = 1;
const VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME = 'VK_KHR_imageless_framebuffer';
type VkPhysicalDeviceImagelessFramebufferFeaturesKHR = VkPhysicalDeviceImagelessFramebufferFeatures;

type VkFramebufferAttachmentsCreateInfoKHR = VkFramebufferAttachmentsCreateInfo;

type VkFramebufferAttachmentImageInfoKHR = VkFramebufferAttachmentImageInfo;

type VkRenderPassAttachmentBeginInfoKHR = VkRenderPassAttachmentBeginInfo;



const VK_KHR_create_renderpass2 = 1;
const VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION = 1;
const VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME = 'VK_KHR_create_renderpass2';
type VkRenderPassCreateInfo2KHR = VkRenderPassCreateInfo2;

type VkAttachmentDescription2KHR = VkAttachmentDescription2;

type VkAttachmentReference2KHR = VkAttachmentReference2;

type VkSubpassDescription2KHR = VkSubpassDescription2;

type VkSubpassDependency2KHR = VkSubpassDependency2;

type VkSubpassBeginInfoKHR = VkSubpassBeginInfo;

type VkSubpassEndInfoKHR = VkSubpassEndInfo;

typedef VkResult (VKAPI_PTR *PFN_vkCreateRenderPass2KHR)(VkDevice device, const P_VkRenderPassCreateInfo2 pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkRenderPass pRenderPass);
typedef void (VKAPI_PTR *PFN_vkCmdBeginRenderPass2KHR)(VkCommandBuffer commandBuffer, const P_VkRenderPassBeginInfo      pRenderPassBegin, const P_VkSubpassBeginInfo      pSubpassBeginInfo);
typedef void (VKAPI_PTR *PFN_vkCmdNextSubpass2KHR)(VkCommandBuffer commandBuffer, const P_VkSubpassBeginInfo      pSubpassBeginInfo, const P_VkSubpassEndInfo        pSubpassEndInfo);
typedef void (VKAPI_PTR *PFN_vkCmdEndRenderPass2KHR)(VkCommandBuffer commandBuffer, const P_VkSubpassEndInfo        pSubpassEndInfo);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkCreateRenderPass2KHR(
    VkDevice                                    device,
    P_VkRenderPassCreateInfo2                   pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkRenderPass                              pRenderPass);

VKAPI_ATTR void VKAPI_CALL vkCmdBeginRenderPass2KHR(
    VkCommandBuffer                             commandBuffer,
    P_VkRenderPassBeginInfo                     pRenderPassBegin,
    P_VkSubpassBeginInfo                        pSubpassBeginInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdNextSubpass2KHR(
    VkCommandBuffer                             commandBuffer,
    P_VkSubpassBeginInfo                        pSubpassBeginInfo,
    P_VkSubpassEndInfo                          pSubpassEndInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdEndRenderPass2KHR(
    VkCommandBuffer                             commandBuffer,
    P_VkSubpassEndInfo                          pSubpassEndInfo);
{$ENDIF}


const VK_KHR_shared_presentable_image = 1;
const VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION = 1;
const VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME = 'VK_KHR_shared_presentable_image';
type VkSharedPresentSurfaceCapabilitiesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       sharedPresentSupportedUsageFlags :VkImageUsageFlags;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkGetSwapchainStatusKHR)(VkDevice device, VkSwapchainKHR swapchain);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkGetSwapchainStatusKHR(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain);
{$ENDIF}


const VK_KHR_external_fence_capabilities = 1;
const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION = 1;
const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME = 'VK_KHR_external_fence_capabilities';
type VkExternalFenceHandleTypeFlagsKHR = VkExternalFenceHandleTypeFlags;

type VkExternalFenceHandleTypeFlagBitsKHR = VkExternalFenceHandleTypeFlagBits;

type VkExternalFenceFeatureFlagsKHR = VkExternalFenceFeatureFlags;

type VkExternalFenceFeatureFlagBitsKHR = VkExternalFenceFeatureFlagBits;

type VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo;

type VkExternalFencePropertiesKHR = VkExternalFenceProperties;

typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR)(VkPhysicalDevice physicalDevice, const P_VkPhysicalDeviceExternalFenceInfo pExternalFenceInfo, P_VkExternalFenceProperties pExternalFenceProperties);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceExternalFencePropertiesKHR(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceExternalFenceInfo         pExternalFenceInfo,
    P_VkExternalFenceProperties                 pExternalFenceProperties);
{$ENDIF}


const VK_KHR_external_fence = 1;
const VK_KHR_EXTERNAL_FENCE_SPEC_VERSION = 1;
const VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME = 'VK_KHR_external_fence';
type VkFenceImportFlagsKHR = VkFenceImportFlags;

type VkFenceImportFlagBitsKHR = VkFenceImportFlagBits;

type VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo;



const VK_KHR_external_fence_fd = 1;
const VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION = 1;
const VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME = 'VK_KHR_external_fence_fd';
type VkImportFenceFdInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       fence :VkFence;
       flags :VkFenceImportFlags;
       handleType :VkExternalFenceHandleTypeFlagBits;
       fd :int;
     end;

type VkFenceGetFdInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       fence :VkFence;
       handleType :VkExternalFenceHandleTypeFlagBits;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkImportFenceFdKHR)(VkDevice device, const P_VkImportFenceFdInfoKHR pImportFenceFdInfo);
typedef VkResult (VKAPI_PTR *PFN_vkGetFenceFdKHR)(VkDevice device, const P_VkFenceGetFdInfoKHR pGetFdInfo, P_int pFd);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkImportFenceFdKHR(
    VkDevice                                    device,
    P_VkImportFenceFdInfoKHR                    pImportFenceFdInfo);

VKAPI_ATTR VkResult VKAPI_CALL vkGetFenceFdKHR(
    VkDevice                                    device,
    P_VkFenceGetFdInfoKHR                       pGetFdInfo,
    P_int                                       pFd);
{$ENDIF}


const VK_KHR_performance_query = 1;
const VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION = 1;
const VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME = 'VK_KHR_performance_query';

type VkPerformanceCounterUnitKHR = (
       VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0,
       VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1,
       VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2,
       VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3,
       VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4,
       VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5,
       VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6,
       VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7,
       VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8,
       VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9,
       VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10,
       VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 0x7FFFFFFF
     );

type VkPerformanceCounterScopeKHR = (
       VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0,
       VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1,
       VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2,
       VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR,
       VK_QUERY_SCOPE_RENDER_PASS_KHR = VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR,
       VK_QUERY_SCOPE_COMMAND_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR,
       VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 0x7FFFFFFF
     );

type VkPerformanceCounterStorageKHR = (
       VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0,
       VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1,
       VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2,
       VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3,
       VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4,
       VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5,
       VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 0x7FFFFFFF
     );

type VkPerformanceCounterDescriptionFlagBitsKHR = (
       VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 0x00000001,
       VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 0x00000002,
       VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR,
       VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR,
       VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
     );
type VkPerformanceCounterDescriptionFlagsKHR = VkFlags;

type VkAcquireProfilingLockFlagBitsKHR = (
       VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
     );
type VkAcquireProfilingLockFlagsKHR = VkFlags;
type VkPhysicalDevicePerformanceQueryFeaturesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       performanceCounterQueryPools :VkBool32;
       performanceCounterMultipleQueryPools :VkBool32;
     end;

type VkPhysicalDevicePerformanceQueryPropertiesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       allowCommandBufferQueryCopies :VkBool32;
     end;

type VkPerformanceCounterKHR = record
       sType :VkStructureType;
       pNext :P_void;
       unit :VkPerformanceCounterUnitKHR;
       scope :VkPerformanceCounterScopeKHR;
       storage :VkPerformanceCounterStorageKHR;
       uuid :array [ 0..VK_UUID_SIZE-1 ] of uint8_t;
     end;

type VkPerformanceCounterDescriptionKHR = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPerformanceCounterDescriptionFlagsKHR;
       name :array [ 0..VK_MAX_DESCRIPTION_SIZE-1 ] of char;
       category :array [ 0..VK_MAX_DESCRIPTION_SIZE-1 ] of char;
       description :array [ 0..VK_MAX_DESCRIPTION_SIZE-1 ] of char;
     end;

type VkQueryPoolPerformanceCreateInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       queueFamilyIndex :uint32_t;
       counterIndexCount :uint32_t;
       pCounterIndices :P_uint32_t;
     end;

typedef union VkPerformanceCounterResultKHR {
       int32 :int32_t;
       int64 :int64_t;
       uint32 :uint32_t;
       uint64 :uint64_t;
       float32 :float;
       float64 :double;
} VkPerformanceCounterResultKHR;

type VkAcquireProfilingLockInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkAcquireProfilingLockFlagsKHR;
       timeout :uint64_t;
     end;

type VkPerformanceQuerySubmitInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       counterPassIndex :uint32_t;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, P_uint32_t pCounterCount, P_VkPerformanceCounterKHR pCounters, P_VkPerformanceCounterDescriptionKHR pCounterDescriptions);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR)(VkPhysicalDevice physicalDevice, const P_VkQueryPoolPerformanceCreateInfoKHR pPerformanceQueryCreateInfo, P_uint32_t pNumPasses);
typedef VkResult (VKAPI_PTR *PFN_vkAcquireProfilingLockKHR)(VkDevice device, const P_VkAcquireProfilingLockInfoKHR pInfo);
typedef void (VKAPI_PTR *PFN_vkReleaseProfilingLockKHR)(VkDevice device);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    queueFamilyIndex,
    P_uint32_t                                  pCounterCount,
    P_VkPerformanceCounterKHR                   pCounters,
    P_VkPerformanceCounterDescriptionKHR        pCounterDescriptions);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
    VkPhysicalDevice                            physicalDevice,
    P_VkQueryPoolPerformanceCreateInfoKHR       pPerformanceQueryCreateInfo,
    P_uint32_t                                  pNumPasses);

VKAPI_ATTR VkResult VKAPI_CALL vkAcquireProfilingLockKHR(
    VkDevice                                    device,
    P_VkAcquireProfilingLockInfoKHR             pInfo);

VKAPI_ATTR void VKAPI_CALL vkReleaseProfilingLockKHR(
    VkDevice                                    device);
{$ENDIF}


const VK_KHR_maintenance2 = 1;
const VK_KHR_MAINTENANCE2_SPEC_VERSION  = 1;
const VK_KHR_MAINTENANCE2_EXTENSION_NAME = 'VK_KHR_maintenance2';
type VkPointClippingBehaviorKHR = VkPointClippingBehavior;

type VkTessellationDomainOriginKHR = VkTessellationDomainOrigin;

type VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties;

type VkRenderPassInputAttachmentAspectCreateInfoKHR = VkRenderPassInputAttachmentAspectCreateInfo;

type VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference;

type VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo;

type VkPipelineTessellationDomainOriginStateCreateInfoKHR = VkPipelineTessellationDomainOriginStateCreateInfo;



const VK_KHR_get_surface_capabilities2 = 1;
const VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION = 1;
const VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME = 'VK_KHR_get_surface_capabilities2';
type VkPhysicalDeviceSurfaceInfo2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       surface :VkSurfaceKHR;
     end;

type VkSurfaceCapabilities2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       surfaceCapabilities :VkSurfaceCapabilitiesKHR;
     end;

type VkSurfaceFormat2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       surfaceFormat :VkSurfaceFormatKHR;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR)(VkPhysicalDevice physicalDevice, const P_VkPhysicalDeviceSurfaceInfo2KHR pSurfaceInfo, P_VkSurfaceCapabilities2KHR pSurfaceCapabilities);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceFormats2KHR)(VkPhysicalDevice physicalDevice, const P_VkPhysicalDeviceSurfaceInfo2KHR pSurfaceInfo, P_uint32_t pSurfaceFormatCount, P_VkSurfaceFormat2KHR pSurfaceFormats);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceCapabilities2KHR(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceSurfaceInfo2KHR           pSurfaceInfo,
    P_VkSurfaceCapabilities2KHR                 pSurfaceCapabilities);

VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceFormats2KHR(
    VkPhysicalDevice                            physicalDevice,
    P_VkPhysicalDeviceSurfaceInfo2KHR           pSurfaceInfo,
    P_uint32_t                                  pSurfaceFormatCount,
    P_VkSurfaceFormat2KHR                       pSurfaceFormats);
{$ENDIF}


const VK_KHR_variable_pointers = 1;
const VK_KHR_VARIABLE_POINTERS_SPEC_VERSION = 1;
const VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME = 'VK_KHR_variable_pointers';
type VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;

type VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;



const VK_KHR_get_display_properties2 = 1;
const VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION = 1;
const VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME = 'VK_KHR_get_display_properties2';
type VkDisplayProperties2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       displayProperties :VkDisplayPropertiesKHR;
     end;

type VkDisplayPlaneProperties2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       displayPlaneProperties :VkDisplayPlanePropertiesKHR;
     end;

type VkDisplayModeProperties2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       displayModeProperties :VkDisplayModePropertiesKHR;
     end;

type VkDisplayPlaneInfo2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       mode :VkDisplayModeKHR;
       planeIndex :uint32_t;
     end;

type VkDisplayPlaneCapabilities2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       capabilities :VkDisplayPlaneCapabilitiesKHR;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceDisplayProperties2KHR)(VkPhysicalDevice physicalDevice, P_uint32_t pPropertyCount, P_VkDisplayProperties2KHR pProperties);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR)(VkPhysicalDevice physicalDevice, P_uint32_t pPropertyCount, P_VkDisplayPlaneProperties2KHR pProperties);
typedef VkResult (VKAPI_PTR *PFN_vkGetDisplayModeProperties2KHR)(VkPhysicalDevice physicalDevice, VkDisplayKHR display, P_uint32_t pPropertyCount, P_VkDisplayModeProperties2KHR pProperties);
typedef VkResult (VKAPI_PTR *PFN_vkGetDisplayPlaneCapabilities2KHR)(VkPhysicalDevice physicalDevice, const P_VkDisplayPlaneInfo2KHR pDisplayPlaneInfo, P_VkDisplayPlaneCapabilities2KHR pCapabilities);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceDisplayProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    P_uint32_t                                  pPropertyCount,
    P_VkDisplayProperties2KHR                   pProperties);

VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    P_uint32_t                                  pPropertyCount,
    P_VkDisplayPlaneProperties2KHR              pProperties);

VKAPI_ATTR VkResult VKAPI_CALL vkGetDisplayModeProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    VkDisplayKHR                                display,
    P_uint32_t                                  pPropertyCount,
    P_VkDisplayModeProperties2KHR               pProperties);

VKAPI_ATTR VkResult VKAPI_CALL vkGetDisplayPlaneCapabilities2KHR(
    VkPhysicalDevice                            physicalDevice,
    P_VkDisplayPlaneInfo2KHR                    pDisplayPlaneInfo,
    P_VkDisplayPlaneCapabilities2KHR            pCapabilities);
{$ENDIF}


const VK_KHR_dedicated_allocation = 1;
const VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION = 3;
const VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME = 'VK_KHR_dedicated_allocation';
type VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements;

type VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo;



const VK_KHR_storage_buffer_storage_class = 1;
const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION = 1;
const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME = 'VK_KHR_storage_buffer_storage_class';


const VK_KHR_relaxed_block_layout = 1;
const VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION = 1;
const VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME = 'VK_KHR_relaxed_block_layout';


const VK_KHR_get_memory_requirements2 = 1;
const VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION = 1;
const VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME = 'VK_KHR_get_memory_requirements2';
type VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2;

type VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2;

type VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2;

type VkMemoryRequirements2KHR = VkMemoryRequirements2;

type VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2;

typedef void (VKAPI_PTR *PFN_vkGetImageMemoryRequirements2KHR)(VkDevice device, const P_VkImageMemoryRequirementsInfo2 pInfo, P_VkMemoryRequirements2 pMemoryRequirements);
typedef void (VKAPI_PTR *PFN_vkGetBufferMemoryRequirements2KHR)(VkDevice device, const P_VkBufferMemoryRequirementsInfo2 pInfo, P_VkMemoryRequirements2 pMemoryRequirements);
typedef void (VKAPI_PTR *PFN_vkGetImageSparseMemoryRequirements2KHR)(VkDevice device, const P_VkImageSparseMemoryRequirementsInfo2 pInfo, P_uint32_t pSparseMemoryRequirementCount, P_VkSparseImageMemoryRequirements2 pSparseMemoryRequirements);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkGetImageMemoryRequirements2KHR(
    VkDevice                                    device,
    P_VkImageMemoryRequirementsInfo2            pInfo,
    P_VkMemoryRequirements2                     pMemoryRequirements);

VKAPI_ATTR void VKAPI_CALL vkGetBufferMemoryRequirements2KHR(
    VkDevice                                    device,
    P_VkBufferMemoryRequirementsInfo2           pInfo,
    P_VkMemoryRequirements2                     pMemoryRequirements);

VKAPI_ATTR void VKAPI_CALL vkGetImageSparseMemoryRequirements2KHR(
    VkDevice                                    device,
    P_VkImageSparseMemoryRequirementsInfo2      pInfo,
    P_uint32_t                                  pSparseMemoryRequirementCount,
    P_VkSparseImageMemoryRequirements2          pSparseMemoryRequirements);
{$ENDIF}


const VK_KHR_image_format_list = 1;
const VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION = 1;
const VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME = 'VK_KHR_image_format_list';
type VkImageFormatListCreateInfoKHR = VkImageFormatListCreateInfo;



const VK_KHR_sampler_ycbcr_conversion = 1;
type VkSamplerYcbcrConversionKHR = VkSamplerYcbcrConversion;

const VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION = 14;
const VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME = 'VK_KHR_sampler_ycbcr_conversion';
type VkSamplerYcbcrModelConversionKHR = VkSamplerYcbcrModelConversion;

type VkSamplerYcbcrRangeKHR = VkSamplerYcbcrRange;

type VkChromaLocationKHR = VkChromaLocation;

type VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo;

type VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo;

type VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo;

type VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo;

type VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = VkPhysicalDeviceSamplerYcbcrConversionFeatures;

type VkSamplerYcbcrConversionImageFormatPropertiesKHR = VkSamplerYcbcrConversionImageFormatProperties;

typedef VkResult (VKAPI_PTR *PFN_vkCreateSamplerYcbcrConversionKHR)(VkDevice device, const P_VkSamplerYcbcrConversionCreateInfo pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkSamplerYcbcrConversion pYcbcrConversion);
typedef void (VKAPI_PTR *PFN_vkDestroySamplerYcbcrConversionKHR)(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const P_VkAllocationCallbacks pAllocator);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkCreateSamplerYcbcrConversionKHR(
    VkDevice                                    device,
    P_VkSamplerYcbcrConversionCreateInfo        pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkSamplerYcbcrConversion                  pYcbcrConversion);

VKAPI_ATTR void VKAPI_CALL vkDestroySamplerYcbcrConversionKHR(
    VkDevice                                    device,
    VkSamplerYcbcrConversion                    ycbcrConversion,
    P_VkAllocationCallbacks                     pAllocator);
{$ENDIF}


const VK_KHR_bind_memory2 = 1;
const VK_KHR_BIND_MEMORY_2_SPEC_VERSION = 1;
const VK_KHR_BIND_MEMORY_2_EXTENSION_NAME = 'VK_KHR_bind_memory2';
type VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo;

type VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo;

typedef VkResult (VKAPI_PTR *PFN_vkBindBufferMemory2KHR)(VkDevice device, uint32_t bindInfoCount, const P_VkBindBufferMemoryInfo pBindInfos);
typedef VkResult (VKAPI_PTR *PFN_vkBindImageMemory2KHR)(VkDevice device, uint32_t bindInfoCount, const P_VkBindImageMemoryInfo pBindInfos);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkBindBufferMemory2KHR(
    VkDevice                                    device,
    uint32_t                                    bindInfoCount,
    P_VkBindBufferMemoryInfo                    pBindInfos);

VKAPI_ATTR VkResult VKAPI_CALL vkBindImageMemory2KHR(
    VkDevice                                    device,
    uint32_t                                    bindInfoCount,
    P_VkBindImageMemoryInfo                     pBindInfos);
{$ENDIF}


const VK_KHR_maintenance3 = 1;
const VK_KHR_MAINTENANCE3_SPEC_VERSION  = 1;
const VK_KHR_MAINTENANCE3_EXTENSION_NAME = 'VK_KHR_maintenance3';
type VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties;

type VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport;

typedef void (VKAPI_PTR *PFN_vkGetDescriptorSetLayoutSupportKHR)(VkDevice device, const P_VkDescriptorSetLayoutCreateInfo pCreateInfo, P_VkDescriptorSetLayoutSupport pSupport);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkGetDescriptorSetLayoutSupportKHR(
    VkDevice                                    device,
    P_VkDescriptorSetLayoutCreateInfo           pCreateInfo,
    P_VkDescriptorSetLayoutSupport              pSupport);
{$ENDIF}


const VK_KHR_draw_indirect_count = 1;
const VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION = 1;
const VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME = 'VK_KHR_draw_indirect_count';
typedef void (VKAPI_PTR *PFN_vkCmdDrawIndirectCountKHR)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
typedef void (VKAPI_PTR *PFN_vkCmdDrawIndexedIndirectCountKHR)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndirectCountKHR(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride);

VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndexedIndirectCountKHR(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride);
{$ENDIF}


const VK_KHR_shader_subgroup_extended_types = 1;
const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION = 1;
const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME = 'VK_KHR_shader_subgroup_extended_types';
type VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;



const VK_KHR_8bit_storage = 1;
const VK_KHR_8BIT_STORAGE_SPEC_VERSION  = 1;
const VK_KHR_8BIT_STORAGE_EXTENSION_NAME = 'VK_KHR_8bit_storage';
type VkPhysicalDevice8BitStorageFeaturesKHR = VkPhysicalDevice8BitStorageFeatures;



const VK_KHR_shader_atomic_int64 = 1;
const VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION = 1;
const VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME = 'VK_KHR_shader_atomic_int64';
type VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = VkPhysicalDeviceShaderAtomicInt64Features;



const VK_KHR_shader_clock = 1;
const VK_KHR_SHADER_CLOCK_SPEC_VERSION  = 1;
const VK_KHR_SHADER_CLOCK_EXTENSION_NAME = 'VK_KHR_shader_clock';
type VkPhysicalDeviceShaderClockFeaturesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       shaderSubgroupClock :VkBool32;
       shaderDeviceClock :VkBool32;
     end;



const VK_KHR_driver_properties = 1;
const VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION = 1;
const VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME = 'VK_KHR_driver_properties';
const VK_MAX_DRIVER_NAME_SIZE_KHR       = VK_MAX_DRIVER_NAME_SIZE;
const VK_MAX_DRIVER_INFO_SIZE_KHR       = VK_MAX_DRIVER_INFO_SIZE;
type VkDriverIdKHR = VkDriverId;

type VkConformanceVersionKHR = VkConformanceVersion;

type VkPhysicalDeviceDriverPropertiesKHR = VkPhysicalDeviceDriverProperties;



const VK_KHR_shader_float_controls = 1;
const VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION = 4;
const VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME = 'VK_KHR_shader_float_controls';
type VkShaderFloatControlsIndependenceKHR = VkShaderFloatControlsIndependence;

type VkPhysicalDeviceFloatControlsPropertiesKHR = VkPhysicalDeviceFloatControlsProperties;



const VK_KHR_depth_stencil_resolve = 1;
const VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION = 1;
const VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME = 'VK_KHR_depth_stencil_resolve';
type VkResolveModeFlagBitsKHR = VkResolveModeFlagBits;

type VkResolveModeFlagsKHR = VkResolveModeFlags;

type VkSubpassDescriptionDepthStencilResolveKHR = VkSubpassDescriptionDepthStencilResolve;

type VkPhysicalDeviceDepthStencilResolvePropertiesKHR = VkPhysicalDeviceDepthStencilResolveProperties;



const VK_KHR_swapchain_mutable_format = 1;
const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION = 1;
const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME = 'VK_KHR_swapchain_mutable_format';


const VK_KHR_timeline_semaphore = 1;
const VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION = 2;
const VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME = 'VK_KHR_timeline_semaphore';
type VkSemaphoreTypeKHR = VkSemaphoreType;

type VkSemaphoreWaitFlagBitsKHR = VkSemaphoreWaitFlagBits;

type VkSemaphoreWaitFlagsKHR = VkSemaphoreWaitFlags;

type VkPhysicalDeviceTimelineSemaphoreFeaturesKHR = VkPhysicalDeviceTimelineSemaphoreFeatures;

type VkPhysicalDeviceTimelineSemaphorePropertiesKHR = VkPhysicalDeviceTimelineSemaphoreProperties;

type VkSemaphoreTypeCreateInfoKHR = VkSemaphoreTypeCreateInfo;

type VkTimelineSemaphoreSubmitInfoKHR = VkTimelineSemaphoreSubmitInfo;

type VkSemaphoreWaitInfoKHR = VkSemaphoreWaitInfo;

type VkSemaphoreSignalInfoKHR = VkSemaphoreSignalInfo;

typedef VkResult (VKAPI_PTR *PFN_vkGetSemaphoreCounterValueKHR)(VkDevice device, VkSemaphore semaphore, P_uint64_t pValue);
typedef VkResult (VKAPI_PTR *PFN_vkWaitSemaphoresKHR)(VkDevice device, const P_VkSemaphoreWaitInfo pWaitInfo, uint64_t timeout);
typedef VkResult (VKAPI_PTR *PFN_vkSignalSemaphoreKHR)(VkDevice device, const P_VkSemaphoreSignalInfo pSignalInfo);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkGetSemaphoreCounterValueKHR(
    VkDevice                                    device,
    VkSemaphore                                 semaphore,
    P_uint64_t                                  pValue);

VKAPI_ATTR VkResult VKAPI_CALL vkWaitSemaphoresKHR(
    VkDevice                                    device,
    P_VkSemaphoreWaitInfo                       pWaitInfo,
    uint64_t                                    timeout);

VKAPI_ATTR VkResult VKAPI_CALL vkSignalSemaphoreKHR(
    VkDevice                                    device,
    P_VkSemaphoreSignalInfo                     pSignalInfo);
{$ENDIF}


const VK_KHR_vulkan_memory_model = 1;
const VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION = 3;
const VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME = 'VK_KHR_vulkan_memory_model';
type VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = VkPhysicalDeviceVulkanMemoryModelFeatures;



const VK_KHR_shader_terminate_invocation = 1;
const VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION = 1;
const VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME = 'VK_KHR_shader_terminate_invocation';
type VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       shaderTerminateInvocation :VkBool32;
     end;



const VK_KHR_fragment_shading_rate = 1;
const VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION = 1;
const VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME = 'VK_KHR_fragment_shading_rate';

type VkFragmentShadingRateCombinerOpKHR = (
       VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0,
       VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1,
       VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2,
       VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3,
       VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4,
       VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = 0x7FFFFFFF
     );
type VkFragmentShadingRateAttachmentInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       pFragmentShadingRateAttachment :P_VkAttachmentReference2;
       shadingRateAttachmentTexelSize :VkExtent2D;
     end;

type VkPipelineFragmentShadingRateStateCreateInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       fragmentSize :VkExtent2D;
       combinerOps :array [ 0..2-1 ] of VkFragmentShadingRateCombinerOpKHR;
     end;

type VkPhysicalDeviceFragmentShadingRateFeaturesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       pipelineFragmentShadingRate :VkBool32;
       primitiveFragmentShadingRate :VkBool32;
       attachmentFragmentShadingRate :VkBool32;
     end;

type VkPhysicalDeviceFragmentShadingRatePropertiesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       minFragmentShadingRateAttachmentTexelSize :VkExtent2D;
       maxFragmentShadingRateAttachmentTexelSize :VkExtent2D;
       maxFragmentShadingRateAttachmentTexelSizeAspectRatio :uint32_t;
       primitiveFragmentShadingRateWithMultipleViewports :VkBool32;
       layeredShadingRateAttachments :VkBool32;
       fragmentShadingRateNonTrivialCombinerOps :VkBool32;
       maxFragmentSize :VkExtent2D;
       maxFragmentSizeAspectRatio :uint32_t;
       maxFragmentShadingRateCoverageSamples :uint32_t;
       maxFragmentShadingRateRasterizationSamples :VkSampleCountFlagBits;
       fragmentShadingRateWithShaderDepthStencilWrites :VkBool32;
       fragmentShadingRateWithSampleMask :VkBool32;
       fragmentShadingRateWithShaderSampleMask :VkBool32;
       fragmentShadingRateWithConservativeRasterization :VkBool32;
       fragmentShadingRateWithFragmentShaderInterlock :VkBool32;
       fragmentShadingRateWithCustomSampleLocations :VkBool32;
       fragmentShadingRateStrictMultiplyCombiner :VkBool32;
     end;

type VkPhysicalDeviceFragmentShadingRateKHR = record
       sType :VkStructureType;
       pNext :P_void;
       sampleCounts :VkSampleCountFlags;
       fragmentSize :VkExtent2D;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR)(VkPhysicalDevice physicalDevice, P_uint32_t pFragmentShadingRateCount, P_VkPhysicalDeviceFragmentShadingRateKHR pFragmentShadingRates);
typedef void (VKAPI_PTR *PFN_vkCmdSetFragmentShadingRateKHR)(VkCommandBuffer           commandBuffer, const P_VkExtent2D                           pFragmentSize, const VkFragmentShadingRateCombinerOpKHR    combinerOps[2]);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceFragmentShadingRatesKHR(
    VkPhysicalDevice                            physicalDevice,
    P_uint32_t                                  pFragmentShadingRateCount,
    P_VkPhysicalDeviceFragmentShadingRateKHR    pFragmentShadingRates);

VKAPI_ATTR void VKAPI_CALL vkCmdSetFragmentShadingRateKHR(
    VkCommandBuffer                             commandBuffer,
    P_VkExtent2D                                pFragmentSize,
    const VkFragmentShadingRateCombinerOpKHR    combinerOps[2]);
{$ENDIF}


const VK_KHR_spirv_1_4 = 1;
const VK_KHR_SPIRV_1_4_SPEC_VERSION     = 1;
const VK_KHR_SPIRV_1_4_EXTENSION_NAME = 'VK_KHR_spirv_1_4';


const VK_KHR_surface_protected_capabilities = 1;
const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION = 1;
const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME = 'VK_KHR_surface_protected_capabilities';
type VkSurfaceProtectedCapabilitiesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       supportsProtected :VkBool32;
     end;



const VK_KHR_separate_depth_stencil_layouts = 1;
const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION = 1;
const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME = 'VK_KHR_separate_depth_stencil_layouts';
type VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;

type VkAttachmentReferenceStencilLayoutKHR = VkAttachmentReferenceStencilLayout;

type VkAttachmentDescriptionStencilLayoutKHR = VkAttachmentDescriptionStencilLayout;



const VK_KHR_uniform_buffer_standard_layout = 1;
const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION = 1;
const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME = 'VK_KHR_uniform_buffer_standard_layout';
type VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = VkPhysicalDeviceUniformBufferStandardLayoutFeatures;



const VK_KHR_buffer_device_address = 1;
const VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = 1;
const VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = 'VK_KHR_buffer_device_address';
type VkPhysicalDeviceBufferDeviceAddressFeaturesKHR = VkPhysicalDeviceBufferDeviceAddressFeatures;

type VkBufferDeviceAddressInfoKHR = VkBufferDeviceAddressInfo;

type VkBufferOpaqueCaptureAddressCreateInfoKHR = VkBufferOpaqueCaptureAddressCreateInfo;

type VkMemoryOpaqueCaptureAddressAllocateInfoKHR = VkMemoryOpaqueCaptureAddressAllocateInfo;

type VkDeviceMemoryOpaqueCaptureAddressInfoKHR = VkDeviceMemoryOpaqueCaptureAddressInfo;

typedef VkDeviceAddress (VKAPI_PTR *PFN_vkGetBufferDeviceAddressKHR)(VkDevice device, const P_VkBufferDeviceAddressInfo pInfo);
typedef uint64_t (VKAPI_PTR *PFN_vkGetBufferOpaqueCaptureAddressKHR)(VkDevice device, const P_VkBufferDeviceAddressInfo pInfo);
typedef uint64_t (VKAPI_PTR *PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR)(VkDevice device, const P_VkDeviceMemoryOpaqueCaptureAddressInfo pInfo);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkDeviceAddress VKAPI_CALL vkGetBufferDeviceAddressKHR(
    VkDevice                                    device,
    P_VkBufferDeviceAddressInfo                 pInfo);

VKAPI_ATTR uint64_t VKAPI_CALL vkGetBufferOpaqueCaptureAddressKHR(
    VkDevice                                    device,
    P_VkBufferDeviceAddressInfo                 pInfo);

VKAPI_ATTR uint64_t VKAPI_CALL vkGetDeviceMemoryOpaqueCaptureAddressKHR(
    VkDevice                                    device,
    P_VkDeviceMemoryOpaqueCaptureAddressInfo      pInfo);
{$ENDIF}


const VK_KHR_deferred_host_operations = 1;
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDeferredOperationKHR)
const VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION = 4;
const VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME = 'VK_KHR_deferred_host_operations';
typedef VkResult (VKAPI_PTR *PFN_vkCreateDeferredOperationKHR)(VkDevice device, const P_VkAllocationCallbacks pAllocator, P_VkDeferredOperationKHR pDeferredOperation);
typedef void (VKAPI_PTR *PFN_vkDestroyDeferredOperationKHR)(VkDevice device, VkDeferredOperationKHR operation, const P_VkAllocationCallbacks pAllocator);
typedef uint32_t (VKAPI_PTR *PFN_vkGetDeferredOperationMaxConcurrencyKHR)(VkDevice device, VkDeferredOperationKHR operation);
typedef VkResult (VKAPI_PTR *PFN_vkGetDeferredOperationResultKHR)(VkDevice device, VkDeferredOperationKHR operation);
typedef VkResult (VKAPI_PTR *PFN_vkDeferredOperationJoinKHR)(VkDevice device, VkDeferredOperationKHR operation);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDeferredOperationKHR(
    VkDevice                                    device,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkDeferredOperationKHR                    pDeferredOperation);

VKAPI_ATTR void VKAPI_CALL vkDestroyDeferredOperationKHR(
    VkDevice                                    device,
    VkDeferredOperationKHR                      operation,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR uint32_t VKAPI_CALL vkGetDeferredOperationMaxConcurrencyKHR(
    VkDevice                                    device,
    VkDeferredOperationKHR                      operation);

VKAPI_ATTR VkResult VKAPI_CALL vkGetDeferredOperationResultKHR(
    VkDevice                                    device,
    VkDeferredOperationKHR                      operation);

VKAPI_ATTR VkResult VKAPI_CALL vkDeferredOperationJoinKHR(
    VkDevice                                    device,
    VkDeferredOperationKHR                      operation);
{$ENDIF}


const VK_KHR_pipeline_executable_properties = 1;
const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION = 1;
const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME = 'VK_KHR_pipeline_executable_properties';

type VkPipelineExecutableStatisticFormatKHR = (
       VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0,
       VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1,
       VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2,
       VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3,
       VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 0x7FFFFFFF
     );
type VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       pipelineExecutableInfo :VkBool32;
     end;

type VkPipelineInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       pipeline :VkPipeline;
     end;

type VkPipelineExecutablePropertiesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       stages :VkShaderStageFlags;
       name :array [ 0..VK_MAX_DESCRIPTION_SIZE-1 ] of char;
       description :array [ 0..VK_MAX_DESCRIPTION_SIZE-1 ] of char;
       subgroupSize :uint32_t;
     end;

type VkPipelineExecutableInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       pipeline :VkPipeline;
       executableIndex :uint32_t;
     end;

typedef union VkPipelineExecutableStatisticValueKHR {
       b32 :VkBool32;
       i64 :int64_t;
       u64 :uint64_t;
       f64 :double;
} VkPipelineExecutableStatisticValueKHR;

type VkPipelineExecutableStatisticKHR = record
       sType :VkStructureType;
       pNext :P_void;
       name :array [ 0..VK_MAX_DESCRIPTION_SIZE-1 ] of char;
       description :array [ 0..VK_MAX_DESCRIPTION_SIZE-1 ] of char;
       format :VkPipelineExecutableStatisticFormatKHR;
       value :VkPipelineExecutableStatisticValueKHR;
     end;

type VkPipelineExecutableInternalRepresentationKHR = record
       sType :VkStructureType;
       pNext :P_void;
       name :array [ 0..VK_MAX_DESCRIPTION_SIZE-1 ] of char;
       description :array [ 0..VK_MAX_DESCRIPTION_SIZE-1 ] of char;
       isText :VkBool32;
       dataSize :size_t;
       pData :P_void;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkGetPipelineExecutablePropertiesKHR)(VkDevice                        device, const P_VkPipelineInfoKHR        pPipelineInfo, P_uint32_t pExecutableCount, P_VkPipelineExecutablePropertiesKHR pProperties);
typedef VkResult (VKAPI_PTR *PFN_vkGetPipelineExecutableStatisticsKHR)(VkDevice                        device, const P_VkPipelineExecutableInfoKHR  pExecutableInfo, P_uint32_t pStatisticCount, P_VkPipelineExecutableStatisticKHR pStatistics);
typedef VkResult (VKAPI_PTR *PFN_vkGetPipelineExecutableInternalRepresentationsKHR)(VkDevice                        device, const P_VkPipelineExecutableInfoKHR  pExecutableInfo, P_uint32_t pInternalRepresentationCount, P_VkPipelineExecutableInternalRepresentationKHR pInternalRepresentations);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkGetPipelineExecutablePropertiesKHR(
    VkDevice                                    device,
    P_VkPipelineInfoKHR                         pPipelineInfo,
    P_uint32_t                                  pExecutableCount,
    P_VkPipelineExecutablePropertiesKHR         pProperties);

VKAPI_ATTR VkResult VKAPI_CALL vkGetPipelineExecutableStatisticsKHR(
    VkDevice                                    device,
    P_VkPipelineExecutableInfoKHR               pExecutableInfo,
    P_uint32_t                                  pStatisticCount,
    P_VkPipelineExecutableStatisticKHR          pStatistics);

VKAPI_ATTR VkResult VKAPI_CALL vkGetPipelineExecutableInternalRepresentationsKHR(
    VkDevice                                    device,
    P_VkPipelineExecutableInfoKHR               pExecutableInfo,
    P_uint32_t                                  pInternalRepresentationCount,
    P_VkPipelineExecutableInternalRepresentationKHRpInternalRepresentations);
{$ENDIF}


const VK_KHR_pipeline_library = 1;
const VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION = 1;
const VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME = 'VK_KHR_pipeline_library';
type VkPipelineLibraryCreateInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       libraryCount :uint32_t;
       pLibraries :P_VkPipeline;
     end;



const VK_KHR_shader_non_semantic_info = 1;
const VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION = 1;
const VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME = 'VK_KHR_shader_non_semantic_info';


const VK_KHR_synchronization2 = 1;
type VkFlags64 = uint64_t;
const VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION = 1;
const VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME = 'VK_KHR_synchronization2';
type VkPipelineStageFlags2KHR = VkFlags64;

// Flag bits for VkPipelineStageFlags2KHR
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_NONE_KHR = 0;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR = 0x00000001;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR = 0x00000002;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR = 0x00000004;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR = 0x00000008;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR = 0x00000010;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR = 0x00000020;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR = 0x00000040;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR = 0x00000080;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR = 0x00000100;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR = 0x00000200;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR = 0x00000400;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR = 0x00000800;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR = 0x00001000;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR = 0x00001000;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR = 0x00002000;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_HOST_BIT_KHR = 0x00004000;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR = 0x00008000;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR = 0x00010000;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_COPY_BIT_KHR = 0x100000000ULL;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR = 0x200000000ULL;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_BLIT_BIT_KHR = 0x400000000ULL;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR = 0x800000000ULL;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR = 0x1000000000ULL;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR = 0x2000000000ULL;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR = 0x4000000000ULL;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT = 0x01000000;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT = 0x00040000;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV = 0x00020000;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x00400000;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV = 0x00400000;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 0x02000000;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR = 0x00200000;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV = 0x00200000;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 0x02000000;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 0x00800000;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV = 0x00080000;
static const VkPipelineStageFlags2KHR VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV = 0x00100000;

type VkAccessFlags2KHR = VkFlags64;

// Flag bits for VkAccessFlags2KHR
static const VkAccessFlags2KHR VK_ACCESS_2_NONE_KHR = 0;
static const VkAccessFlags2KHR VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR = 0x00000001;
static const VkAccessFlags2KHR VK_ACCESS_2_INDEX_READ_BIT_KHR = 0x00000002;
static const VkAccessFlags2KHR VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR = 0x00000004;
static const VkAccessFlags2KHR VK_ACCESS_2_UNIFORM_READ_BIT_KHR = 0x00000008;
static const VkAccessFlags2KHR VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR = 0x00000010;
static const VkAccessFlags2KHR VK_ACCESS_2_SHADER_READ_BIT_KHR = 0x00000020;
static const VkAccessFlags2KHR VK_ACCESS_2_SHADER_WRITE_BIT_KHR = 0x00000040;
static const VkAccessFlags2KHR VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR = 0x00000080;
static const VkAccessFlags2KHR VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR = 0x00000100;
static const VkAccessFlags2KHR VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR = 0x00000200;
static const VkAccessFlags2KHR VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR = 0x00000400;
static const VkAccessFlags2KHR VK_ACCESS_2_TRANSFER_READ_BIT_KHR = 0x00000800;
static const VkAccessFlags2KHR VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR = 0x00001000;
static const VkAccessFlags2KHR VK_ACCESS_2_HOST_READ_BIT_KHR = 0x00002000;
static const VkAccessFlags2KHR VK_ACCESS_2_HOST_WRITE_BIT_KHR = 0x00004000;
static const VkAccessFlags2KHR VK_ACCESS_2_MEMORY_READ_BIT_KHR = 0x00008000;
static const VkAccessFlags2KHR VK_ACCESS_2_MEMORY_WRITE_BIT_KHR = 0x00010000;
static const VkAccessFlags2KHR VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR = 0x100000000ULL;
static const VkAccessFlags2KHR VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR = 0x200000000ULL;
static const VkAccessFlags2KHR VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR = 0x400000000ULL;
static const VkAccessFlags2KHR VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 0x02000000;
static const VkAccessFlags2KHR VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 0x04000000;
static const VkAccessFlags2KHR VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 0x08000000;
static const VkAccessFlags2KHR VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT = 0x00100000;
static const VkAccessFlags2KHR VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV = 0x00020000;
static const VkAccessFlags2KHR VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV = 0x00040000;
static const VkAccessFlags2KHR VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 0x00800000;
static const VkAccessFlags2KHR VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV = 0x00800000;
static const VkAccessFlags2KHR VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR = 0x00200000;
static const VkAccessFlags2KHR VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 0x00400000;
static const VkAccessFlags2KHR VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV = 0x00200000;
static const VkAccessFlags2KHR VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 0x00400000;
static const VkAccessFlags2KHR VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 0x01000000;
static const VkAccessFlags2KHR VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000;


type VkSubmitFlagBitsKHR = (
       VK_SUBMIT_PROTECTED_BIT_KHR = 0x00000001,
       VK_SUBMIT_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
     );
type VkSubmitFlagsKHR = VkFlags;
type VkMemoryBarrier2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       srcStageMask :VkPipelineStageFlags2KHR;
       srcAccessMask :VkAccessFlags2KHR;
       dstStageMask :VkPipelineStageFlags2KHR;
       dstAccessMask :VkAccessFlags2KHR;
     end;

type VkBufferMemoryBarrier2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       srcStageMask :VkPipelineStageFlags2KHR;
       srcAccessMask :VkAccessFlags2KHR;
       dstStageMask :VkPipelineStageFlags2KHR;
       dstAccessMask :VkAccessFlags2KHR;
       srcQueueFamilyIndex :uint32_t;
       dstQueueFamilyIndex :uint32_t;
       buffer :VkBuffer;
       offset :VkDeviceSize;
       size :VkDeviceSize;
     end;

type VkImageMemoryBarrier2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       srcStageMask :VkPipelineStageFlags2KHR;
       srcAccessMask :VkAccessFlags2KHR;
       dstStageMask :VkPipelineStageFlags2KHR;
       dstAccessMask :VkAccessFlags2KHR;
       oldLayout :VkImageLayout;
       newLayout :VkImageLayout;
       srcQueueFamilyIndex :uint32_t;
       dstQueueFamilyIndex :uint32_t;
       image :VkImage;
       subresourceRange :VkImageSubresourceRange;
     end;

type VkDependencyInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       dependencyFlags :VkDependencyFlags;
       memoryBarrierCount :uint32_t;
       pMemoryBarriers :P_VkMemoryBarrier2KHR;
       bufferMemoryBarrierCount :uint32_t;
       pBufferMemoryBarriers :P_VkBufferMemoryBarrier2KHR;
       imageMemoryBarrierCount :uint32_t;
       pImageMemoryBarriers :P_VkImageMemoryBarrier2KHR;
     end;

type VkSemaphoreSubmitInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       semaphore :VkSemaphore;
       value :uint64_t;
       stageMask :VkPipelineStageFlags2KHR;
       deviceIndex :uint32_t;
     end;

type VkCommandBufferSubmitInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       commandBuffer :VkCommandBuffer;
       deviceMask :uint32_t;
     end;

type VkSubmitInfo2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkSubmitFlagsKHR;
       waitSemaphoreInfoCount :uint32_t;
       pWaitSemaphoreInfos :P_VkSemaphoreSubmitInfoKHR;
       commandBufferInfoCount :uint32_t;
       pCommandBufferInfos :P_VkCommandBufferSubmitInfoKHR;
       signalSemaphoreInfoCount :uint32_t;
       pSignalSemaphoreInfos :P_VkSemaphoreSubmitInfoKHR;
     end;

type VkPhysicalDeviceSynchronization2FeaturesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       synchronization2 :VkBool32;
     end;

type VkQueueFamilyCheckpointProperties2NV = record
       sType :VkStructureType;
       pNext :P_void;
       checkpointExecutionStageMask :VkPipelineStageFlags2KHR;
     end;

type VkCheckpointData2NV = record
       sType :VkStructureType;
       pNext :P_void;
       stage :VkPipelineStageFlags2KHR;
       pCheckpointMarker :P_void;
     end;

typedef void (VKAPI_PTR *PFN_vkCmdSetEvent2KHR)(VkCommandBuffer                   commandBuffer, VkEvent                                             event, const P_VkDependencyInfoKHR                          pDependencyInfo);
typedef void (VKAPI_PTR *PFN_vkCmdResetEvent2KHR)(VkCommandBuffer                   commandBuffer, VkEvent                                             event, VkPipelineStageFlags2KHR                            stageMask);
typedef void (VKAPI_PTR *PFN_vkCmdWaitEvents2KHR)(VkCommandBuffer                   commandBuffer, uint32_t                                            eventCount, const P_VkEvent                     pEvents, const P_VkDependencyInfoKHR         pDependencyInfos);
typedef void (VKAPI_PTR *PFN_vkCmdPipelineBarrier2KHR)(VkCommandBuffer                   commandBuffer, const P_VkDependencyInfoKHR                                pDependencyInfo);
typedef void (VKAPI_PTR *PFN_vkCmdWriteTimestamp2KHR)(VkCommandBuffer                   commandBuffer, VkPipelineStageFlags2KHR                            stage, VkQueryPool                                         queryPool, uint32_t                                            query);
typedef VkResult (VKAPI_PTR *PFN_vkQueueSubmit2KHR)(VkQueue                           queue, uint32_t                            submitCount, const P_VkSubmitInfo2KHR           pSubmits, VkFence           fence);
typedef void (VKAPI_PTR *PFN_vkCmdWriteBufferMarker2AMD)(VkCommandBuffer                   commandBuffer, VkPipelineStageFlags2KHR                            stage, VkBuffer                                            dstBuffer, VkDeviceSize                                        dstOffset, uint32_t                                            marker);
typedef void (VKAPI_PTR *PFN_vkGetQueueCheckpointData2NV)(VkQueue queue, P_uint32_t pCheckpointDataCount, P_VkCheckpointData2NV pCheckpointData);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdSetEvent2KHR(
    VkCommandBuffer                             commandBuffer,
    VkEvent                                     event,
    P_VkDependencyInfoKHR                       pDependencyInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdResetEvent2KHR(
    VkCommandBuffer                             commandBuffer,
    VkEvent                                     event,
    VkPipelineStageFlags2KHR                    stageMask);

VKAPI_ATTR void VKAPI_CALL vkCmdWaitEvents2KHR(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    eventCount,
    P_VkEvent                                   pEvents,
    P_VkDependencyInfoKHR                       pDependencyInfos);

VKAPI_ATTR void VKAPI_CALL vkCmdPipelineBarrier2KHR(
    VkCommandBuffer                             commandBuffer,
    P_VkDependencyInfoKHR                       pDependencyInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdWriteTimestamp2KHR(
    VkCommandBuffer                             commandBuffer,
    VkPipelineStageFlags2KHR                    stage,
    VkQueryPool                                 queryPool,
    uint32_t                                    query);

VKAPI_ATTR VkResult VKAPI_CALL vkQueueSubmit2KHR(
    VkQueue                                     queue,
    uint32_t                                    submitCount,
    P_VkSubmitInfo2KHR                          pSubmits,
    VkFence                                     fence);

VKAPI_ATTR void VKAPI_CALL vkCmdWriteBufferMarker2AMD(
    VkCommandBuffer                             commandBuffer,
    VkPipelineStageFlags2KHR                    stage,
    VkBuffer                                    dstBuffer,
    VkDeviceSize                                dstOffset,
    uint32_t                                    marker);

VKAPI_ATTR void VKAPI_CALL vkGetQueueCheckpointData2NV(
    VkQueue                                     queue,
    P_uint32_t                                  pCheckpointDataCount,
    P_VkCheckpointData2NV                       pCheckpointData);
{$ENDIF}


const VK_KHR_zero_initialize_workgroup_memory = 1;
const VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION = 1;
const VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME = 'VK_KHR_zero_initialize_workgroup_memory';
type VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       shaderZeroInitializeWorkgroupMemory :VkBool32;
     end;



const VK_KHR_workgroup_memory_explicit_layout = 1;
const VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION = 1;
const VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME = 'VK_KHR_workgroup_memory_explicit_layout';
type VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       workgroupMemoryExplicitLayout :VkBool32;
       workgroupMemoryExplicitLayoutScalarBlockLayout :VkBool32;
       workgroupMemoryExplicitLayout8BitAccess :VkBool32;
       workgroupMemoryExplicitLayout16BitAccess :VkBool32;
     end;



const VK_KHR_copy_commands2 = 1;
const VK_KHR_COPY_COMMANDS_2_SPEC_VERSION = 1;
const VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME = 'VK_KHR_copy_commands2';
type VkBufferCopy2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       srcOffset :VkDeviceSize;
       dstOffset :VkDeviceSize;
       size :VkDeviceSize;
     end;

type VkCopyBufferInfo2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       srcBuffer :VkBuffer;
       dstBuffer :VkBuffer;
       regionCount :uint32_t;
       pRegions :P_VkBufferCopy2KHR;
     end;

type VkImageCopy2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       srcSubresource :VkImageSubresourceLayers;
       srcOffset :VkOffset3D;
       dstSubresource :VkImageSubresourceLayers;
       dstOffset :VkOffset3D;
       extent :VkExtent3D;
     end;

type VkCopyImageInfo2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       srcImage :VkImage;
       srcImageLayout :VkImageLayout;
       dstImage :VkImage;
       dstImageLayout :VkImageLayout;
       regionCount :uint32_t;
       pRegions :P_VkImageCopy2KHR;
     end;

type VkBufferImageCopy2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       bufferOffset :VkDeviceSize;
       bufferRowLength :uint32_t;
       bufferImageHeight :uint32_t;
       imageSubresource :VkImageSubresourceLayers;
       imageOffset :VkOffset3D;
       imageExtent :VkExtent3D;
     end;

type VkCopyBufferToImageInfo2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       srcBuffer :VkBuffer;
       dstImage :VkImage;
       dstImageLayout :VkImageLayout;
       regionCount :uint32_t;
       pRegions :P_VkBufferImageCopy2KHR;
     end;

type VkCopyImageToBufferInfo2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       srcImage :VkImage;
       srcImageLayout :VkImageLayout;
       dstBuffer :VkBuffer;
       regionCount :uint32_t;
       pRegions :P_VkBufferImageCopy2KHR;
     end;

type VkImageBlit2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       srcSubresource :VkImageSubresourceLayers;
       srcOffsets :array [ 0..2-1 ] of VkOffset3D;
       dstSubresource :VkImageSubresourceLayers;
       dstOffsets :array [ 0..2-1 ] of VkOffset3D;
     end;

type VkBlitImageInfo2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       srcImage :VkImage;
       srcImageLayout :VkImageLayout;
       dstImage :VkImage;
       dstImageLayout :VkImageLayout;
       regionCount :uint32_t;
       pRegions :P_VkImageBlit2KHR;
       filter :VkFilter;
     end;

type VkImageResolve2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       srcSubresource :VkImageSubresourceLayers;
       srcOffset :VkOffset3D;
       dstSubresource :VkImageSubresourceLayers;
       dstOffset :VkOffset3D;
       extent :VkExtent3D;
     end;

type VkResolveImageInfo2KHR = record
       sType :VkStructureType;
       pNext :P_void;
       srcImage :VkImage;
       srcImageLayout :VkImageLayout;
       dstImage :VkImage;
       dstImageLayout :VkImageLayout;
       regionCount :uint32_t;
       pRegions :P_VkImageResolve2KHR;
     end;

typedef void (VKAPI_PTR *PFN_vkCmdCopyBuffer2KHR)(VkCommandBuffer commandBuffer, const P_VkCopyBufferInfo2KHR pCopyBufferInfo);
typedef void (VKAPI_PTR *PFN_vkCmdCopyImage2KHR)(VkCommandBuffer commandBuffer, const P_VkCopyImageInfo2KHR pCopyImageInfo);
typedef void (VKAPI_PTR *PFN_vkCmdCopyBufferToImage2KHR)(VkCommandBuffer commandBuffer, const P_VkCopyBufferToImageInfo2KHR pCopyBufferToImageInfo);
typedef void (VKAPI_PTR *PFN_vkCmdCopyImageToBuffer2KHR)(VkCommandBuffer commandBuffer, const P_VkCopyImageToBufferInfo2KHR pCopyImageToBufferInfo);
typedef void (VKAPI_PTR *PFN_vkCmdBlitImage2KHR)(VkCommandBuffer commandBuffer, const P_VkBlitImageInfo2KHR pBlitImageInfo);
typedef void (VKAPI_PTR *PFN_vkCmdResolveImage2KHR)(VkCommandBuffer commandBuffer, const P_VkResolveImageInfo2KHR pResolveImageInfo);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdCopyBuffer2KHR(
    VkCommandBuffer                             commandBuffer,
    P_VkCopyBufferInfo2KHR                      pCopyBufferInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdCopyImage2KHR(
    VkCommandBuffer                             commandBuffer,
    P_VkCopyImageInfo2KHR                       pCopyImageInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdCopyBufferToImage2KHR(
    VkCommandBuffer                             commandBuffer,
    P_VkCopyBufferToImageInfo2KHR               pCopyBufferToImageInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdCopyImageToBuffer2KHR(
    VkCommandBuffer                             commandBuffer,
    P_VkCopyImageToBufferInfo2KHR               pCopyImageToBufferInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdBlitImage2KHR(
    VkCommandBuffer                             commandBuffer,
    P_VkBlitImageInfo2KHR                       pBlitImageInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdResolveImage2KHR(
    VkCommandBuffer                             commandBuffer,
    P_VkResolveImageInfo2KHR                    pResolveImageInfo);
{$ENDIF}


const VK_EXT_debug_report = 1;
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDebugReportCallbackEXT)
const VK_EXT_DEBUG_REPORT_SPEC_VERSION  = 9;
const VK_EXT_DEBUG_REPORT_EXTENSION_NAME = 'VK_EXT_debug_report';

type VkDebugReportObjectTypeEXT = (
       VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
       VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
       VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
       VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
       VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
       VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
       VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
       VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
       VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
       VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
       VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
       VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
       VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
       VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
       VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
       VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
       VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
       VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
       VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
       VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
       VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
       VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
       VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
       VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
       VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
       VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
       VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
       VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
       VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
       VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29,
       VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30,
       VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33,
       VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000,
       VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000,
       VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000,
       VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000,
       VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
       VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
       VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,
       VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,
       VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
     );

type VkDebugReportFlagBitsEXT = (
       VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 0x00000001,
       VK_DEBUG_REPORT_WARNING_BIT_EXT = 0x00000002,
       VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 0x00000004,
       VK_DEBUG_REPORT_ERROR_BIT_EXT = 0x00000008,
       VK_DEBUG_REPORT_DEBUG_BIT_EXT = 0x00000010,
       VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
     );
type VkDebugReportFlagsEXT = VkFlags;
typedef VkBool32 (VKAPI_PTR *PFN_vkDebugReportCallbackEXT)(
    VkDebugReportFlagsEXT                       flags,
    VkDebugReportObjectTypeEXT                  objectType,
    uint64_t                                    object,
    size_t                                      location,
    int32_t                                     messageCode,
    P_char                                      pLayerPrefix,
    P_char                                      pMessage,
    P_void                                      pUserData);

type VkDebugReportCallbackCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkDebugReportFlagsEXT;
       pfnCallback :PFN_vkDebugReportCallbackEXT;
       pUserData :P_void;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkCreateDebugReportCallbackEXT)(VkInstance instance, const P_VkDebugReportCallbackCreateInfoEXT pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkDebugReportCallbackEXT pCallback);
typedef void (VKAPI_PTR *PFN_vkDestroyDebugReportCallbackEXT)(VkInstance instance, VkDebugReportCallbackEXT callback, const P_VkAllocationCallbacks pAllocator);
typedef void (VKAPI_PTR *PFN_vkDebugReportMessageEXT)(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const P_char pLayerPrefix, const P_char pMessage);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDebugReportCallbackEXT(
    VkInstance                                  instance,
    P_VkDebugReportCallbackCreateInfoEXT        pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkDebugReportCallbackEXT                  pCallback);

VKAPI_ATTR void VKAPI_CALL vkDestroyDebugReportCallbackEXT(
    VkInstance                                  instance,
    VkDebugReportCallbackEXT                    callback,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR void VKAPI_CALL vkDebugReportMessageEXT(
    VkInstance                                  instance,
    VkDebugReportFlagsEXT                       flags,
    VkDebugReportObjectTypeEXT                  objectType,
    uint64_t                                    object,
    size_t                                      location,
    int32_t                                     messageCode,
    P_char                                      pLayerPrefix,
    P_char                                      pMessage);
{$ENDIF}


const VK_NV_glsl_shader = 1;
const VK_NV_GLSL_SHADER_SPEC_VERSION    = 1;
const VK_NV_GLSL_SHADER_EXTENSION_NAME = 'VK_NV_glsl_shader';


const VK_EXT_depth_range_unrestricted = 1;
const VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION = 1;
const VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME = 'VK_EXT_depth_range_unrestricted';


const VK_IMG_filter_cubic = 1;
const VK_IMG_FILTER_CUBIC_SPEC_VERSION  = 1;
const VK_IMG_FILTER_CUBIC_EXTENSION_NAME = 'VK_IMG_filter_cubic';


const VK_AMD_rasterization_order = 1;
const VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION = 1;
const VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME = 'VK_AMD_rasterization_order';

type VkRasterizationOrderAMD = (
       VK_RASTERIZATION_ORDER_STRICT_AMD = 0,
       VK_RASTERIZATION_ORDER_RELAXED_AMD = 1,
       VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 0x7FFFFFFF
     );
type VkPipelineRasterizationStateRasterizationOrderAMD = record
       sType :VkStructureType;
       pNext :P_void;
       rasterizationOrder :VkRasterizationOrderAMD;
     end;



const VK_AMD_shader_trinary_minmax = 1;
const VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION = 1;
const VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME = 'VK_AMD_shader_trinary_minmax';


const VK_AMD_shader_explicit_vertex_parameter = 1;
const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION = 1;
const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME = 'VK_AMD_shader_explicit_vertex_parameter';


const VK_EXT_debug_marker = 1;
const VK_EXT_DEBUG_MARKER_SPEC_VERSION  = 4;
const VK_EXT_DEBUG_MARKER_EXTENSION_NAME = 'VK_EXT_debug_marker';
type VkDebugMarkerObjectNameInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       objectType :VkDebugReportObjectTypeEXT;
       object :uint64_t;
       pObjectName :P_char;
     end;

type VkDebugMarkerObjectTagInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       objectType :VkDebugReportObjectTypeEXT;
       object :uint64_t;
       tagName :uint64_t;
       tagSize :size_t;
       pTag :P_void;
     end;

type VkDebugMarkerMarkerInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       pMarkerName :P_char;
       color :array [ 0..4-1 ] of float;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkDebugMarkerSetObjectTagEXT)(VkDevice device, const P_VkDebugMarkerObjectTagInfoEXT pTagInfo);
typedef VkResult (VKAPI_PTR *PFN_vkDebugMarkerSetObjectNameEXT)(VkDevice device, const P_VkDebugMarkerObjectNameInfoEXT pNameInfo);
typedef void (VKAPI_PTR *PFN_vkCmdDebugMarkerBeginEXT)(VkCommandBuffer commandBuffer, const P_VkDebugMarkerMarkerInfoEXT pMarkerInfo);
typedef void (VKAPI_PTR *PFN_vkCmdDebugMarkerEndEXT)(VkCommandBuffer commandBuffer);
typedef void (VKAPI_PTR *PFN_vkCmdDebugMarkerInsertEXT)(VkCommandBuffer commandBuffer, const P_VkDebugMarkerMarkerInfoEXT pMarkerInfo);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkDebugMarkerSetObjectTagEXT(
    VkDevice                                    device,
    P_VkDebugMarkerObjectTagInfoEXT             pTagInfo);

VKAPI_ATTR VkResult VKAPI_CALL vkDebugMarkerSetObjectNameEXT(
    VkDevice                                    device,
    P_VkDebugMarkerObjectNameInfoEXT            pNameInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdDebugMarkerBeginEXT(
    VkCommandBuffer                             commandBuffer,
    P_VkDebugMarkerMarkerInfoEXT                pMarkerInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdDebugMarkerEndEXT(
    VkCommandBuffer                             commandBuffer);

VKAPI_ATTR void VKAPI_CALL vkCmdDebugMarkerInsertEXT(
    VkCommandBuffer                             commandBuffer,
    P_VkDebugMarkerMarkerInfoEXT                pMarkerInfo);
{$ENDIF}


const VK_AMD_gcn_shader = 1;
const VK_AMD_GCN_SHADER_SPEC_VERSION    = 1;
const VK_AMD_GCN_SHADER_EXTENSION_NAME = 'VK_AMD_gcn_shader';


const VK_NV_dedicated_allocation = 1;
const VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION = 1;
const VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME = 'VK_NV_dedicated_allocation';
type VkDedicatedAllocationImageCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       dedicatedAllocation :VkBool32;
     end;

type VkDedicatedAllocationBufferCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       dedicatedAllocation :VkBool32;
     end;

type VkDedicatedAllocationMemoryAllocateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       image :VkImage;
       buffer :VkBuffer;
     end;



const VK_EXT_transform_feedback = 1;
const VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION = 1;
const VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME = 'VK_EXT_transform_feedback';
type VkPipelineRasterizationStateStreamCreateFlagsEXT = VkFlags;
type VkPhysicalDeviceTransformFeedbackFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       transformFeedback :VkBool32;
       geometryStreams :VkBool32;
     end;

type VkPhysicalDeviceTransformFeedbackPropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       maxTransformFeedbackStreams :uint32_t;
       maxTransformFeedbackBuffers :uint32_t;
       maxTransformFeedbackBufferSize :VkDeviceSize;
       maxTransformFeedbackStreamDataSize :uint32_t;
       maxTransformFeedbackBufferDataSize :uint32_t;
       maxTransformFeedbackBufferDataStride :uint32_t;
       transformFeedbackQueries :VkBool32;
       transformFeedbackStreamsLinesTriangles :VkBool32;
       transformFeedbackRasterizationStreamSelect :VkBool32;
       transformFeedbackDraw :VkBool32;
     end;

type VkPipelineRasterizationStateStreamCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineRasterizationStateStreamCreateFlagsEXT;
       rasterizationStream :uint32_t;
     end;

typedef void (VKAPI_PTR *PFN_vkCmdBindTransformFeedbackBuffersEXT)(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const P_VkBuffer pBuffers, const P_VkDeviceSize pOffsets, const P_VkDeviceSize pSizes);
typedef void (VKAPI_PTR *PFN_vkCmdBeginTransformFeedbackEXT)(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const P_VkBuffer pCounterBuffers, const P_VkDeviceSize pCounterBufferOffsets);
typedef void (VKAPI_PTR *PFN_vkCmdEndTransformFeedbackEXT)(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const P_VkBuffer pCounterBuffers, const P_VkDeviceSize pCounterBufferOffsets);
typedef void (VKAPI_PTR *PFN_vkCmdBeginQueryIndexedEXT)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index);
typedef void (VKAPI_PTR *PFN_vkCmdEndQueryIndexedEXT)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index);
typedef void (VKAPI_PTR *PFN_vkCmdDrawIndirectByteCountEXT)(VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdBindTransformFeedbackBuffersEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstBinding,
    uint32_t                                    bindingCount,
    P_VkBuffer                                  pBuffers,
    P_VkDeviceSize                              pOffsets,
    P_VkDeviceSize                              pSizes);

VKAPI_ATTR void VKAPI_CALL vkCmdBeginTransformFeedbackEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstCounterBuffer,
    uint32_t                                    counterBufferCount,
    P_VkBuffer                                  pCounterBuffers,
    P_VkDeviceSize                              pCounterBufferOffsets);

VKAPI_ATTR void VKAPI_CALL vkCmdEndTransformFeedbackEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstCounterBuffer,
    uint32_t                                    counterBufferCount,
    P_VkBuffer                                  pCounterBuffers,
    P_VkDeviceSize                              pCounterBufferOffsets);

VKAPI_ATTR void VKAPI_CALL vkCmdBeginQueryIndexedEXT(
    VkCommandBuffer                             commandBuffer,
    VkQueryPool                                 queryPool,
    uint32_t                                    query,
    VkQueryControlFlags                         flags,
    uint32_t                                    index);

VKAPI_ATTR void VKAPI_CALL vkCmdEndQueryIndexedEXT(
    VkCommandBuffer                             commandBuffer,
    VkQueryPool                                 queryPool,
    uint32_t                                    query,
    uint32_t                                    index);

VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndirectByteCountEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    instanceCount,
    uint32_t                                    firstInstance,
    VkBuffer                                    counterBuffer,
    VkDeviceSize                                counterBufferOffset,
    uint32_t                                    counterOffset,
    uint32_t                                    vertexStride);
{$ENDIF}


const VK_NVX_image_view_handle = 1;
const VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION = 2;
const VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME = 'VK_NVX_image_view_handle';
type VkImageViewHandleInfoNVX = record
       sType :VkStructureType;
       pNext :P_void;
       imageView :VkImageView;
       descriptorType :VkDescriptorType;
       sampler :VkSampler;
     end;

type VkImageViewAddressPropertiesNVX = record
       sType :VkStructureType;
       pNext :P_void;
       deviceAddress :VkDeviceAddress;
       size :VkDeviceSize;
     end;

typedef uint32_t (VKAPI_PTR *PFN_vkGetImageViewHandleNVX)(VkDevice device, const P_VkImageViewHandleInfoNVX pInfo);
typedef VkResult (VKAPI_PTR *PFN_vkGetImageViewAddressNVX)(VkDevice device, VkImageView imageView, P_VkImageViewAddressPropertiesNVX pProperties);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR uint32_t VKAPI_CALL vkGetImageViewHandleNVX(
    VkDevice                                    device,
    P_VkImageViewHandleInfoNVX                  pInfo);

VKAPI_ATTR VkResult VKAPI_CALL vkGetImageViewAddressNVX(
    VkDevice                                    device,
    VkImageView                                 imageView,
    P_VkImageViewAddressPropertiesNVX           pProperties);
{$ENDIF}


const VK_AMD_draw_indirect_count = 1;
const VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION = 2;
const VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME = 'VK_AMD_draw_indirect_count';
typedef void (VKAPI_PTR *PFN_vkCmdDrawIndirectCountAMD)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
typedef void (VKAPI_PTR *PFN_vkCmdDrawIndexedIndirectCountAMD)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndirectCountAMD(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride);

VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndexedIndirectCountAMD(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride);
{$ENDIF}


const VK_AMD_negative_viewport_height = 1;
const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION = 1;
const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME = 'VK_AMD_negative_viewport_height';


const VK_AMD_gpu_shader_half_float = 1;
const VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION = 2;
const VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME = 'VK_AMD_gpu_shader_half_float';


const VK_AMD_shader_ballot = 1;
const VK_AMD_SHADER_BALLOT_SPEC_VERSION = 1;
const VK_AMD_SHADER_BALLOT_EXTENSION_NAME = 'VK_AMD_shader_ballot';


const VK_AMD_texture_gather_bias_lod = 1;
const VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION = 1;
const VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME = 'VK_AMD_texture_gather_bias_lod';
type VkTextureLODGatherFormatPropertiesAMD = record
       sType :VkStructureType;
       pNext :P_void;
       supportsTextureGatherLODBiasAMD :VkBool32;
     end;



const VK_AMD_shader_info = 1;
const VK_AMD_SHADER_INFO_SPEC_VERSION   = 1;
const VK_AMD_SHADER_INFO_EXTENSION_NAME = 'VK_AMD_shader_info';

type VkShaderInfoTypeAMD = (
       VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0,
       VK_SHADER_INFO_TYPE_BINARY_AMD = 1,
       VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,
       VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 0x7FFFFFFF
     );
type VkShaderResourceUsageAMD = record
       numUsedVgprs :uint32_t;
       numUsedSgprs :uint32_t;
       ldsSizePerLocalWorkGroup :uint32_t;
       ldsUsageSizeInBytes :size_t;
       scratchMemUsageInBytes :size_t;
     end;

type VkShaderStatisticsInfoAMD = record
       shaderStageMask :VkShaderStageFlags;
       resourceUsage :VkShaderResourceUsageAMD;
       numPhysicalVgprs :uint32_t;
       numPhysicalSgprs :uint32_t;
       numAvailableVgprs :uint32_t;
       numAvailableSgprs :uint32_t;
       computeWorkGroupSize :array [ 0..3-1 ] of uint32_t;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkGetShaderInfoAMD)(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, P_size_t pInfoSize, P_void pInfo);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkGetShaderInfoAMD(
    VkDevice                                    device,
    VkPipeline                                  pipeline,
    VkShaderStageFlagBits                       shaderStage,
    VkShaderInfoTypeAMD                         infoType,
    P_size_t                                    pInfoSize,
    P_void                                      pInfo);
{$ENDIF}


const VK_AMD_shader_image_load_store_lod = 1;
const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION = 1;
const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME = 'VK_AMD_shader_image_load_store_lod';


const VK_NV_corner_sampled_image = 1;
const VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION = 2;
const VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME = 'VK_NV_corner_sampled_image';
type VkPhysicalDeviceCornerSampledImageFeaturesNV = record
       sType :VkStructureType;
       pNext :P_void;
       cornerSampledImage :VkBool32;
     end;



const VK_IMG_format_pvrtc = 1;
const VK_IMG_FORMAT_PVRTC_SPEC_VERSION  = 1;
const VK_IMG_FORMAT_PVRTC_EXTENSION_NAME = 'VK_IMG_format_pvrtc';


const VK_NV_external_memory_capabilities = 1;
const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1;
const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = 'VK_NV_external_memory_capabilities';

type VkExternalMemoryHandleTypeFlagBitsNV = (
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 0x00000001,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 0x00000002,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 0x00000004,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 0x00000008,
       VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
     );
type VkExternalMemoryHandleTypeFlagsNV = VkFlags;

type VkExternalMemoryFeatureFlagBitsNV = (
       VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 0x00000001,
       VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 0x00000002,
       VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 0x00000004,
       VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
     );
type VkExternalMemoryFeatureFlagsNV = VkFlags;
type VkExternalImageFormatPropertiesNV = record
       imageFormatProperties :VkImageFormatProperties;
       externalMemoryFeatures :VkExternalMemoryFeatureFlagsNV;
       exportFromImportedHandleTypes :VkExternalMemoryHandleTypeFlagsNV;
       compatibleHandleTypes :VkExternalMemoryHandleTypeFlagsNV;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, P_VkExternalImageFormatPropertiesNV pExternalImageFormatProperties);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
    VkPhysicalDevice                            physicalDevice,
    VkFormat                                    format,
    VkImageType                                 type,
    VkImageTiling                               tiling,
    VkImageUsageFlags                           usage,
    VkImageCreateFlags                          flags,
    VkExternalMemoryHandleTypeFlagsNV           externalHandleType,
    P_VkExternalImageFormatPropertiesNV         pExternalImageFormatProperties);
{$ENDIF}


const VK_NV_external_memory = 1;
const VK_NV_EXTERNAL_MEMORY_SPEC_VERSION = 1;
const VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME = 'VK_NV_external_memory';
type VkExternalMemoryImageCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       handleTypes :VkExternalMemoryHandleTypeFlagsNV;
     end;

type VkExportMemoryAllocateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       handleTypes :VkExternalMemoryHandleTypeFlagsNV;
     end;



const VK_EXT_validation_flags = 1;
const VK_EXT_VALIDATION_FLAGS_SPEC_VERSION = 2;
const VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME = 'VK_EXT_validation_flags';

type VkValidationCheckEXT = (
       VK_VALIDATION_CHECK_ALL_EXT = 0,
       VK_VALIDATION_CHECK_SHADERS_EXT = 1,
       VK_VALIDATION_CHECK_MAX_ENUM_EXT = 0x7FFFFFFF
     );
type VkValidationFlagsEXT = record
       sType :VkStructureType;
       pNext :P_void;
       disabledValidationCheckCount :uint32_t;
       pDisabledValidationChecks :P_VkValidationCheckEXT;
     end;



const VK_EXT_shader_subgroup_ballot = 1;
const VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION = 1;
const VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME = 'VK_EXT_shader_subgroup_ballot';


const VK_EXT_shader_subgroup_vote = 1;
const VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION = 1;
const VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME = 'VK_EXT_shader_subgroup_vote';


const VK_EXT_texture_compression_astc_hdr = 1;
const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION = 1;
const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME = 'VK_EXT_texture_compression_astc_hdr';
type VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       textureCompressionASTC_HDR :VkBool32;
     end;



const VK_EXT_astc_decode_mode = 1;
const VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION = 1;
const VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME = 'VK_EXT_astc_decode_mode';
type VkImageViewASTCDecodeModeEXT = record
       sType :VkStructureType;
       pNext :P_void;
       decodeMode :VkFormat;
     end;

type VkPhysicalDeviceASTCDecodeFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       decodeModeSharedExponent :VkBool32;
     end;



const VK_EXT_conditional_rendering = 1;
const VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION = 2;
const VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME = 'VK_EXT_conditional_rendering';

type VkConditionalRenderingFlagBitsEXT = (
       VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 0x00000001,
       VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
     );
type VkConditionalRenderingFlagsEXT = VkFlags;
type VkConditionalRenderingBeginInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       buffer :VkBuffer;
       offset :VkDeviceSize;
       flags :VkConditionalRenderingFlagsEXT;
     end;

type VkPhysicalDeviceConditionalRenderingFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       conditionalRendering :VkBool32;
       inheritedConditionalRendering :VkBool32;
     end;

type VkCommandBufferInheritanceConditionalRenderingInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       conditionalRenderingEnable :VkBool32;
     end;

typedef void (VKAPI_PTR *PFN_vkCmdBeginConditionalRenderingEXT)(VkCommandBuffer commandBuffer, const P_VkConditionalRenderingBeginInfoEXT pConditionalRenderingBegin);
typedef void (VKAPI_PTR *PFN_vkCmdEndConditionalRenderingEXT)(VkCommandBuffer commandBuffer);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdBeginConditionalRenderingEXT(
    VkCommandBuffer                             commandBuffer,
    P_VkConditionalRenderingBeginInfoEXT        pConditionalRenderingBegin);

VKAPI_ATTR void VKAPI_CALL vkCmdEndConditionalRenderingEXT(
    VkCommandBuffer                             commandBuffer);
{$ENDIF}


const VK_NV_clip_space_w_scaling = 1;
const VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION = 1;
const VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME = 'VK_NV_clip_space_w_scaling';
type VkViewportWScalingNV = record
       xcoeff :float;
       ycoeff :float;
     end;

type VkPipelineViewportWScalingStateCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       viewportWScalingEnable :VkBool32;
       viewportCount :uint32_t;
       pViewportWScalings :P_VkViewportWScalingNV;
     end;

typedef void (VKAPI_PTR *PFN_vkCmdSetViewportWScalingNV)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const P_VkViewportWScalingNV pViewportWScalings);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdSetViewportWScalingNV(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstViewport,
    uint32_t                                    viewportCount,
    P_VkViewportWScalingNV                      pViewportWScalings);
{$ENDIF}


const VK_EXT_direct_mode_display = 1;
const VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION = 1;
const VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME = 'VK_EXT_direct_mode_display';
typedef VkResult (VKAPI_PTR *PFN_vkReleaseDisplayEXT)(VkPhysicalDevice physicalDevice, VkDisplayKHR display);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkReleaseDisplayEXT(
    VkPhysicalDevice                            physicalDevice,
    VkDisplayKHR                                display);
{$ENDIF}


const VK_EXT_display_surface_counter = 1;
const VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION = 1;
const VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME = 'VK_EXT_display_surface_counter';

type VkSurfaceCounterFlagBitsEXT = (
       VK_SURFACE_COUNTER_VBLANK_BIT_EXT = 0x00000001,
       VK_SURFACE_COUNTER_VBLANK_EXT = VK_SURFACE_COUNTER_VBLANK_BIT_EXT,
       VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
     );
type VkSurfaceCounterFlagsEXT = VkFlags;
type VkSurfaceCapabilities2EXT = record
       sType :VkStructureType;
       pNext :P_void;
       minImageCount :uint32_t;
       maxImageCount :uint32_t;
       currentExtent :VkExtent2D;
       minImageExtent :VkExtent2D;
       maxImageExtent :VkExtent2D;
       maxImageArrayLayers :uint32_t;
       supportedTransforms :VkSurfaceTransformFlagsKHR;
       currentTransform :VkSurfaceTransformFlagBitsKHR;
       supportedCompositeAlpha :VkCompositeAlphaFlagsKHR;
       supportedUsageFlags :VkImageUsageFlags;
       supportedSurfaceCounters :VkSurfaceCounterFlagsEXT;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, P_VkSurfaceCapabilities2EXT pSurfaceCapabilities);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceCapabilities2EXT(
    VkPhysicalDevice                            physicalDevice,
    VkSurfaceKHR                                surface,
    P_VkSurfaceCapabilities2EXT                 pSurfaceCapabilities);
{$ENDIF}


const VK_EXT_display_control = 1;
const VK_EXT_DISPLAY_CONTROL_SPEC_VERSION = 1;
const VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME = 'VK_EXT_display_control';

type VkDisplayPowerStateEXT = (
       VK_DISPLAY_POWER_STATE_OFF_EXT = 0,
       VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1,
       VK_DISPLAY_POWER_STATE_ON_EXT = 2,
       VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 0x7FFFFFFF
     );

type VkDeviceEventTypeEXT = (
       VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
       VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
     );

type VkDisplayEventTypeEXT = (
       VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
       VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
     );
type VkDisplayPowerInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       powerState :VkDisplayPowerStateEXT;
     end;

type VkDeviceEventInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       deviceEvent :VkDeviceEventTypeEXT;
     end;

type VkDisplayEventInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       displayEvent :VkDisplayEventTypeEXT;
     end;

type VkSwapchainCounterCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       surfaceCounters :VkSurfaceCounterFlagsEXT;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkDisplayPowerControlEXT)(VkDevice device, VkDisplayKHR display, const P_VkDisplayPowerInfoEXT pDisplayPowerInfo);
typedef VkResult (VKAPI_PTR *PFN_vkRegisterDeviceEventEXT)(VkDevice device, const P_VkDeviceEventInfoEXT pDeviceEventInfo, const P_VkAllocationCallbacks pAllocator, P_VkFence pFence);
typedef VkResult (VKAPI_PTR *PFN_vkRegisterDisplayEventEXT)(VkDevice device, VkDisplayKHR display, const P_VkDisplayEventInfoEXT pDisplayEventInfo, const P_VkAllocationCallbacks pAllocator, P_VkFence pFence);
typedef VkResult (VKAPI_PTR *PFN_vkGetSwapchainCounterEXT)(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, P_uint64_t pCounterValue);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkDisplayPowerControlEXT(
    VkDevice                                    device,
    VkDisplayKHR                                display,
    P_VkDisplayPowerInfoEXT                     pDisplayPowerInfo);

VKAPI_ATTR VkResult VKAPI_CALL vkRegisterDeviceEventEXT(
    VkDevice                                    device,
    P_VkDeviceEventInfoEXT                      pDeviceEventInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkFence                                   pFence);

VKAPI_ATTR VkResult VKAPI_CALL vkRegisterDisplayEventEXT(
    VkDevice                                    device,
    VkDisplayKHR                                display,
    P_VkDisplayEventInfoEXT                     pDisplayEventInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkFence                                   pFence);

VKAPI_ATTR VkResult VKAPI_CALL vkGetSwapchainCounterEXT(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain,
    VkSurfaceCounterFlagBitsEXT                 counter,
    P_uint64_t                                  pCounterValue);
{$ENDIF}


const VK_GOOGLE_display_timing = 1;
const VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION = 1;
const VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME = 'VK_GOOGLE_display_timing';
type VkRefreshCycleDurationGOOGLE = record
       refreshDuration :uint64_t;
     end;

type VkPastPresentationTimingGOOGLE = record
       presentID :uint32_t;
       desiredPresentTime :uint64_t;
       actualPresentTime :uint64_t;
       earliestPresentTime :uint64_t;
       presentMargin :uint64_t;
     end;

type VkPresentTimeGOOGLE = record
       presentID :uint32_t;
       desiredPresentTime :uint64_t;
     end;

type VkPresentTimesInfoGOOGLE = record
       sType :VkStructureType;
       pNext :P_void;
       swapchainCount :uint32_t;
       pTimes :P_VkPresentTimeGOOGLE;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkGetRefreshCycleDurationGOOGLE)(VkDevice device, VkSwapchainKHR swapchain, P_VkRefreshCycleDurationGOOGLE pDisplayTimingProperties);
typedef VkResult (VKAPI_PTR *PFN_vkGetPastPresentationTimingGOOGLE)(VkDevice device, VkSwapchainKHR swapchain, P_uint32_t pPresentationTimingCount, P_VkPastPresentationTimingGOOGLE pPresentationTimings);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkGetRefreshCycleDurationGOOGLE(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain,
    P_VkRefreshCycleDurationGOOGLE              pDisplayTimingProperties);

VKAPI_ATTR VkResult VKAPI_CALL vkGetPastPresentationTimingGOOGLE(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain,
    P_uint32_t                                  pPresentationTimingCount,
    P_VkPastPresentationTimingGOOGLE            pPresentationTimings);
{$ENDIF}


const VK_NV_sample_mask_override_coverage = 1;
const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION = 1;
const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME = 'VK_NV_sample_mask_override_coverage';


const VK_NV_geometry_shader_passthrough = 1;
const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION = 1;
const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME = 'VK_NV_geometry_shader_passthrough';


const VK_NV_viewport_array2 = 1;
const VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION = 1;
const VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME = 'VK_NV_viewport_array2';


const VK_NVX_multiview_per_view_attributes = 1;
const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION = 1;
const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME = 'VK_NVX_multiview_per_view_attributes';
type VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX = record
       sType :VkStructureType;
       pNext :P_void;
       perViewPositionAllComponents :VkBool32;
     end;



const VK_NV_viewport_swizzle = 1;
const VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION = 1;
const VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME = 'VK_NV_viewport_swizzle';

type VkViewportCoordinateSwizzleNV = (
       VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
       VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
       VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
       VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
       VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
       VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
       VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
       VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,
       VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 0x7FFFFFFF
     );
type VkPipelineViewportSwizzleStateCreateFlagsNV = VkFlags;
type VkViewportSwizzleNV = record
       x :VkViewportCoordinateSwizzleNV;
       y :VkViewportCoordinateSwizzleNV;
       z :VkViewportCoordinateSwizzleNV;
       w :VkViewportCoordinateSwizzleNV;
     end;

type VkPipelineViewportSwizzleStateCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineViewportSwizzleStateCreateFlagsNV;
       viewportCount :uint32_t;
       pViewportSwizzles :P_VkViewportSwizzleNV;
     end;



const VK_EXT_discard_rectangles = 1;
const VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION = 1;
const VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME = 'VK_EXT_discard_rectangles';

type VkDiscardRectangleModeEXT = (
       VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
       VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,
       VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
     );
type VkPipelineDiscardRectangleStateCreateFlagsEXT = VkFlags;
type VkPhysicalDeviceDiscardRectanglePropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       maxDiscardRectangles :uint32_t;
     end;

type VkPipelineDiscardRectangleStateCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineDiscardRectangleStateCreateFlagsEXT;
       discardRectangleMode :VkDiscardRectangleModeEXT;
       discardRectangleCount :uint32_t;
       pDiscardRectangles :P_VkRect2D;
     end;

typedef void (VKAPI_PTR *PFN_vkCmdSetDiscardRectangleEXT)(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const P_VkRect2D pDiscardRectangles);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdSetDiscardRectangleEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstDiscardRectangle,
    uint32_t                                    discardRectangleCount,
    P_VkRect2D                                  pDiscardRectangles);
{$ENDIF}


const VK_EXT_conservative_rasterization = 1;
const VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION = 1;
const VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME = 'VK_EXT_conservative_rasterization';

type VkConservativeRasterizationModeEXT = (
       VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0,
       VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1,
       VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,
       VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
     );
type VkPipelineRasterizationConservativeStateCreateFlagsEXT = VkFlags;
type VkPhysicalDeviceConservativeRasterizationPropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       primitiveOverestimationSize :float;
       maxExtraPrimitiveOverestimationSize :float;
       extraPrimitiveOverestimationSizeGranularity :float;
       primitiveUnderestimation :VkBool32;
       conservativePointAndLineRasterization :VkBool32;
       degenerateTrianglesRasterized :VkBool32;
       degenerateLinesRasterized :VkBool32;
       fullyCoveredFragmentShaderInputVariable :VkBool32;
       conservativeRasterizationPostDepthCoverage :VkBool32;
     end;

type VkPipelineRasterizationConservativeStateCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineRasterizationConservativeStateCreateFlagsEXT;
       conservativeRasterizationMode :VkConservativeRasterizationModeEXT;
       extraPrimitiveOverestimationSize :float;
     end;



const VK_EXT_depth_clip_enable = 1;
const VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION = 1;
const VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME = 'VK_EXT_depth_clip_enable';
type VkPipelineRasterizationDepthClipStateCreateFlagsEXT = VkFlags;
type VkPhysicalDeviceDepthClipEnableFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       depthClipEnable :VkBool32;
     end;

type VkPipelineRasterizationDepthClipStateCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineRasterizationDepthClipStateCreateFlagsEXT;
       depthClipEnable :VkBool32;
     end;



const VK_EXT_swapchain_colorspace = 1;
const VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION = 4;
const VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME = 'VK_EXT_swapchain_colorspace';


const VK_EXT_hdr_metadata = 1;
const VK_EXT_HDR_METADATA_SPEC_VERSION  = 2;
const VK_EXT_HDR_METADATA_EXTENSION_NAME = 'VK_EXT_hdr_metadata';
type VkXYColorEXT = record
       x :float;
       y :float;
     end;

type VkHdrMetadataEXT = record
       sType :VkStructureType;
       pNext :P_void;
       displayPrimaryRed :VkXYColorEXT;
       displayPrimaryGreen :VkXYColorEXT;
       displayPrimaryBlue :VkXYColorEXT;
       whitePoint :VkXYColorEXT;
       maxLuminance :float;
       minLuminance :float;
       maxContentLightLevel :float;
       maxFrameAverageLightLevel :float;
     end;

typedef void (VKAPI_PTR *PFN_vkSetHdrMetadataEXT)(VkDevice device, uint32_t swapchainCount, const P_VkSwapchainKHR pSwapchains, const P_VkHdrMetadataEXT pMetadata);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkSetHdrMetadataEXT(
    VkDevice                                    device,
    uint32_t                                    swapchainCount,
    P_VkSwapchainKHR                            pSwapchains,
    P_VkHdrMetadataEXT                          pMetadata);
{$ENDIF}


const VK_EXT_external_memory_dma_buf = 1;
const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION = 1;
const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME = 'VK_EXT_external_memory_dma_buf';


const VK_EXT_queue_family_foreign = 1;
const VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION = 1;
const VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME = 'VK_EXT_queue_family_foreign';
const VK_QUEUE_FAMILY_FOREIGN_EXT       = (~0U-2);


const VK_EXT_debug_utils = 1;
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDebugUtilsMessengerEXT)
const VK_EXT_DEBUG_UTILS_SPEC_VERSION   = 2;
const VK_EXT_DEBUG_UTILS_EXTENSION_NAME = 'VK_EXT_debug_utils';
type VkDebugUtilsMessengerCallbackDataFlagsEXT = VkFlags;

type VkDebugUtilsMessageSeverityFlagBitsEXT = (
       VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 0x00000001,
       VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 0x00000010,
       VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 0x00000100,
       VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 0x00001000,
       VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
     );

type VkDebugUtilsMessageTypeFlagBitsEXT = (
       VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 0x00000001,
       VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 0x00000002,
       VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 0x00000004,
       VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
     );
type VkDebugUtilsMessageTypeFlagsEXT = VkFlags;
type VkDebugUtilsMessageSeverityFlagsEXT = VkFlags;
type VkDebugUtilsMessengerCreateFlagsEXT = VkFlags;
type VkDebugUtilsLabelEXT = record
       sType :VkStructureType;
       pNext :P_void;
       pLabelName :P_char;
       color :array [ 0..4-1 ] of float;
     end;

type VkDebugUtilsObjectNameInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       objectType :VkObjectType;
       objectHandle :uint64_t;
       pObjectName :P_char;
     end;

type VkDebugUtilsMessengerCallbackDataEXT = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkDebugUtilsMessengerCallbackDataFlagsEXT;
       pMessageIdName :P_char;
       messageIdNumber :int32_t;
       pMessage :P_char;
       queueLabelCount :uint32_t;
       pQueueLabels :P_VkDebugUtilsLabelEXT;
       cmdBufLabelCount :uint32_t;
       pCmdBufLabels :P_VkDebugUtilsLabelEXT;
       objectCount :uint32_t;
       pObjects :P_VkDebugUtilsObjectNameInfoEXT;
     end;

typedef VkBool32 (VKAPI_PTR *PFN_vkDebugUtilsMessengerCallbackEXT)(
    VkDebugUtilsMessageSeverityFlagBitsEXT           messageSeverity,
    VkDebugUtilsMessageTypeFlagsEXT                  messageTypes,
    P_VkDebugUtilsMessengerCallbackDataEXT           pCallbackData,
    P_void                                           pUserData);

type VkDebugUtilsMessengerCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkDebugUtilsMessengerCreateFlagsEXT;
       messageSeverity :VkDebugUtilsMessageSeverityFlagsEXT;
       messageType :VkDebugUtilsMessageTypeFlagsEXT;
       pfnUserCallback :PFN_vkDebugUtilsMessengerCallbackEXT;
       pUserData :P_void;
     end;

type VkDebugUtilsObjectTagInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       objectType :VkObjectType;
       objectHandle :uint64_t;
       tagName :uint64_t;
       tagSize :size_t;
       pTag :P_void;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkSetDebugUtilsObjectNameEXT)(VkDevice device, const P_VkDebugUtilsObjectNameInfoEXT pNameInfo);
typedef VkResult (VKAPI_PTR *PFN_vkSetDebugUtilsObjectTagEXT)(VkDevice device, const P_VkDebugUtilsObjectTagInfoEXT pTagInfo);
typedef void (VKAPI_PTR *PFN_vkQueueBeginDebugUtilsLabelEXT)(VkQueue queue, const P_VkDebugUtilsLabelEXT pLabelInfo);
typedef void (VKAPI_PTR *PFN_vkQueueEndDebugUtilsLabelEXT)(VkQueue queue);
typedef void (VKAPI_PTR *PFN_vkQueueInsertDebugUtilsLabelEXT)(VkQueue queue, const P_VkDebugUtilsLabelEXT pLabelInfo);
typedef void (VKAPI_PTR *PFN_vkCmdBeginDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer, const P_VkDebugUtilsLabelEXT pLabelInfo);
typedef void (VKAPI_PTR *PFN_vkCmdEndDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer);
typedef void (VKAPI_PTR *PFN_vkCmdInsertDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer, const P_VkDebugUtilsLabelEXT pLabelInfo);
typedef VkResult (VKAPI_PTR *PFN_vkCreateDebugUtilsMessengerEXT)(VkInstance instance, const P_VkDebugUtilsMessengerCreateInfoEXT pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkDebugUtilsMessengerEXT pMessenger);
typedef void (VKAPI_PTR *PFN_vkDestroyDebugUtilsMessengerEXT)(VkInstance instance, VkDebugUtilsMessengerEXT messenger, const P_VkAllocationCallbacks pAllocator);
typedef void (VKAPI_PTR *PFN_vkSubmitDebugUtilsMessageEXT)(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const P_VkDebugUtilsMessengerCallbackDataEXT pCallbackData);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkSetDebugUtilsObjectNameEXT(
    VkDevice                                    device,
    P_VkDebugUtilsObjectNameInfoEXT             pNameInfo);

VKAPI_ATTR VkResult VKAPI_CALL vkSetDebugUtilsObjectTagEXT(
    VkDevice                                    device,
    P_VkDebugUtilsObjectTagInfoEXT              pTagInfo);

VKAPI_ATTR void VKAPI_CALL vkQueueBeginDebugUtilsLabelEXT(
    VkQueue                                     queue,
    P_VkDebugUtilsLabelEXT                      pLabelInfo);

VKAPI_ATTR void VKAPI_CALL vkQueueEndDebugUtilsLabelEXT(
    VkQueue                                     queue);

VKAPI_ATTR void VKAPI_CALL vkQueueInsertDebugUtilsLabelEXT(
    VkQueue                                     queue,
    P_VkDebugUtilsLabelEXT                      pLabelInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdBeginDebugUtilsLabelEXT(
    VkCommandBuffer                             commandBuffer,
    P_VkDebugUtilsLabelEXT                      pLabelInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdEndDebugUtilsLabelEXT(
    VkCommandBuffer                             commandBuffer);

VKAPI_ATTR void VKAPI_CALL vkCmdInsertDebugUtilsLabelEXT(
    VkCommandBuffer                             commandBuffer,
    P_VkDebugUtilsLabelEXT                      pLabelInfo);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateDebugUtilsMessengerEXT(
    VkInstance                                  instance,
    P_VkDebugUtilsMessengerCreateInfoEXT        pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkDebugUtilsMessengerEXT                  pMessenger);

VKAPI_ATTR void VKAPI_CALL vkDestroyDebugUtilsMessengerEXT(
    VkInstance                                  instance,
    VkDebugUtilsMessengerEXT                    messenger,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR void VKAPI_CALL vkSubmitDebugUtilsMessageEXT(
    VkInstance                                  instance,
    VkDebugUtilsMessageSeverityFlagBitsEXT      messageSeverity,
    VkDebugUtilsMessageTypeFlagsEXT             messageTypes,
    P_VkDebugUtilsMessengerCallbackDataEXT      pCallbackData);
{$ENDIF}


const VK_EXT_sampler_filter_minmax = 1;
const VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION = 2;
const VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME = 'VK_EXT_sampler_filter_minmax';
type VkSamplerReductionModeEXT = VkSamplerReductionMode;

type VkSamplerReductionModeCreateInfoEXT = VkSamplerReductionModeCreateInfo;

type VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = VkPhysicalDeviceSamplerFilterMinmaxProperties;



const VK_AMD_gpu_shader_int16 = 1;
const VK_AMD_GPU_SHADER_INT16_SPEC_VERSION = 2;
const VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME = 'VK_AMD_gpu_shader_int16';


const VK_AMD_mixed_attachment_samples = 1;
const VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION = 1;
const VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME = 'VK_AMD_mixed_attachment_samples';


const VK_AMD_shader_fragment_mask = 1;
const VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION = 1;
const VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME = 'VK_AMD_shader_fragment_mask';


const VK_EXT_inline_uniform_block = 1;
const VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION = 1;
const VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME = 'VK_EXT_inline_uniform_block';
type VkPhysicalDeviceInlineUniformBlockFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       inlineUniformBlock :VkBool32;
       descriptorBindingInlineUniformBlockUpdateAfterBind :VkBool32;
     end;

type VkPhysicalDeviceInlineUniformBlockPropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       maxInlineUniformBlockSize :uint32_t;
       maxPerStageDescriptorInlineUniformBlocks :uint32_t;
       maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks :uint32_t;
       maxDescriptorSetInlineUniformBlocks :uint32_t;
       maxDescriptorSetUpdateAfterBindInlineUniformBlocks :uint32_t;
     end;

type VkWriteDescriptorSetInlineUniformBlockEXT = record
       sType :VkStructureType;
       pNext :P_void;
       dataSize :uint32_t;
       pData :P_void;
     end;

type VkDescriptorPoolInlineUniformBlockCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       maxInlineUniformBlockBindings :uint32_t;
     end;



const VK_EXT_shader_stencil_export = 1;
const VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION = 1;
const VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME = 'VK_EXT_shader_stencil_export';


const VK_EXT_sample_locations = 1;
const VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION = 1;
const VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME = 'VK_EXT_sample_locations';
type VkSampleLocationEXT = record
       x :float;
       y :float;
     end;

type VkSampleLocationsInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       sampleLocationsPerPixel :VkSampleCountFlagBits;
       sampleLocationGridSize :VkExtent2D;
       sampleLocationsCount :uint32_t;
       pSampleLocations :P_VkSampleLocationEXT;
     end;

type VkAttachmentSampleLocationsEXT = record
       attachmentIndex :uint32_t;
       sampleLocationsInfo :VkSampleLocationsInfoEXT;
     end;

type VkSubpassSampleLocationsEXT = record
       subpassIndex :uint32_t;
       sampleLocationsInfo :VkSampleLocationsInfoEXT;
     end;

type VkRenderPassSampleLocationsBeginInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       attachmentInitialSampleLocationsCount :uint32_t;
       pAttachmentInitialSampleLocations :P_VkAttachmentSampleLocationsEXT;
       postSubpassSampleLocationsCount :uint32_t;
       pPostSubpassSampleLocations :P_VkSubpassSampleLocationsEXT;
     end;

type VkPipelineSampleLocationsStateCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       sampleLocationsEnable :VkBool32;
       sampleLocationsInfo :VkSampleLocationsInfoEXT;
     end;

type VkPhysicalDeviceSampleLocationsPropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       sampleLocationSampleCounts :VkSampleCountFlags;
       maxSampleLocationGridSize :VkExtent2D;
       sampleLocationCoordinateRange :array [ 0..2-1 ] of float;
       sampleLocationSubPixelBits :uint32_t;
       variableSampleLocations :VkBool32;
     end;

type VkMultisamplePropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       maxSampleLocationGridSize :VkExtent2D;
     end;

typedef void (VKAPI_PTR *PFN_vkCmdSetSampleLocationsEXT)(VkCommandBuffer commandBuffer, const P_VkSampleLocationsInfoEXT pSampleLocationsInfo);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT)(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, P_VkMultisamplePropertiesEXT pMultisampleProperties);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdSetSampleLocationsEXT(
    VkCommandBuffer                             commandBuffer,
    P_VkSampleLocationsInfoEXT                  pSampleLocationsInfo);

VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceMultisamplePropertiesEXT(
    VkPhysicalDevice                            physicalDevice,
    VkSampleCountFlagBits                       samples,
    P_VkMultisamplePropertiesEXT                pMultisampleProperties);
{$ENDIF}


const VK_EXT_blend_operation_advanced = 1;
const VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION = 2;
const VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME = 'VK_EXT_blend_operation_advanced';

type VkBlendOverlapEXT = (
       VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0,
       VK_BLEND_OVERLAP_DISJOINT_EXT = 1,
       VK_BLEND_OVERLAP_CONJOINT_EXT = 2,
       VK_BLEND_OVERLAP_MAX_ENUM_EXT = 0x7FFFFFFF
     );
type VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       advancedBlendCoherentOperations :VkBool32;
     end;

type VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       advancedBlendMaxColorAttachments :uint32_t;
       advancedBlendIndependentBlend :VkBool32;
       advancedBlendNonPremultipliedSrcColor :VkBool32;
       advancedBlendNonPremultipliedDstColor :VkBool32;
       advancedBlendCorrelatedOverlap :VkBool32;
       advancedBlendAllOperations :VkBool32;
     end;

type VkPipelineColorBlendAdvancedStateCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       srcPremultiplied :VkBool32;
       dstPremultiplied :VkBool32;
       blendOverlap :VkBlendOverlapEXT;
     end;



const VK_NV_fragment_coverage_to_color = 1;
const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION = 1;
const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME = 'VK_NV_fragment_coverage_to_color';
type VkPipelineCoverageToColorStateCreateFlagsNV = VkFlags;
type VkPipelineCoverageToColorStateCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineCoverageToColorStateCreateFlagsNV;
       coverageToColorEnable :VkBool32;
       coverageToColorLocation :uint32_t;
     end;



const VK_NV_framebuffer_mixed_samples = 1;
const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION = 1;
const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME = 'VK_NV_framebuffer_mixed_samples';

type VkCoverageModulationModeNV = (
       VK_COVERAGE_MODULATION_MODE_NONE_NV = 0,
       VK_COVERAGE_MODULATION_MODE_RGB_NV = 1,
       VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2,
       VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3,
       VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 0x7FFFFFFF
     );
type VkPipelineCoverageModulationStateCreateFlagsNV = VkFlags;
type VkPipelineCoverageModulationStateCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineCoverageModulationStateCreateFlagsNV;
       coverageModulationMode :VkCoverageModulationModeNV;
       coverageModulationTableEnable :VkBool32;
       coverageModulationTableCount :uint32_t;
       pCoverageModulationTable :P_float;
     end;



const VK_NV_fill_rectangle = 1;
const VK_NV_FILL_RECTANGLE_SPEC_VERSION = 1;
const VK_NV_FILL_RECTANGLE_EXTENSION_NAME = 'VK_NV_fill_rectangle';


const VK_NV_shader_sm_builtins = 1;
const VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION = 1;
const VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME = 'VK_NV_shader_sm_builtins';
type VkPhysicalDeviceShaderSMBuiltinsPropertiesNV = record
       sType :VkStructureType;
       pNext :P_void;
       shaderSMCount :uint32_t;
       shaderWarpsPerSM :uint32_t;
     end;

type VkPhysicalDeviceShaderSMBuiltinsFeaturesNV = record
       sType :VkStructureType;
       pNext :P_void;
       shaderSMBuiltins :VkBool32;
     end;



const VK_EXT_post_depth_coverage = 1;
const VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION = 1;
const VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME = 'VK_EXT_post_depth_coverage';


const VK_EXT_image_drm_format_modifier = 1;
const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION = 1;
const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME = 'VK_EXT_image_drm_format_modifier';
type VkDrmFormatModifierPropertiesEXT = record
       drmFormatModifier :uint64_t;
       drmFormatModifierPlaneCount :uint32_t;
       drmFormatModifierTilingFeatures :VkFormatFeatureFlags;
     end;

type VkDrmFormatModifierPropertiesListEXT = record
       sType :VkStructureType;
       pNext :P_void;
       drmFormatModifierCount :uint32_t;
       pDrmFormatModifierProperties :P_VkDrmFormatModifierPropertiesEXT;
     end;

type VkPhysicalDeviceImageDrmFormatModifierInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       drmFormatModifier :uint64_t;
       sharingMode :VkSharingMode;
       queueFamilyIndexCount :uint32_t;
       pQueueFamilyIndices :P_uint32_t;
     end;

type VkImageDrmFormatModifierListCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       drmFormatModifierCount :uint32_t;
       pDrmFormatModifiers :P_uint64_t;
     end;

type VkImageDrmFormatModifierExplicitCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       drmFormatModifier :uint64_t;
       drmFormatModifierPlaneCount :uint32_t;
       pPlaneLayouts :P_VkSubresourceLayout;
     end;

type VkImageDrmFormatModifierPropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       drmFormatModifier :uint64_t;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkGetImageDrmFormatModifierPropertiesEXT)(VkDevice device, VkImage image, P_VkImageDrmFormatModifierPropertiesEXT pProperties);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkGetImageDrmFormatModifierPropertiesEXT(
    VkDevice                                    device,
    VkImage                                     image,
    P_VkImageDrmFormatModifierPropertiesEXT     pProperties);
{$ENDIF}


const VK_EXT_validation_cache = 1;
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkValidationCacheEXT)
const VK_EXT_VALIDATION_CACHE_SPEC_VERSION = 1;
const VK_EXT_VALIDATION_CACHE_EXTENSION_NAME = 'VK_EXT_validation_cache';

type VkValidationCacheHeaderVersionEXT = (
       VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1,
       VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 0x7FFFFFFF
     );
type VkValidationCacheCreateFlagsEXT = VkFlags;
type VkValidationCacheCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkValidationCacheCreateFlagsEXT;
       initialDataSize :size_t;
       pInitialData :P_void;
     end;

type VkShaderModuleValidationCacheCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       validationCache :VkValidationCacheEXT;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkCreateValidationCacheEXT)(VkDevice device, const P_VkValidationCacheCreateInfoEXT pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkValidationCacheEXT pValidationCache);
typedef void (VKAPI_PTR *PFN_vkDestroyValidationCacheEXT)(VkDevice device, VkValidationCacheEXT validationCache, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkMergeValidationCachesEXT)(VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount, const P_VkValidationCacheEXT pSrcCaches);
typedef VkResult (VKAPI_PTR *PFN_vkGetValidationCacheDataEXT)(VkDevice device, VkValidationCacheEXT validationCache, P_size_t pDataSize, P_void pData);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkCreateValidationCacheEXT(
    VkDevice                                    device,
    P_VkValidationCacheCreateInfoEXT            pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkValidationCacheEXT                      pValidationCache);

VKAPI_ATTR void VKAPI_CALL vkDestroyValidationCacheEXT(
    VkDevice                                    device,
    VkValidationCacheEXT                        validationCache,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkMergeValidationCachesEXT(
    VkDevice                                    device,
    VkValidationCacheEXT                        dstCache,
    uint32_t                                    srcCacheCount,
    P_VkValidationCacheEXT                      pSrcCaches);

VKAPI_ATTR VkResult VKAPI_CALL vkGetValidationCacheDataEXT(
    VkDevice                                    device,
    VkValidationCacheEXT                        validationCache,
    P_size_t                                    pDataSize,
    P_void                                      pData);
{$ENDIF}


const VK_EXT_descriptor_indexing = 1;
const VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION = 2;
const VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME = 'VK_EXT_descriptor_indexing';
type VkDescriptorBindingFlagBitsEXT = VkDescriptorBindingFlagBits;

type VkDescriptorBindingFlagsEXT = VkDescriptorBindingFlags;

type VkDescriptorSetLayoutBindingFlagsCreateInfoEXT = VkDescriptorSetLayoutBindingFlagsCreateInfo;

type VkPhysicalDeviceDescriptorIndexingFeaturesEXT = VkPhysicalDeviceDescriptorIndexingFeatures;

type VkPhysicalDeviceDescriptorIndexingPropertiesEXT = VkPhysicalDeviceDescriptorIndexingProperties;

type VkDescriptorSetVariableDescriptorCountAllocateInfoEXT = VkDescriptorSetVariableDescriptorCountAllocateInfo;

type VkDescriptorSetVariableDescriptorCountLayoutSupportEXT = VkDescriptorSetVariableDescriptorCountLayoutSupport;



const VK_EXT_shader_viewport_index_layer = 1;
const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION = 1;
const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME = 'VK_EXT_shader_viewport_index_layer';


const VK_NV_shading_rate_image = 1;
const VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION = 3;
const VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME = 'VK_NV_shading_rate_image';

type VkShadingRatePaletteEntryNV = (
       VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0,
       VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1,
       VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2,
       VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3,
       VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4,
       VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5,
       VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,
       VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,
       VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,
       VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
       VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10,
       VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11,
       VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 0x7FFFFFFF
     );

type VkCoarseSampleOrderTypeNV = (
       VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0,
       VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1,
       VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2,
       VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3,
       VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
     );
type VkShadingRatePaletteNV = record
       shadingRatePaletteEntryCount :uint32_t;
       pShadingRatePaletteEntries :P_VkShadingRatePaletteEntryNV;
     end;

type VkPipelineViewportShadingRateImageStateCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       shadingRateImageEnable :VkBool32;
       viewportCount :uint32_t;
       pShadingRatePalettes :P_VkShadingRatePaletteNV;
     end;

type VkPhysicalDeviceShadingRateImageFeaturesNV = record
       sType :VkStructureType;
       pNext :P_void;
       shadingRateImage :VkBool32;
       shadingRateCoarseSampleOrder :VkBool32;
     end;

type VkPhysicalDeviceShadingRateImagePropertiesNV = record
       sType :VkStructureType;
       pNext :P_void;
       shadingRateTexelSize :VkExtent2D;
       shadingRatePaletteSize :uint32_t;
       shadingRateMaxCoarseSamples :uint32_t;
     end;

type VkCoarseSampleLocationNV = record
       pixelX :uint32_t;
       pixelY :uint32_t;
       sample :uint32_t;
     end;

type VkCoarseSampleOrderCustomNV = record
       shadingRate :VkShadingRatePaletteEntryNV;
       sampleCount :uint32_t;
       sampleLocationCount :uint32_t;
       pSampleLocations :P_VkCoarseSampleLocationNV;
     end;

type VkPipelineViewportCoarseSampleOrderStateCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       sampleOrderType :VkCoarseSampleOrderTypeNV;
       customSampleOrderCount :uint32_t;
       pCustomSampleOrders :P_VkCoarseSampleOrderCustomNV;
     end;

typedef void (VKAPI_PTR *PFN_vkCmdBindShadingRateImageNV)(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout);
typedef void (VKAPI_PTR *PFN_vkCmdSetViewportShadingRatePaletteNV)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const P_VkShadingRatePaletteNV pShadingRatePalettes);
typedef void (VKAPI_PTR *PFN_vkCmdSetCoarseSampleOrderNV)(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const P_VkCoarseSampleOrderCustomNV pCustomSampleOrders);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdBindShadingRateImageNV(
    VkCommandBuffer                             commandBuffer,
    VkImageView                                 imageView,
    VkImageLayout                               imageLayout);

VKAPI_ATTR void VKAPI_CALL vkCmdSetViewportShadingRatePaletteNV(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstViewport,
    uint32_t                                    viewportCount,
    P_VkShadingRatePaletteNV                    pShadingRatePalettes);

VKAPI_ATTR void VKAPI_CALL vkCmdSetCoarseSampleOrderNV(
    VkCommandBuffer                             commandBuffer,
    VkCoarseSampleOrderTypeNV                   sampleOrderType,
    uint32_t                                    customSampleOrderCount,
    P_VkCoarseSampleOrderCustomNV               pCustomSampleOrders);
{$ENDIF}


const VK_NV_ray_tracing = 1;
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkAccelerationStructureNV)
const VK_NV_RAY_TRACING_SPEC_VERSION    = 3;
const VK_NV_RAY_TRACING_EXTENSION_NAME = 'VK_NV_ray_tracing';
const VK_SHADER_UNUSED_KHR              = (~0U);
const VK_SHADER_UNUSED_NV               = VK_SHADER_UNUSED_KHR;

type VkRayTracingShaderGroupTypeKHR = (
       VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0,
       VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1,
       VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2,
       VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR,
       VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR,
       VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR,
       VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF
     );
type VkRayTracingShaderGroupTypeNV = VkRayTracingShaderGroupTypeKHR;


type VkGeometryTypeKHR = (
       VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0,
       VK_GEOMETRY_TYPE_AABBS_KHR = 1,
       VK_GEOMETRY_TYPE_INSTANCES_KHR = 2,
       VK_GEOMETRY_TYPE_TRIANGLES_NV = VK_GEOMETRY_TYPE_TRIANGLES_KHR,
       VK_GEOMETRY_TYPE_AABBS_NV = VK_GEOMETRY_TYPE_AABBS_KHR,
       VK_GEOMETRY_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF
     );
type VkGeometryTypeNV = VkGeometryTypeKHR;


type VkAccelerationStructureTypeKHR = (
       VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0,
       VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1,
       VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2,
       VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR,
       VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR,
       VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF
     );
type VkAccelerationStructureTypeNV = VkAccelerationStructureTypeKHR;


type VkCopyAccelerationStructureModeKHR = (
       VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0,
       VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1,
       VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2,
       VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3,
       VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR,
       VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR,
       VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 0x7FFFFFFF
     );
type VkCopyAccelerationStructureModeNV = VkCopyAccelerationStructureModeKHR;


type VkAccelerationStructureMemoryRequirementsTypeNV = (
       VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0,
       VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1,
       VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2,
       VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
     );

type VkGeometryFlagBitsKHR = (
       VK_GEOMETRY_OPAQUE_BIT_KHR = 0x00000001,
       VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 0x00000002,
       VK_GEOMETRY_OPAQUE_BIT_NV = VK_GEOMETRY_OPAQUE_BIT_KHR,
       VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR,
       VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
     );
type VkGeometryFlagsKHR = VkFlags;
type VkGeometryFlagsNV = VkGeometryFlagsKHR;

type VkGeometryFlagBitsNV = VkGeometryFlagBitsKHR;


type VkGeometryInstanceFlagBitsKHR = (
       VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 0x00000001,
       VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 0x00000002,
       VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 0x00000004,
       VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 0x00000008,
       VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR,
       VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR,
       VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR,
       VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR,
       VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
     );
type VkGeometryInstanceFlagsKHR = VkFlags;
type VkGeometryInstanceFlagsNV = VkGeometryInstanceFlagsKHR;

type VkGeometryInstanceFlagBitsNV = VkGeometryInstanceFlagBitsKHR;


type VkBuildAccelerationStructureFlagBitsKHR = (
       VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 0x00000001,
       VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 0x00000002,
       VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 0x00000004,
       VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 0x00000008,
       VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 0x00000010,
       VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR,
       VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR,
       VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR,
       VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR,
       VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR,
       VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
     );
type VkBuildAccelerationStructureFlagsKHR = VkFlags;
type VkBuildAccelerationStructureFlagsNV = VkBuildAccelerationStructureFlagsKHR;

type VkBuildAccelerationStructureFlagBitsNV = VkBuildAccelerationStructureFlagBitsKHR;

type VkRayTracingShaderGroupCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       type :VkRayTracingShaderGroupTypeKHR;
       generalShader :uint32_t;
       closestHitShader :uint32_t;
       anyHitShader :uint32_t;
       intersectionShader :uint32_t;
     end;

type VkRayTracingPipelineCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineCreateFlags;
       stageCount :uint32_t;
       pStages :P_VkPipelineShaderStageCreateInfo;
       groupCount :uint32_t;
       pGroups :P_VkRayTracingShaderGroupCreateInfoNV;
       maxRecursionDepth :uint32_t;
       layout :VkPipelineLayout;
       basePipelineHandle :VkPipeline;
       basePipelineIndex :int32_t;
     end;

type VkGeometryTrianglesNV = record
       sType :VkStructureType;
       pNext :P_void;
       vertexData :VkBuffer;
       vertexOffset :VkDeviceSize;
       vertexCount :uint32_t;
       vertexStride :VkDeviceSize;
       vertexFormat :VkFormat;
       indexData :VkBuffer;
       indexOffset :VkDeviceSize;
       indexCount :uint32_t;
       indexType :VkIndexType;
       transformData :VkBuffer;
       transformOffset :VkDeviceSize;
     end;

type VkGeometryAABBNV = record
       sType :VkStructureType;
       pNext :P_void;
       aabbData :VkBuffer;
       numAABBs :uint32_t;
       stride :uint32_t;
       offset :VkDeviceSize;
     end;

type VkGeometryDataNV = record
       triangles :VkGeometryTrianglesNV;
       aabbs :VkGeometryAABBNV;
     end;

type VkGeometryNV = record
       sType :VkStructureType;
       pNext :P_void;
       geometryType :VkGeometryTypeKHR;
       geometry :VkGeometryDataNV;
       flags :VkGeometryFlagsKHR;
     end;

type VkAccelerationStructureInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       type :VkAccelerationStructureTypeNV;
       flags :VkBuildAccelerationStructureFlagsNV;
       instanceCount :uint32_t;
       geometryCount :uint32_t;
       pGeometries :P_VkGeometryNV;
     end;

type VkAccelerationStructureCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       compactedSize :VkDeviceSize;
       info :VkAccelerationStructureInfoNV;
     end;

type VkBindAccelerationStructureMemoryInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       accelerationStructure :VkAccelerationStructureNV;
       memory :VkDeviceMemory;
       memoryOffset :VkDeviceSize;
       deviceIndexCount :uint32_t;
       pDeviceIndices :P_uint32_t;
     end;

type VkWriteDescriptorSetAccelerationStructureNV = record
       sType :VkStructureType;
       pNext :P_void;
       accelerationStructureCount :uint32_t;
       pAccelerationStructures :P_VkAccelerationStructureNV;
     end;

type VkAccelerationStructureMemoryRequirementsInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       type :VkAccelerationStructureMemoryRequirementsTypeNV;
       accelerationStructure :VkAccelerationStructureNV;
     end;

type VkPhysicalDeviceRayTracingPropertiesNV = record
       sType :VkStructureType;
       pNext :P_void;
       shaderGroupHandleSize :uint32_t;
       maxRecursionDepth :uint32_t;
       maxShaderGroupStride :uint32_t;
       shaderGroupBaseAlignment :uint32_t;
       maxGeometryCount :uint64_t;
       maxInstanceCount :uint64_t;
       maxTriangleCount :uint64_t;
       maxDescriptorSetAccelerationStructures :uint32_t;
     end;

type VkTransformMatrixKHR = record
    float    matrix[3][4];
     end;

type VkTransformMatrixNV = VkTransformMatrixKHR;

type VkAabbPositionsKHR = record
       minX :float;
       minY :float;
       minZ :float;
       maxX :float;
       maxY :float;
       maxZ :float;
     end;

type VkAabbPositionsNV = VkAabbPositionsKHR;

type VkAccelerationStructureInstanceKHR = record
       transform :VkTransformMatrixKHR;
    uint32_t                      instanceCustomIndex:24;
    uint32_t                      mask:8;
    uint32_t                      instanceShaderBindingTableRecordOffset:24;
    VkGeometryInstanceFlagsKHR    flags:8;
       accelerationStructureReference :uint64_t;
     end;

type VkAccelerationStructureInstanceNV = VkAccelerationStructureInstanceKHR;

typedef VkResult (VKAPI_PTR *PFN_vkCreateAccelerationStructureNV)(VkDevice device, const P_VkAccelerationStructureCreateInfoNV pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkAccelerationStructureNV pAccelerationStructure);
typedef void (VKAPI_PTR *PFN_vkDestroyAccelerationStructureNV)(VkDevice device, VkAccelerationStructureNV accelerationStructure, const P_VkAllocationCallbacks pAllocator);
typedef void (VKAPI_PTR *PFN_vkGetAccelerationStructureMemoryRequirementsNV)(VkDevice device, const P_VkAccelerationStructureMemoryRequirementsInfoNV pInfo, P_VkMemoryRequirements2KHR pMemoryRequirements);
typedef VkResult (VKAPI_PTR *PFN_vkBindAccelerationStructureMemoryNV)(VkDevice device, uint32_t bindInfoCount, const P_VkBindAccelerationStructureMemoryInfoNV pBindInfos);
typedef void (VKAPI_PTR *PFN_vkCmdBuildAccelerationStructureNV)(VkCommandBuffer commandBuffer, const P_VkAccelerationStructureInfoNV pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset);
typedef void (VKAPI_PTR *PFN_vkCmdCopyAccelerationStructureNV)(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode);
typedef void (VKAPI_PTR *PFN_vkCmdTraceRaysNV)(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth);
typedef VkResult (VKAPI_PTR *PFN_vkCreateRayTracingPipelinesNV)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const P_VkRayTracingPipelineCreateInfoNV pCreateInfos, const P_VkAllocationCallbacks pAllocator, P_VkPipeline pPipelines);
typedef VkResult (VKAPI_PTR *PFN_vkGetRayTracingShaderGroupHandlesKHR)(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, P_void pData);
typedef VkResult (VKAPI_PTR *PFN_vkGetRayTracingShaderGroupHandlesNV)(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, P_void pData);
typedef VkResult (VKAPI_PTR *PFN_vkGetAccelerationStructureHandleNV)(VkDevice device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, P_void pData);
typedef void (VKAPI_PTR *PFN_vkCmdWriteAccelerationStructuresPropertiesNV)(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const P_VkAccelerationStructureNV pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery);
typedef VkResult (VKAPI_PTR *PFN_vkCompileDeferredNV)(VkDevice device, VkPipeline pipeline, uint32_t shader);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkCreateAccelerationStructureNV(
    VkDevice                                    device,
    P_VkAccelerationStructureCreateInfoNV       pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkAccelerationStructureNV                 pAccelerationStructure);

VKAPI_ATTR void VKAPI_CALL vkDestroyAccelerationStructureNV(
    VkDevice                                    device,
    VkAccelerationStructureNV                   accelerationStructure,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR void VKAPI_CALL vkGetAccelerationStructureMemoryRequirementsNV(
    VkDevice                                    device,
    P_VkAccelerationStructureMemoryRequirementsInfoNV      pInfo,
    P_VkMemoryRequirements2KHR                  pMemoryRequirements);

VKAPI_ATTR VkResult VKAPI_CALL vkBindAccelerationStructureMemoryNV(
    VkDevice                                    device,
    uint32_t                                    bindInfoCount,
    P_VkBindAccelerationStructureMemoryInfoNV      pBindInfos);

VKAPI_ATTR void VKAPI_CALL vkCmdBuildAccelerationStructureNV(
    VkCommandBuffer                             commandBuffer,
    P_VkAccelerationStructureInfoNV             pInfo,
    VkBuffer                                    instanceData,
    VkDeviceSize                                instanceOffset,
    VkBool32                                    update,
    VkAccelerationStructureNV                   dst,
    VkAccelerationStructureNV                   src,
    VkBuffer                                    scratch,
    VkDeviceSize                                scratchOffset);

VKAPI_ATTR void VKAPI_CALL vkCmdCopyAccelerationStructureNV(
    VkCommandBuffer                             commandBuffer,
    VkAccelerationStructureNV                   dst,
    VkAccelerationStructureNV                   src,
    VkCopyAccelerationStructureModeKHR          mode);

VKAPI_ATTR void VKAPI_CALL vkCmdTraceRaysNV(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    raygenShaderBindingTableBuffer,
    VkDeviceSize                                raygenShaderBindingOffset,
    VkBuffer                                    missShaderBindingTableBuffer,
    VkDeviceSize                                missShaderBindingOffset,
    VkDeviceSize                                missShaderBindingStride,
    VkBuffer                                    hitShaderBindingTableBuffer,
    VkDeviceSize                                hitShaderBindingOffset,
    VkDeviceSize                                hitShaderBindingStride,
    VkBuffer                                    callableShaderBindingTableBuffer,
    VkDeviceSize                                callableShaderBindingOffset,
    VkDeviceSize                                callableShaderBindingStride,
    uint32_t                                    width,
    uint32_t                                    height,
    uint32_t                                    depth);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateRayTracingPipelinesNV(
    VkDevice                                    device,
    VkPipelineCache                             pipelineCache,
    uint32_t                                    createInfoCount,
    P_VkRayTracingPipelineCreateInfoNV          pCreateInfos,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkPipeline                                pPipelines);

VKAPI_ATTR VkResult VKAPI_CALL vkGetRayTracingShaderGroupHandlesKHR(
    VkDevice                                    device,
    VkPipeline                                  pipeline,
    uint32_t                                    firstGroup,
    uint32_t                                    groupCount,
    size_t                                      dataSize,
    P_void                                      pData);

VKAPI_ATTR VkResult VKAPI_CALL vkGetRayTracingShaderGroupHandlesNV(
    VkDevice                                    device,
    VkPipeline                                  pipeline,
    uint32_t                                    firstGroup,
    uint32_t                                    groupCount,
    size_t                                      dataSize,
    P_void                                      pData);

VKAPI_ATTR VkResult VKAPI_CALL vkGetAccelerationStructureHandleNV(
    VkDevice                                    device,
    VkAccelerationStructureNV                   accelerationStructure,
    size_t                                      dataSize,
    P_void                                      pData);

VKAPI_ATTR void VKAPI_CALL vkCmdWriteAccelerationStructuresPropertiesNV(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    accelerationStructureCount,
    P_VkAccelerationStructureNV                 pAccelerationStructures,
    VkQueryType                                 queryType,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery);

VKAPI_ATTR VkResult VKAPI_CALL vkCompileDeferredNV(
    VkDevice                                    device,
    VkPipeline                                  pipeline,
    uint32_t                                    shader);
{$ENDIF}


const VK_NV_representative_fragment_test = 1;
const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION = 2;
const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME = 'VK_NV_representative_fragment_test';
type VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV = record
       sType :VkStructureType;
       pNext :P_void;
       representativeFragmentTest :VkBool32;
     end;

type VkPipelineRepresentativeFragmentTestStateCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       representativeFragmentTestEnable :VkBool32;
     end;



const VK_EXT_filter_cubic = 1;
const VK_EXT_FILTER_CUBIC_SPEC_VERSION  = 3;
const VK_EXT_FILTER_CUBIC_EXTENSION_NAME = 'VK_EXT_filter_cubic';
type VkPhysicalDeviceImageViewImageFormatInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       imageViewType :VkImageViewType;
     end;

type VkFilterCubicImageViewImageFormatPropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       filterCubic :VkBool32;
       filterCubicMinmax :VkBool32;
     end;



const VK_QCOM_render_pass_shader_resolve = 1;
const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION = 4;
const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME = 'VK_QCOM_render_pass_shader_resolve';


const VK_EXT_global_priority = 1;
const VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION = 2;
const VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME = 'VK_EXT_global_priority';

type VkQueueGlobalPriorityEXT = (
       VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128,
       VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256,
       VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512,
       VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024,
       VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT = 0x7FFFFFFF
     );
type VkDeviceQueueGlobalPriorityCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       globalPriority :VkQueueGlobalPriorityEXT;
     end;



const VK_EXT_external_memory_host = 1;
const VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION = 1;
const VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME = 'VK_EXT_external_memory_host';
type VkImportMemoryHostPointerInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       handleType :VkExternalMemoryHandleTypeFlagBits;
       pHostPointer :P_void;
     end;

type VkMemoryHostPointerPropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       memoryTypeBits :uint32_t;
     end;

type VkPhysicalDeviceExternalMemoryHostPropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       minImportedHostPointerAlignment :VkDeviceSize;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkGetMemoryHostPointerPropertiesEXT)(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const P_void pHostPointer, P_VkMemoryHostPointerPropertiesEXT pMemoryHostPointerProperties);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryHostPointerPropertiesEXT(
    VkDevice                                    device,
    VkExternalMemoryHandleTypeFlagBits          handleType,
    P_void                                      pHostPointer,
    P_VkMemoryHostPointerPropertiesEXT          pMemoryHostPointerProperties);
{$ENDIF}


const VK_AMD_buffer_marker = 1;
const VK_AMD_BUFFER_MARKER_SPEC_VERSION = 1;
const VK_AMD_BUFFER_MARKER_EXTENSION_NAME = 'VK_AMD_buffer_marker';
typedef void (VKAPI_PTR *PFN_vkCmdWriteBufferMarkerAMD)(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdWriteBufferMarkerAMD(
    VkCommandBuffer                             commandBuffer,
    VkPipelineStageFlagBits                     pipelineStage,
    VkBuffer                                    dstBuffer,
    VkDeviceSize                                dstOffset,
    uint32_t                                    marker);
{$ENDIF}


const VK_AMD_pipeline_compiler_control = 1;
const VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION = 1;
const VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME = 'VK_AMD_pipeline_compiler_control';

type VkPipelineCompilerControlFlagBitsAMD = (
       VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 0x7FFFFFFF
     );
type VkPipelineCompilerControlFlagsAMD = VkFlags;
type VkPipelineCompilerControlCreateInfoAMD = record
       sType :VkStructureType;
       pNext :P_void;
       compilerControlFlags :VkPipelineCompilerControlFlagsAMD;
     end;



const VK_EXT_calibrated_timestamps = 1;
const VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION = 1;
const VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = 'VK_EXT_calibrated_timestamps';

type VkTimeDomainEXT = (
       VK_TIME_DOMAIN_DEVICE_EXT = 0,
       VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1,
       VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2,
       VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3,
       VK_TIME_DOMAIN_MAX_ENUM_EXT = 0x7FFFFFFF
     );
type VkCalibratedTimestampInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       timeDomain :VkTimeDomainEXT;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT)(VkPhysicalDevice physicalDevice, P_uint32_t pTimeDomainCount, P_VkTimeDomainEXT pTimeDomains);
typedef VkResult (VKAPI_PTR *PFN_vkGetCalibratedTimestampsEXT)(VkDevice device, uint32_t timestampCount, const P_VkCalibratedTimestampInfoEXT pTimestampInfos, P_uint64_t pTimestamps, P_uint64_t pMaxDeviation);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(
    VkPhysicalDevice                            physicalDevice,
    P_uint32_t                                  pTimeDomainCount,
    P_VkTimeDomainEXT                           pTimeDomains);

VKAPI_ATTR VkResult VKAPI_CALL vkGetCalibratedTimestampsEXT(
    VkDevice                                    device,
    uint32_t                                    timestampCount,
    P_VkCalibratedTimestampInfoEXT              pTimestampInfos,
    P_uint64_t                                  pTimestamps,
    P_uint64_t                                  pMaxDeviation);
{$ENDIF}


const VK_AMD_shader_core_properties = 1;
const VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION = 2;
const VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME = 'VK_AMD_shader_core_properties';
type VkPhysicalDeviceShaderCorePropertiesAMD = record
       sType :VkStructureType;
       pNext :P_void;
       shaderEngineCount :uint32_t;
       shaderArraysPerEngineCount :uint32_t;
       computeUnitsPerShaderArray :uint32_t;
       simdPerComputeUnit :uint32_t;
       wavefrontsPerSimd :uint32_t;
       wavefrontSize :uint32_t;
       sgprsPerSimd :uint32_t;
       minSgprAllocation :uint32_t;
       maxSgprAllocation :uint32_t;
       sgprAllocationGranularity :uint32_t;
       vgprsPerSimd :uint32_t;
       minVgprAllocation :uint32_t;
       maxVgprAllocation :uint32_t;
       vgprAllocationGranularity :uint32_t;
     end;



const VK_AMD_memory_overallocation_behavior = 1;
const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION = 1;
const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME = 'VK_AMD_memory_overallocation_behavior';

type VkMemoryOverallocationBehaviorAMD = (
       VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0,
       VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1,
       VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2,
       VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 0x7FFFFFFF
     );
type VkDeviceMemoryOverallocationCreateInfoAMD = record
       sType :VkStructureType;
       pNext :P_void;
       overallocationBehavior :VkMemoryOverallocationBehaviorAMD;
     end;



const VK_EXT_vertex_attribute_divisor = 1;
const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = 3;
const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = 'VK_EXT_vertex_attribute_divisor';
type VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       maxVertexAttribDivisor :uint32_t;
     end;

type VkVertexInputBindingDivisorDescriptionEXT = record
       binding :uint32_t;
       divisor :uint32_t;
     end;

type VkPipelineVertexInputDivisorStateCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       vertexBindingDivisorCount :uint32_t;
       pVertexBindingDivisors :P_VkVertexInputBindingDivisorDescriptionEXT;
     end;

type VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       vertexAttributeInstanceRateDivisor :VkBool32;
       vertexAttributeInstanceRateZeroDivisor :VkBool32;
     end;



const VK_EXT_pipeline_creation_feedback = 1;
const VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION = 1;
const VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME = 'VK_EXT_pipeline_creation_feedback';

type VkPipelineCreationFeedbackFlagBitsEXT = (
       VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 0x00000001,
       VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 0x00000002,
       VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 0x00000004,
       VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
     );
type VkPipelineCreationFeedbackFlagsEXT = VkFlags;
type VkPipelineCreationFeedbackEXT = record
       flags :VkPipelineCreationFeedbackFlagsEXT;
       duration :uint64_t;
     end;

type VkPipelineCreationFeedbackCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       pPipelineCreationFeedback :P_VkPipelineCreationFeedbackEXT;
       pipelineStageCreationFeedbackCount :uint32_t;
       pPipelineStageCreationFeedbacks :P_VkPipelineCreationFeedbackEXT;
     end;



const VK_NV_shader_subgroup_partitioned = 1;
const VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION = 1;
const VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME = 'VK_NV_shader_subgroup_partitioned';


const VK_NV_compute_shader_derivatives = 1;
const VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION = 1;
const VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME = 'VK_NV_compute_shader_derivatives';
type VkPhysicalDeviceComputeShaderDerivativesFeaturesNV = record
       sType :VkStructureType;
       pNext :P_void;
       computeDerivativeGroupQuads :VkBool32;
       computeDerivativeGroupLinear :VkBool32;
     end;



const VK_NV_mesh_shader = 1;
const VK_NV_MESH_SHADER_SPEC_VERSION    = 1;
const VK_NV_MESH_SHADER_EXTENSION_NAME = 'VK_NV_mesh_shader';
type VkPhysicalDeviceMeshShaderFeaturesNV = record
       sType :VkStructureType;
       pNext :P_void;
       taskShader :VkBool32;
       meshShader :VkBool32;
     end;

type VkPhysicalDeviceMeshShaderPropertiesNV = record
       sType :VkStructureType;
       pNext :P_void;
       maxDrawMeshTasksCount :uint32_t;
       maxTaskWorkGroupInvocations :uint32_t;
       maxTaskWorkGroupSize :array [ 0..3-1 ] of uint32_t;
       maxTaskTotalMemorySize :uint32_t;
       maxTaskOutputCount :uint32_t;
       maxMeshWorkGroupInvocations :uint32_t;
       maxMeshWorkGroupSize :array [ 0..3-1 ] of uint32_t;
       maxMeshTotalMemorySize :uint32_t;
       maxMeshOutputVertices :uint32_t;
       maxMeshOutputPrimitives :uint32_t;
       maxMeshMultiviewViewCount :uint32_t;
       meshOutputPerVertexGranularity :uint32_t;
       meshOutputPerPrimitiveGranularity :uint32_t;
     end;

type VkDrawMeshTasksIndirectCommandNV = record
       taskCount :uint32_t;
       firstTask :uint32_t;
     end;

typedef void (VKAPI_PTR *PFN_vkCmdDrawMeshTasksNV)(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask);
typedef void (VKAPI_PTR *PFN_vkCmdDrawMeshTasksIndirectNV)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
typedef void (VKAPI_PTR *PFN_vkCmdDrawMeshTasksIndirectCountNV)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdDrawMeshTasksNV(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    taskCount,
    uint32_t                                    firstTask);

VKAPI_ATTR void VKAPI_CALL vkCmdDrawMeshTasksIndirectNV(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    uint32_t                                    drawCount,
    uint32_t                                    stride);

VKAPI_ATTR void VKAPI_CALL vkCmdDrawMeshTasksIndirectCountNV(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride);
{$ENDIF}


const VK_NV_fragment_shader_barycentric = 1;
const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = 1;
const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = 'VK_NV_fragment_shader_barycentric';
type VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV = record
       sType :VkStructureType;
       pNext :P_void;
       fragmentShaderBarycentric :VkBool32;
     end;



const VK_NV_shader_image_footprint = 1;
const VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION = 2;
const VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME = 'VK_NV_shader_image_footprint';
type VkPhysicalDeviceShaderImageFootprintFeaturesNV = record
       sType :VkStructureType;
       pNext :P_void;
       imageFootprint :VkBool32;
     end;



const VK_NV_scissor_exclusive = 1;
const VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION = 1;
const VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME = 'VK_NV_scissor_exclusive';
type VkPipelineViewportExclusiveScissorStateCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       exclusiveScissorCount :uint32_t;
       pExclusiveScissors :P_VkRect2D;
     end;

type VkPhysicalDeviceExclusiveScissorFeaturesNV = record
       sType :VkStructureType;
       pNext :P_void;
       exclusiveScissor :VkBool32;
     end;

typedef void (VKAPI_PTR *PFN_vkCmdSetExclusiveScissorNV)(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const P_VkRect2D pExclusiveScissors);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdSetExclusiveScissorNV(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstExclusiveScissor,
    uint32_t                                    exclusiveScissorCount,
    P_VkRect2D                                  pExclusiveScissors);
{$ENDIF}


const VK_NV_device_diagnostic_checkpoints = 1;
const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION = 2;
const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME = 'VK_NV_device_diagnostic_checkpoints';
type VkQueueFamilyCheckpointPropertiesNV = record
       sType :VkStructureType;
       pNext :P_void;
       checkpointExecutionStageMask :VkPipelineStageFlags;
     end;

type VkCheckpointDataNV = record
       sType :VkStructureType;
       pNext :P_void;
       stage :VkPipelineStageFlagBits;
       pCheckpointMarker :P_void;
     end;

typedef void (VKAPI_PTR *PFN_vkCmdSetCheckpointNV)(VkCommandBuffer commandBuffer, const P_void pCheckpointMarker);
typedef void (VKAPI_PTR *PFN_vkGetQueueCheckpointDataNV)(VkQueue queue, P_uint32_t pCheckpointDataCount, P_VkCheckpointDataNV pCheckpointData);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdSetCheckpointNV(
    VkCommandBuffer                             commandBuffer,
    P_void                                      pCheckpointMarker);

VKAPI_ATTR void VKAPI_CALL vkGetQueueCheckpointDataNV(
    VkQueue                                     queue,
    P_uint32_t                                  pCheckpointDataCount,
    P_VkCheckpointDataNV                        pCheckpointData);
{$ENDIF}


const VK_INTEL_shader_integer_functions2 = 1;
const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION = 1;
const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME = 'VK_INTEL_shader_integer_functions2';
type VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL = record
       sType :VkStructureType;
       pNext :P_void;
       shaderIntegerFunctions2 :VkBool32;
     end;



const VK_INTEL_performance_query = 1;
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPerformanceConfigurationINTEL)
const VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION = 2;
const VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME = 'VK_INTEL_performance_query';

type VkPerformanceConfigurationTypeINTEL = (
       VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0,
       VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF
     );

type VkQueryPoolSamplingModeINTEL = (
       VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0,
       VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 0x7FFFFFFF
     );

type VkPerformanceOverrideTypeINTEL = (
       VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0,
       VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1,
       VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF
     );

type VkPerformanceParameterTypeINTEL = (
       VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0,
       VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1,
       VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF
     );

type VkPerformanceValueTypeINTEL = (
       VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0,
       VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1,
       VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2,
       VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3,
       VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4,
       VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF
     );
typedef union VkPerformanceValueDataINTEL {
       value32 :uint32_t;
       value64 :uint64_t;
       valueFloat :float;
       valueBool :VkBool32;
       valueString :P_char;
} VkPerformanceValueDataINTEL;

type VkPerformanceValueINTEL = record
       type :VkPerformanceValueTypeINTEL;
       data :VkPerformanceValueDataINTEL;
     end;

type VkInitializePerformanceApiInfoINTEL = record
       sType :VkStructureType;
       pNext :P_void;
       pUserData :P_void;
     end;

type VkQueryPoolPerformanceQueryCreateInfoINTEL = record
       sType :VkStructureType;
       pNext :P_void;
       performanceCountersSampling :VkQueryPoolSamplingModeINTEL;
     end;

type VkQueryPoolCreateInfoINTEL = VkQueryPoolPerformanceQueryCreateInfoINTEL;

type VkPerformanceMarkerInfoINTEL = record
       sType :VkStructureType;
       pNext :P_void;
       marker :uint64_t;
     end;

type VkPerformanceStreamMarkerInfoINTEL = record
       sType :VkStructureType;
       pNext :P_void;
       marker :uint32_t;
     end;

type VkPerformanceOverrideInfoINTEL = record
       sType :VkStructureType;
       pNext :P_void;
       type :VkPerformanceOverrideTypeINTEL;
       enable :VkBool32;
       parameter :uint64_t;
     end;

type VkPerformanceConfigurationAcquireInfoINTEL = record
       sType :VkStructureType;
       pNext :P_void;
       type :VkPerformanceConfigurationTypeINTEL;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkInitializePerformanceApiINTEL)(VkDevice device, const P_VkInitializePerformanceApiInfoINTEL pInitializeInfo);
typedef void (VKAPI_PTR *PFN_vkUninitializePerformanceApiINTEL)(VkDevice device);
typedef VkResult (VKAPI_PTR *PFN_vkCmdSetPerformanceMarkerINTEL)(VkCommandBuffer commandBuffer, const P_VkPerformanceMarkerInfoINTEL pMarkerInfo);
typedef VkResult (VKAPI_PTR *PFN_vkCmdSetPerformanceStreamMarkerINTEL)(VkCommandBuffer commandBuffer, const P_VkPerformanceStreamMarkerInfoINTEL pMarkerInfo);
typedef VkResult (VKAPI_PTR *PFN_vkCmdSetPerformanceOverrideINTEL)(VkCommandBuffer commandBuffer, const P_VkPerformanceOverrideInfoINTEL pOverrideInfo);
typedef VkResult (VKAPI_PTR *PFN_vkAcquirePerformanceConfigurationINTEL)(VkDevice device, const P_VkPerformanceConfigurationAcquireInfoINTEL pAcquireInfo, P_VkPerformanceConfigurationINTEL pConfiguration);
typedef VkResult (VKAPI_PTR *PFN_vkReleasePerformanceConfigurationINTEL)(VkDevice device, VkPerformanceConfigurationINTEL configuration);
typedef VkResult (VKAPI_PTR *PFN_vkQueueSetPerformanceConfigurationINTEL)(VkQueue queue, VkPerformanceConfigurationINTEL configuration);
typedef VkResult (VKAPI_PTR *PFN_vkGetPerformanceParameterINTEL)(VkDevice device, VkPerformanceParameterTypeINTEL parameter, P_VkPerformanceValueINTEL pValue);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkInitializePerformanceApiINTEL(
    VkDevice                                    device,
    P_VkInitializePerformanceApiInfoINTEL       pInitializeInfo);

VKAPI_ATTR void VKAPI_CALL vkUninitializePerformanceApiINTEL(
    VkDevice                                    device);

VKAPI_ATTR VkResult VKAPI_CALL vkCmdSetPerformanceMarkerINTEL(
    VkCommandBuffer                             commandBuffer,
    P_VkPerformanceMarkerInfoINTEL              pMarkerInfo);

VKAPI_ATTR VkResult VKAPI_CALL vkCmdSetPerformanceStreamMarkerINTEL(
    VkCommandBuffer                             commandBuffer,
    P_VkPerformanceStreamMarkerInfoINTEL        pMarkerInfo);

VKAPI_ATTR VkResult VKAPI_CALL vkCmdSetPerformanceOverrideINTEL(
    VkCommandBuffer                             commandBuffer,
    P_VkPerformanceOverrideInfoINTEL            pOverrideInfo);

VKAPI_ATTR VkResult VKAPI_CALL vkAcquirePerformanceConfigurationINTEL(
    VkDevice                                    device,
    P_VkPerformanceConfigurationAcquireInfoINTEL      pAcquireInfo,
    P_VkPerformanceConfigurationINTEL           pConfiguration);

VKAPI_ATTR VkResult VKAPI_CALL vkReleasePerformanceConfigurationINTEL(
    VkDevice                                    device,
    VkPerformanceConfigurationINTEL             configuration);

VKAPI_ATTR VkResult VKAPI_CALL vkQueueSetPerformanceConfigurationINTEL(
    VkQueue                                     queue,
    VkPerformanceConfigurationINTEL             configuration);

VKAPI_ATTR VkResult VKAPI_CALL vkGetPerformanceParameterINTEL(
    VkDevice                                    device,
    VkPerformanceParameterTypeINTEL             parameter,
    P_VkPerformanceValueINTEL                   pValue);
{$ENDIF}


const VK_EXT_pci_bus_info = 1;
const VK_EXT_PCI_BUS_INFO_SPEC_VERSION  = 2;
const VK_EXT_PCI_BUS_INFO_EXTENSION_NAME = 'VK_EXT_pci_bus_info';
type VkPhysicalDevicePCIBusInfoPropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       pciDomain :uint32_t;
       pciBus :uint32_t;
       pciDevice :uint32_t;
       pciFunction :uint32_t;
     end;



const VK_AMD_display_native_hdr = 1;
const VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION = 1;
const VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME = 'VK_AMD_display_native_hdr';
type VkDisplayNativeHdrSurfaceCapabilitiesAMD = record
       sType :VkStructureType;
       pNext :P_void;
       localDimmingSupport :VkBool32;
     end;

type VkSwapchainDisplayNativeHdrCreateInfoAMD = record
       sType :VkStructureType;
       pNext :P_void;
       localDimmingEnable :VkBool32;
     end;

typedef void (VKAPI_PTR *PFN_vkSetLocalDimmingAMD)(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkSetLocalDimmingAMD(
    VkDevice                                    device,
    VkSwapchainKHR                              swapChain,
    VkBool32                                    localDimmingEnable);
{$ENDIF}


const VK_EXT_fragment_density_map = 1;
const VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION = 1;
const VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME = 'VK_EXT_fragment_density_map';
type VkPhysicalDeviceFragmentDensityMapFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       fragmentDensityMap :VkBool32;
       fragmentDensityMapDynamic :VkBool32;
       fragmentDensityMapNonSubsampledImages :VkBool32;
     end;

type VkPhysicalDeviceFragmentDensityMapPropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       minFragmentDensityTexelSize :VkExtent2D;
       maxFragmentDensityTexelSize :VkExtent2D;
       fragmentDensityInvocations :VkBool32;
     end;

type VkRenderPassFragmentDensityMapCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       fragmentDensityMapAttachment :VkAttachmentReference;
     end;



const VK_EXT_scalar_block_layout = 1;
const VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION = 1;
const VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME = 'VK_EXT_scalar_block_layout';
type VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = VkPhysicalDeviceScalarBlockLayoutFeatures;



const VK_GOOGLE_hlsl_functionality1 = 1;
const VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION = 1;
const VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME = 'VK_GOOGLE_hlsl_functionality1';


const VK_GOOGLE_decorate_string = 1;
const VK_GOOGLE_DECORATE_STRING_SPEC_VERSION = 1;
const VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME = 'VK_GOOGLE_decorate_string';


const VK_EXT_subgroup_size_control = 1;
const VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION = 2;
const VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME = 'VK_EXT_subgroup_size_control';
type VkPhysicalDeviceSubgroupSizeControlFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       subgroupSizeControl :VkBool32;
       computeFullSubgroups :VkBool32;
     end;

type VkPhysicalDeviceSubgroupSizeControlPropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       minSubgroupSize :uint32_t;
       maxSubgroupSize :uint32_t;
       maxComputeWorkgroupSubgroups :uint32_t;
       requiredSubgroupSizeStages :VkShaderStageFlags;
     end;

type VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       requiredSubgroupSize :uint32_t;
     end;



const VK_AMD_shader_core_properties2 = 1;
const VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION = 1;
const VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME = 'VK_AMD_shader_core_properties2';

type VkShaderCorePropertiesFlagBitsAMD = (
       VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 0x7FFFFFFF
     );
type VkShaderCorePropertiesFlagsAMD = VkFlags;
type VkPhysicalDeviceShaderCoreProperties2AMD = record
       sType :VkStructureType;
       pNext :P_void;
       shaderCoreFeatures :VkShaderCorePropertiesFlagsAMD;
       activeComputeUnitCount :uint32_t;
     end;



const VK_AMD_device_coherent_memory = 1;
const VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION = 1;
const VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME = 'VK_AMD_device_coherent_memory';
type VkPhysicalDeviceCoherentMemoryFeaturesAMD = record
       sType :VkStructureType;
       pNext :P_void;
       deviceCoherentMemory :VkBool32;
     end;



const VK_EXT_shader_image_atomic_int64 = 1;
const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION = 1;
const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME = 'VK_EXT_shader_image_atomic_int64';
type VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       shaderImageInt64Atomics :VkBool32;
       sparseImageInt64Atomics :VkBool32;
     end;



const VK_EXT_memory_budget = 1;
const VK_EXT_MEMORY_BUDGET_SPEC_VERSION = 1;
const VK_EXT_MEMORY_BUDGET_EXTENSION_NAME = 'VK_EXT_memory_budget';
type VkPhysicalDeviceMemoryBudgetPropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       heapBudget :array [ 0..VK_MAX_MEMORY_HEAPS-1 ] of VkDeviceSize;
       heapUsage :array [ 0..VK_MAX_MEMORY_HEAPS-1 ] of VkDeviceSize;
     end;



const VK_EXT_memory_priority = 1;
const VK_EXT_MEMORY_PRIORITY_SPEC_VERSION = 1;
const VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME = 'VK_EXT_memory_priority';
type VkPhysicalDeviceMemoryPriorityFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       memoryPriority :VkBool32;
     end;

type VkMemoryPriorityAllocateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       priority :float;
     end;



const VK_NV_dedicated_allocation_image_aliasing = 1;
const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION = 1;
const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME = 'VK_NV_dedicated_allocation_image_aliasing';
type VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV = record
       sType :VkStructureType;
       pNext :P_void;
       dedicatedAllocationImageAliasing :VkBool32;
     end;



const VK_EXT_buffer_device_address = 1;
const VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = 2;
const VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = 'VK_EXT_buffer_device_address';
type VkPhysicalDeviceBufferDeviceAddressFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       bufferDeviceAddress :VkBool32;
       bufferDeviceAddressCaptureReplay :VkBool32;
       bufferDeviceAddressMultiDevice :VkBool32;
     end;

type VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;

type VkBufferDeviceAddressInfoEXT = VkBufferDeviceAddressInfo;

type VkBufferDeviceAddressCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       deviceAddress :VkDeviceAddress;
     end;

typedef VkDeviceAddress (VKAPI_PTR *PFN_vkGetBufferDeviceAddressEXT)(VkDevice device, const P_VkBufferDeviceAddressInfo pInfo);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkDeviceAddress VKAPI_CALL vkGetBufferDeviceAddressEXT(
    VkDevice                                    device,
    P_VkBufferDeviceAddressInfo                 pInfo);
{$ENDIF}


const VK_EXT_tooling_info = 1;
const VK_EXT_TOOLING_INFO_SPEC_VERSION  = 1;
const VK_EXT_TOOLING_INFO_EXTENSION_NAME = 'VK_EXT_tooling_info';

type VkToolPurposeFlagBitsEXT = (
       VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = 0x00000001,
       VK_TOOL_PURPOSE_PROFILING_BIT_EXT = 0x00000002,
       VK_TOOL_PURPOSE_TRACING_BIT_EXT = 0x00000004,
       VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 0x00000008,
       VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 0x00000010,
       VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 0x00000020,
       VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 0x00000040,
       VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
     );
type VkToolPurposeFlagsEXT = VkFlags;
type VkPhysicalDeviceToolPropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       name :array [ 0..VK_MAX_EXTENSION_NAME_SIZE-1 ] of char;
       version :array [ 0..VK_MAX_EXTENSION_NAME_SIZE-1 ] of char;
       purposes :VkToolPurposeFlagsEXT;
       description :array [ 0..VK_MAX_DESCRIPTION_SIZE-1 ] of char;
       layer :array [ 0..VK_MAX_EXTENSION_NAME_SIZE-1 ] of char;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceToolPropertiesEXT)(VkPhysicalDevice physicalDevice, P_uint32_t pToolCount, P_VkPhysicalDeviceToolPropertiesEXT pToolProperties);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceToolPropertiesEXT(
    VkPhysicalDevice                            physicalDevice,
    P_uint32_t                                  pToolCount,
    P_VkPhysicalDeviceToolPropertiesEXT         pToolProperties);
{$ENDIF}


const VK_EXT_separate_stencil_usage = 1;
const VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION = 1;
const VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME = 'VK_EXT_separate_stencil_usage';
type VkImageStencilUsageCreateInfoEXT = VkImageStencilUsageCreateInfo;



const VK_EXT_validation_features = 1;
const VK_EXT_VALIDATION_FEATURES_SPEC_VERSION = 4;
const VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME = 'VK_EXT_validation_features';

type VkValidationFeatureEnableEXT = (
       VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0,
       VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
       VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2,
       VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3,
       VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4,
       VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 0x7FFFFFFF
     );

type VkValidationFeatureDisableEXT = (
       VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0,
       VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1,
       VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2,
       VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3,
       VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
       VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5,
       VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6,
       VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 0x7FFFFFFF
     );
type VkValidationFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       enabledValidationFeatureCount :uint32_t;
       pEnabledValidationFeatures :P_VkValidationFeatureEnableEXT;
       disabledValidationFeatureCount :uint32_t;
       pDisabledValidationFeatures :P_VkValidationFeatureDisableEXT;
     end;



const VK_NV_cooperative_matrix = 1;
const VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION = 1;
const VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME = 'VK_NV_cooperative_matrix';

type VkComponentTypeNV = (
       VK_COMPONENT_TYPE_FLOAT16_NV = 0,
       VK_COMPONENT_TYPE_FLOAT32_NV = 1,
       VK_COMPONENT_TYPE_FLOAT64_NV = 2,
       VK_COMPONENT_TYPE_SINT8_NV = 3,
       VK_COMPONENT_TYPE_SINT16_NV = 4,
       VK_COMPONENT_TYPE_SINT32_NV = 5,
       VK_COMPONENT_TYPE_SINT64_NV = 6,
       VK_COMPONENT_TYPE_UINT8_NV = 7,
       VK_COMPONENT_TYPE_UINT16_NV = 8,
       VK_COMPONENT_TYPE_UINT32_NV = 9,
       VK_COMPONENT_TYPE_UINT64_NV = 10,
       VK_COMPONENT_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
     );

type VkScopeNV = (
       VK_SCOPE_DEVICE_NV = 1,
       VK_SCOPE_WORKGROUP_NV = 2,
       VK_SCOPE_SUBGROUP_NV = 3,
       VK_SCOPE_QUEUE_FAMILY_NV = 5,
       VK_SCOPE_MAX_ENUM_NV = 0x7FFFFFFF
     );
type VkCooperativeMatrixPropertiesNV = record
       sType :VkStructureType;
       pNext :P_void;
       MSize :uint32_t;
       NSize :uint32_t;
       KSize :uint32_t;
       AType :VkComponentTypeNV;
       BType :VkComponentTypeNV;
       CType :VkComponentTypeNV;
       DType :VkComponentTypeNV;
       scope :VkScopeNV;
     end;

type VkPhysicalDeviceCooperativeMatrixFeaturesNV = record
       sType :VkStructureType;
       pNext :P_void;
       cooperativeMatrix :VkBool32;
       cooperativeMatrixRobustBufferAccess :VkBool32;
     end;

type VkPhysicalDeviceCooperativeMatrixPropertiesNV = record
       sType :VkStructureType;
       pNext :P_void;
       cooperativeMatrixSupportedStages :VkShaderStageFlags;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV)(VkPhysicalDevice physicalDevice, P_uint32_t pPropertyCount, P_VkCooperativeMatrixPropertiesNV pProperties);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(
    VkPhysicalDevice                            physicalDevice,
    P_uint32_t                                  pPropertyCount,
    P_VkCooperativeMatrixPropertiesNV           pProperties);
{$ENDIF}


const VK_NV_coverage_reduction_mode = 1;
const VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION = 1;
const VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME = 'VK_NV_coverage_reduction_mode';

type VkCoverageReductionModeNV = (
       VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0,
       VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1,
       VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 0x7FFFFFFF
     );
type VkPipelineCoverageReductionStateCreateFlagsNV = VkFlags;
type VkPhysicalDeviceCoverageReductionModeFeaturesNV = record
       sType :VkStructureType;
       pNext :P_void;
       coverageReductionMode :VkBool32;
     end;

type VkPipelineCoverageReductionStateCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineCoverageReductionStateCreateFlagsNV;
       coverageReductionMode :VkCoverageReductionModeNV;
     end;

type VkFramebufferMixedSamplesCombinationNV = record
       sType :VkStructureType;
       pNext :P_void;
       coverageReductionMode :VkCoverageReductionModeNV;
       rasterizationSamples :VkSampleCountFlagBits;
       depthStencilSamples :VkSampleCountFlags;
       colorSamples :VkSampleCountFlags;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV)(VkPhysicalDevice physicalDevice, P_uint32_t pCombinationCount, P_VkFramebufferMixedSamplesCombinationNV pCombinations);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
    VkPhysicalDevice                            physicalDevice,
    P_uint32_t                                  pCombinationCount,
    P_VkFramebufferMixedSamplesCombinationNV    pCombinations);
{$ENDIF}


const VK_EXT_fragment_shader_interlock = 1;
const VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION = 1;
const VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME = 'VK_EXT_fragment_shader_interlock';
type VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       fragmentShaderSampleInterlock :VkBool32;
       fragmentShaderPixelInterlock :VkBool32;
       fragmentShaderShadingRateInterlock :VkBool32;
     end;



const VK_EXT_ycbcr_image_arrays = 1;
const VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION = 1;
const VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME = 'VK_EXT_ycbcr_image_arrays';
type VkPhysicalDeviceYcbcrImageArraysFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       ycbcrImageArrays :VkBool32;
     end;



const VK_EXT_headless_surface = 1;
const VK_EXT_HEADLESS_SURFACE_SPEC_VERSION = 1;
const VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME = 'VK_EXT_headless_surface';
type VkHeadlessSurfaceCreateFlagsEXT = VkFlags;
type VkHeadlessSurfaceCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkHeadlessSurfaceCreateFlagsEXT;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkCreateHeadlessSurfaceEXT)(VkInstance instance, const P_VkHeadlessSurfaceCreateInfoEXT pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkSurfaceKHR pSurface);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkCreateHeadlessSurfaceEXT(
    VkInstance                                  instance,
    P_VkHeadlessSurfaceCreateInfoEXT            pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkSurfaceKHR                              pSurface);
{$ENDIF}


const VK_EXT_line_rasterization = 1;
const VK_EXT_LINE_RASTERIZATION_SPEC_VERSION = 1;
const VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME = 'VK_EXT_line_rasterization';

type VkLineRasterizationModeEXT = (
       VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0,
       VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1,
       VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2,
       VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3,
       VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
     );
type VkPhysicalDeviceLineRasterizationFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       rectangularLines :VkBool32;
       bresenhamLines :VkBool32;
       smoothLines :VkBool32;
       stippledRectangularLines :VkBool32;
       stippledBresenhamLines :VkBool32;
       stippledSmoothLines :VkBool32;
     end;

type VkPhysicalDeviceLineRasterizationPropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       lineSubPixelPrecisionBits :uint32_t;
     end;

type VkPipelineRasterizationLineStateCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       lineRasterizationMode :VkLineRasterizationModeEXT;
       stippledLineEnable :VkBool32;
       lineStippleFactor :uint32_t;
       lineStipplePattern :uint16_t;
     end;

typedef void (VKAPI_PTR *PFN_vkCmdSetLineStippleEXT)(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdSetLineStippleEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    lineStippleFactor,
    uint16_t                                    lineStipplePattern);
{$ENDIF}


const VK_EXT_shader_atomic_float = 1;
const VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION = 1;
const VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME = 'VK_EXT_shader_atomic_float';
type VkPhysicalDeviceShaderAtomicFloatFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       shaderBufferFloat32Atomics :VkBool32;
       shaderBufferFloat32AtomicAdd :VkBool32;
       shaderBufferFloat64Atomics :VkBool32;
       shaderBufferFloat64AtomicAdd :VkBool32;
       shaderSharedFloat32Atomics :VkBool32;
       shaderSharedFloat32AtomicAdd :VkBool32;
       shaderSharedFloat64Atomics :VkBool32;
       shaderSharedFloat64AtomicAdd :VkBool32;
       shaderImageFloat32Atomics :VkBool32;
       shaderImageFloat32AtomicAdd :VkBool32;
       sparseImageFloat32Atomics :VkBool32;
       sparseImageFloat32AtomicAdd :VkBool32;
     end;



const VK_EXT_host_query_reset = 1;
const VK_EXT_HOST_QUERY_RESET_SPEC_VERSION = 1;
const VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME = 'VK_EXT_host_query_reset';
type VkPhysicalDeviceHostQueryResetFeaturesEXT = VkPhysicalDeviceHostQueryResetFeatures;

typedef void (VKAPI_PTR *PFN_vkResetQueryPoolEXT)(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkResetQueryPoolEXT(
    VkDevice                                    device,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery,
    uint32_t                                    queryCount);
{$ENDIF}


const VK_EXT_index_type_uint8 = 1;
const VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION = 1;
const VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME = 'VK_EXT_index_type_uint8';
type VkPhysicalDeviceIndexTypeUint8FeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       indexTypeUint8 :VkBool32;
     end;



const VK_EXT_extended_dynamic_state = 1;
const VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION = 1;
const VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME = 'VK_EXT_extended_dynamic_state';
type VkPhysicalDeviceExtendedDynamicStateFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       extendedDynamicState :VkBool32;
     end;

typedef void (VKAPI_PTR *PFN_vkCmdSetCullModeEXT)(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode);
typedef void (VKAPI_PTR *PFN_vkCmdSetFrontFaceEXT)(VkCommandBuffer commandBuffer, VkFrontFace frontFace);
typedef void (VKAPI_PTR *PFN_vkCmdSetPrimitiveTopologyEXT)(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology);
typedef void (VKAPI_PTR *PFN_vkCmdSetViewportWithCountEXT)(VkCommandBuffer commandBuffer, uint32_t viewportCount, const P_VkViewport pViewports);
typedef void (VKAPI_PTR *PFN_vkCmdSetScissorWithCountEXT)(VkCommandBuffer commandBuffer, uint32_t scissorCount, const P_VkRect2D pScissors);
typedef void (VKAPI_PTR *PFN_vkCmdBindVertexBuffers2EXT)(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const P_VkBuffer pBuffers, const P_VkDeviceSize pOffsets, const P_VkDeviceSize pSizes, const P_VkDeviceSize pStrides);
typedef void (VKAPI_PTR *PFN_vkCmdSetDepthTestEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable);
typedef void (VKAPI_PTR *PFN_vkCmdSetDepthWriteEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable);
typedef void (VKAPI_PTR *PFN_vkCmdSetDepthCompareOpEXT)(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp);
typedef void (VKAPI_PTR *PFN_vkCmdSetDepthBoundsTestEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable);
typedef void (VKAPI_PTR *PFN_vkCmdSetStencilTestEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable);
typedef void (VKAPI_PTR *PFN_vkCmdSetStencilOpEXT)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdSetCullModeEXT(
    VkCommandBuffer                             commandBuffer,
    VkCullModeFlags                             cullMode);

VKAPI_ATTR void VKAPI_CALL vkCmdSetFrontFaceEXT(
    VkCommandBuffer                             commandBuffer,
    VkFrontFace                                 frontFace);

VKAPI_ATTR void VKAPI_CALL vkCmdSetPrimitiveTopologyEXT(
    VkCommandBuffer                             commandBuffer,
    VkPrimitiveTopology                         primitiveTopology);

VKAPI_ATTR void VKAPI_CALL vkCmdSetViewportWithCountEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    viewportCount,
    P_VkViewport                                pViewports);

VKAPI_ATTR void VKAPI_CALL vkCmdSetScissorWithCountEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    scissorCount,
    P_VkRect2D                                  pScissors);

VKAPI_ATTR void VKAPI_CALL vkCmdBindVertexBuffers2EXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstBinding,
    uint32_t                                    bindingCount,
    P_VkBuffer                                  pBuffers,
    P_VkDeviceSize                              pOffsets,
    P_VkDeviceSize                              pSizes,
    P_VkDeviceSize                              pStrides);

VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthTestEnableEXT(
    VkCommandBuffer                             commandBuffer,
    VkBool32                                    depthTestEnable);

VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthWriteEnableEXT(
    VkCommandBuffer                             commandBuffer,
    VkBool32                                    depthWriteEnable);

VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthCompareOpEXT(
    VkCommandBuffer                             commandBuffer,
    VkCompareOp                                 depthCompareOp);

VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthBoundsTestEnableEXT(
    VkCommandBuffer                             commandBuffer,
    VkBool32                                    depthBoundsTestEnable);

VKAPI_ATTR void VKAPI_CALL vkCmdSetStencilTestEnableEXT(
    VkCommandBuffer                             commandBuffer,
    VkBool32                                    stencilTestEnable);

VKAPI_ATTR void VKAPI_CALL vkCmdSetStencilOpEXT(
    VkCommandBuffer                             commandBuffer,
    VkStencilFaceFlags                          faceMask,
    VkStencilOp                                 failOp,
    VkStencilOp                                 passOp,
    VkStencilOp                                 depthFailOp,
    VkCompareOp                                 compareOp);
{$ENDIF}


const VK_EXT_shader_demote_to_helper_invocation = 1;
const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION = 1;
const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME = 'VK_EXT_shader_demote_to_helper_invocation';
type VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       shaderDemoteToHelperInvocation :VkBool32;
     end;



const VK_NV_device_generated_commands = 1;
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkIndirectCommandsLayoutNV)
const VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION = 3;
const VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = 'VK_NV_device_generated_commands';

type VkIndirectCommandsTokenTypeNV = (
       VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0,
       VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1,
       VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2,
       VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3,
       VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4,
       VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5,
       VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6,
       VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7,
       VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
     );

type VkIndirectStateFlagBitsNV = (
       VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 0x00000001,
       VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
     );
type VkIndirectStateFlagsNV = VkFlags;

type VkIndirectCommandsLayoutUsageFlagBitsNV = (
       VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 0x00000001,
       VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 0x00000002,
       VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 0x00000004,
       VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
     );
type VkIndirectCommandsLayoutUsageFlagsNV = VkFlags;
type VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV = record
       sType :VkStructureType;
       pNext :P_void;
       maxGraphicsShaderGroupCount :uint32_t;
       maxIndirectSequenceCount :uint32_t;
       maxIndirectCommandsTokenCount :uint32_t;
       maxIndirectCommandsStreamCount :uint32_t;
       maxIndirectCommandsTokenOffset :uint32_t;
       maxIndirectCommandsStreamStride :uint32_t;
       minSequencesCountBufferOffsetAlignment :uint32_t;
       minSequencesIndexBufferOffsetAlignment :uint32_t;
       minIndirectCommandsBufferOffsetAlignment :uint32_t;
     end;

type VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV = record
       sType :VkStructureType;
       pNext :P_void;
       deviceGeneratedCommands :VkBool32;
     end;

type VkGraphicsShaderGroupCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       stageCount :uint32_t;
       pStages :P_VkPipelineShaderStageCreateInfo;
       pVertexInputState :P_VkPipelineVertexInputStateCreateInfo;
       pTessellationState :P_VkPipelineTessellationStateCreateInfo;
     end;

type VkGraphicsPipelineShaderGroupsCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       groupCount :uint32_t;
       pGroups :P_VkGraphicsShaderGroupCreateInfoNV;
       pipelineCount :uint32_t;
       pPipelines :P_VkPipeline;
     end;

type VkBindShaderGroupIndirectCommandNV = record
       groupIndex :uint32_t;
     end;

type VkBindIndexBufferIndirectCommandNV = record
       bufferAddress :VkDeviceAddress;
       size :uint32_t;
       indexType :VkIndexType;
     end;

type VkBindVertexBufferIndirectCommandNV = record
       bufferAddress :VkDeviceAddress;
       size :uint32_t;
       stride :uint32_t;
     end;

type VkSetStateFlagsIndirectCommandNV = record
       data :uint32_t;
     end;

type VkIndirectCommandsStreamNV = record
       buffer :VkBuffer;
       offset :VkDeviceSize;
     end;

type VkIndirectCommandsLayoutTokenNV = record
       sType :VkStructureType;
       pNext :P_void;
       tokenType :VkIndirectCommandsTokenTypeNV;
       stream :uint32_t;
       offset :uint32_t;
       vertexBindingUnit :uint32_t;
       vertexDynamicStride :VkBool32;
       pushconstantPipelineLayout :VkPipelineLayout;
       pushconstantShaderStageFlags :VkShaderStageFlags;
       pushconstantOffset :uint32_t;
       pushconstantSize :uint32_t;
       indirectStateFlags :VkIndirectStateFlagsNV;
       indexTypeCount :uint32_t;
       pIndexTypes :P_VkIndexType;
       pIndexTypeValues :P_uint32_t;
     end;

type VkIndirectCommandsLayoutCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkIndirectCommandsLayoutUsageFlagsNV;
       pipelineBindPoint :VkPipelineBindPoint;
       tokenCount :uint32_t;
       pTokens :P_VkIndirectCommandsLayoutTokenNV;
       streamCount :uint32_t;
       pStreamStrides :P_uint32_t;
     end;

type VkGeneratedCommandsInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       pipelineBindPoint :VkPipelineBindPoint;
       pipeline :VkPipeline;
       indirectCommandsLayout :VkIndirectCommandsLayoutNV;
       streamCount :uint32_t;
       pStreams :P_VkIndirectCommandsStreamNV;
       sequencesCount :uint32_t;
       preprocessBuffer :VkBuffer;
       preprocessOffset :VkDeviceSize;
       preprocessSize :VkDeviceSize;
       sequencesCountBuffer :VkBuffer;
       sequencesCountOffset :VkDeviceSize;
       sequencesIndexBuffer :VkBuffer;
       sequencesIndexOffset :VkDeviceSize;
     end;

type VkGeneratedCommandsMemoryRequirementsInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       pipelineBindPoint :VkPipelineBindPoint;
       pipeline :VkPipeline;
       indirectCommandsLayout :VkIndirectCommandsLayoutNV;
       maxSequencesCount :uint32_t;
     end;

typedef void (VKAPI_PTR *PFN_vkGetGeneratedCommandsMemoryRequirementsNV)(VkDevice device, const P_VkGeneratedCommandsMemoryRequirementsInfoNV pInfo, P_VkMemoryRequirements2 pMemoryRequirements);
typedef void (VKAPI_PTR *PFN_vkCmdPreprocessGeneratedCommandsNV)(VkCommandBuffer commandBuffer, const P_VkGeneratedCommandsInfoNV pGeneratedCommandsInfo);
typedef void (VKAPI_PTR *PFN_vkCmdExecuteGeneratedCommandsNV)(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, const P_VkGeneratedCommandsInfoNV pGeneratedCommandsInfo);
typedef void (VKAPI_PTR *PFN_vkCmdBindPipelineShaderGroupNV)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32_t groupIndex);
typedef VkResult (VKAPI_PTR *PFN_vkCreateIndirectCommandsLayoutNV)(VkDevice device, const P_VkIndirectCommandsLayoutCreateInfoNV pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkIndirectCommandsLayoutNV pIndirectCommandsLayout);
typedef void (VKAPI_PTR *PFN_vkDestroyIndirectCommandsLayoutNV)(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, const P_VkAllocationCallbacks pAllocator);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkGetGeneratedCommandsMemoryRequirementsNV(
    VkDevice                                    device,
    P_VkGeneratedCommandsMemoryRequirementsInfoNV      pInfo,
    P_VkMemoryRequirements2                     pMemoryRequirements);

VKAPI_ATTR void VKAPI_CALL vkCmdPreprocessGeneratedCommandsNV(
    VkCommandBuffer                             commandBuffer,
    P_VkGeneratedCommandsInfoNV                 pGeneratedCommandsInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdExecuteGeneratedCommandsNV(
    VkCommandBuffer                             commandBuffer,
    VkBool32                                    isPreprocessed,
    P_VkGeneratedCommandsInfoNV                 pGeneratedCommandsInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdBindPipelineShaderGroupNV(
    VkCommandBuffer                             commandBuffer,
    VkPipelineBindPoint                         pipelineBindPoint,
    VkPipeline                                  pipeline,
    uint32_t                                    groupIndex);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateIndirectCommandsLayoutNV(
    VkDevice                                    device,
    P_VkIndirectCommandsLayoutCreateInfoNV      pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkIndirectCommandsLayoutNV                pIndirectCommandsLayout);

VKAPI_ATTR void VKAPI_CALL vkDestroyIndirectCommandsLayoutNV(
    VkDevice                                    device,
    VkIndirectCommandsLayoutNV                  indirectCommandsLayout,
    P_VkAllocationCallbacks                     pAllocator);
{$ENDIF}


const VK_EXT_texel_buffer_alignment = 1;
const VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION = 1;
const VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME = 'VK_EXT_texel_buffer_alignment';
type VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       texelBufferAlignment :VkBool32;
     end;

type VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       storageTexelBufferOffsetAlignmentBytes :VkDeviceSize;
       storageTexelBufferOffsetSingleTexelAlignment :VkBool32;
       uniformTexelBufferOffsetAlignmentBytes :VkDeviceSize;
       uniformTexelBufferOffsetSingleTexelAlignment :VkBool32;
     end;



const VK_QCOM_render_pass_transform = 1;
const VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION = 1;
const VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME = 'VK_QCOM_render_pass_transform';
type VkRenderPassTransformBeginInfoQCOM = record
       sType :VkStructureType;
       pNext :P_void;
       transform :VkSurfaceTransformFlagBitsKHR;
     end;

type VkCommandBufferInheritanceRenderPassTransformInfoQCOM = record
       sType :VkStructureType;
       pNext :P_void;
       transform :VkSurfaceTransformFlagBitsKHR;
       renderArea :VkRect2D;
     end;



const VK_EXT_device_memory_report = 1;
const VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION = 2;
const VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME = 'VK_EXT_device_memory_report';

type VkDeviceMemoryReportEventTypeEXT = (
       VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0,
       VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1,
       VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2,
       VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3,
       VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4,
       VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
     );
type VkDeviceMemoryReportFlagsEXT = VkFlags;
type VkPhysicalDeviceDeviceMemoryReportFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       deviceMemoryReport :VkBool32;
     end;

type VkDeviceMemoryReportCallbackDataEXT = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkDeviceMemoryReportFlagsEXT;
       type :VkDeviceMemoryReportEventTypeEXT;
       memoryObjectId :uint64_t;
       size :VkDeviceSize;
       objectType :VkObjectType;
       objectHandle :uint64_t;
       heapIndex :uint32_t;
     end;

typedef void (VKAPI_PTR *PFN_vkDeviceMemoryReportCallbackEXT)(
    P_VkDeviceMemoryReportCallbackDataEXT       pCallbackData,
    P_void                                      pUserData);

type VkDeviceDeviceMemoryReportCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkDeviceMemoryReportFlagsEXT;
       pfnUserCallback :PFN_vkDeviceMemoryReportCallbackEXT;
       pUserData :P_void;
     end;



const VK_EXT_robustness2 = 1;
const VK_EXT_ROBUSTNESS_2_SPEC_VERSION  = 1;
const VK_EXT_ROBUSTNESS_2_EXTENSION_NAME = 'VK_EXT_robustness2';
type VkPhysicalDeviceRobustness2FeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       robustBufferAccess2 :VkBool32;
       robustImageAccess2 :VkBool32;
       nullDescriptor :VkBool32;
     end;

type VkPhysicalDeviceRobustness2PropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       robustStorageBufferAccessSizeAlignment :VkDeviceSize;
       robustUniformBufferAccessSizeAlignment :VkDeviceSize;
     end;



const VK_EXT_custom_border_color = 1;
const VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION = 12;
const VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME = 'VK_EXT_custom_border_color';
type VkSamplerCustomBorderColorCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       customBorderColor :VkClearColorValue;
       format :VkFormat;
     end;

type VkPhysicalDeviceCustomBorderColorPropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       maxCustomBorderColorSamplers :uint32_t;
     end;

type VkPhysicalDeviceCustomBorderColorFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       customBorderColors :VkBool32;
       customBorderColorWithoutFormat :VkBool32;
     end;



const VK_GOOGLE_user_type = 1;
const VK_GOOGLE_USER_TYPE_SPEC_VERSION  = 1;
const VK_GOOGLE_USER_TYPE_EXTENSION_NAME = 'VK_GOOGLE_user_type';


const VK_EXT_private_data = 1;
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPrivateDataSlotEXT)
const VK_EXT_PRIVATE_DATA_SPEC_VERSION  = 1;
const VK_EXT_PRIVATE_DATA_EXTENSION_NAME = 'VK_EXT_private_data';

type VkPrivateDataSlotCreateFlagBitsEXT = (
       VK_PRIVATE_DATA_SLOT_CREATE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
     );
type VkPrivateDataSlotCreateFlagsEXT = VkFlags;
type VkPhysicalDevicePrivateDataFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       privateData :VkBool32;
     end;

type VkDevicePrivateDataCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       privateDataSlotRequestCount :uint32_t;
     end;

type VkPrivateDataSlotCreateInfoEXT = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPrivateDataSlotCreateFlagsEXT;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkCreatePrivateDataSlotEXT)(VkDevice device, const P_VkPrivateDataSlotCreateInfoEXT pCreateInfo, const P_VkAllocationCallbacks pAllocator, P_VkPrivateDataSlotEXT pPrivateDataSlot);
typedef void (VKAPI_PTR *PFN_vkDestroyPrivateDataSlotEXT)(VkDevice device, VkPrivateDataSlotEXT privateDataSlot, const P_VkAllocationCallbacks pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkSetPrivateDataEXT)(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlotEXT privateDataSlot, uint64_t data);
typedef void (VKAPI_PTR *PFN_vkGetPrivateDataEXT)(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlotEXT privateDataSlot, P_uint64_t pData);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkCreatePrivateDataSlotEXT(
    VkDevice                                    device,
    P_VkPrivateDataSlotCreateInfoEXT            pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkPrivateDataSlotEXT                      pPrivateDataSlot);

VKAPI_ATTR void VKAPI_CALL vkDestroyPrivateDataSlotEXT(
    VkDevice                                    device,
    VkPrivateDataSlotEXT                        privateDataSlot,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR VkResult VKAPI_CALL vkSetPrivateDataEXT(
    VkDevice                                    device,
    VkObjectType                                objectType,
    uint64_t                                    objectHandle,
    VkPrivateDataSlotEXT                        privateDataSlot,
    uint64_t                                    data);

VKAPI_ATTR void VKAPI_CALL vkGetPrivateDataEXT(
    VkDevice                                    device,
    VkObjectType                                objectType,
    uint64_t                                    objectHandle,
    VkPrivateDataSlotEXT                        privateDataSlot,
    P_uint64_t                                  pData);
{$ENDIF}


const VK_EXT_pipeline_creation_cache_control = 1;
const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION = 3;
const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME = 'VK_EXT_pipeline_creation_cache_control';
type VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       pipelineCreationCacheControl :VkBool32;
     end;



const VK_NV_device_diagnostics_config = 1;
const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION = 1;
const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME = 'VK_NV_device_diagnostics_config';

type VkDeviceDiagnosticsConfigFlagBitsNV = (
       VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 0x00000001,
       VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 0x00000002,
       VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 0x00000004,
       VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
     );
type VkDeviceDiagnosticsConfigFlagsNV = VkFlags;
type VkPhysicalDeviceDiagnosticsConfigFeaturesNV = record
       sType :VkStructureType;
       pNext :P_void;
       diagnosticsConfig :VkBool32;
     end;

type VkDeviceDiagnosticsConfigCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkDeviceDiagnosticsConfigFlagsNV;
     end;



const VK_QCOM_render_pass_store_ops = 1;
const VK_QCOM_render_pass_store_ops_SPEC_VERSION = 2;
const VK_QCOM_render_pass_store_ops_EXTENSION_NAME = 'VK_QCOM_render_pass_store_ops';


const VK_NV_fragment_shading_rate_enums = 1;
const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION = 1;
const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME = 'VK_NV_fragment_shading_rate_enums';

type VkFragmentShadingRateTypeNV = (
       VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0,
       VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1,
       VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
     );

type VkFragmentShadingRateNV = (
       VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0,
       VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1,
       VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4,
       VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5,
       VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6,
       VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
       VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10,
       VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11,
       VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12,
       VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13,
       VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14,
       VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15,
       VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = 0x7FFFFFFF
     );
type VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV = record
       sType :VkStructureType;
       pNext :P_void;
       fragmentShadingRateEnums :VkBool32;
       supersampleFragmentShadingRates :VkBool32;
       noInvocationFragmentShadingRates :VkBool32;
     end;

type VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV = record
       sType :VkStructureType;
       pNext :P_void;
       maxFragmentShadingRateInvocationCount :VkSampleCountFlagBits;
     end;

type VkPipelineFragmentShadingRateEnumStateCreateInfoNV = record
       sType :VkStructureType;
       pNext :P_void;
       shadingRateType :VkFragmentShadingRateTypeNV;
       shadingRate :VkFragmentShadingRateNV;
       combinerOps :array [ 0..2-1 ] of VkFragmentShadingRateCombinerOpKHR;
     end;

typedef void (VKAPI_PTR *PFN_vkCmdSetFragmentShadingRateEnumNV)(VkCommandBuffer           commandBuffer, VkFragmentShadingRateNV                     shadingRate, const VkFragmentShadingRateCombinerOpKHR    combinerOps[2]);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdSetFragmentShadingRateEnumNV(
    VkCommandBuffer                             commandBuffer,
    VkFragmentShadingRateNV                     shadingRate,
    const VkFragmentShadingRateCombinerOpKHR    combinerOps[2]);
{$ENDIF}


const VK_EXT_fragment_density_map2 = 1;
const VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION = 1;
const VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME = 'VK_EXT_fragment_density_map2';
type VkPhysicalDeviceFragmentDensityMap2FeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       fragmentDensityMapDeferred :VkBool32;
     end;

type VkPhysicalDeviceFragmentDensityMap2PropertiesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       subsampledLoads :VkBool32;
       subsampledCoarseReconstructionEarlyAccess :VkBool32;
       maxSubsampledArrayLayers :uint32_t;
       maxDescriptorSetSubsampledSamplers :uint32_t;
     end;



const VK_QCOM_rotated_copy_commands = 1;
const VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION = 0;
const VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME = 'VK_QCOM_rotated_copy_commands';
type VkCopyCommandTransformInfoQCOM = record
       sType :VkStructureType;
       pNext :P_void;
       transform :VkSurfaceTransformFlagBitsKHR;
     end;



const VK_EXT_image_robustness = 1;
const VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION = 1;
const VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME = 'VK_EXT_image_robustness';
type VkPhysicalDeviceImageRobustnessFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       robustImageAccess :VkBool32;
     end;



const VK_EXT_4444_formats = 1;
const VK_EXT_4444_FORMATS_SPEC_VERSION  = 1;
const VK_EXT_4444_FORMATS_EXTENSION_NAME = 'VK_EXT_4444_formats';
type VkPhysicalDevice4444FormatsFeaturesEXT = record
       sType :VkStructureType;
       pNext :P_void;
       formatA4R4G4B4 :VkBool32;
       formatA4B4G4R4 :VkBool32;
     end;



const VK_NV_acquire_winrt_display = 1;
const VK_NV_ACQUIRE_WINRT_DISPLAY_SPEC_VERSION = 1;
const VK_NV_ACQUIRE_WINRT_DISPLAY_EXTENSION_NAME = 'VK_NV_acquire_winrt_display';
typedef VkResult (VKAPI_PTR *PFN_vkAcquireWinrtDisplayNV)(VkPhysicalDevice physicalDevice, VkDisplayKHR display);
typedef VkResult (VKAPI_PTR *PFN_vkGetWinrtDisplayNV)(VkPhysicalDevice physicalDevice, uint32_t deviceRelativeId, P_VkDisplayKHR pDisplay);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkAcquireWinrtDisplayNV(
    VkPhysicalDevice                            physicalDevice,
    VkDisplayKHR                                display);

VKAPI_ATTR VkResult VKAPI_CALL vkGetWinrtDisplayNV(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    deviceRelativeId,
    P_VkDisplayKHR                              pDisplay);
{$ENDIF}


const VK_VALVE_mutable_descriptor_type = 1;
const VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION = 1;
const VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = 'VK_VALVE_mutable_descriptor_type';
type VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE = record
       sType :VkStructureType;
       pNext :P_void;
       mutableDescriptorType :VkBool32;
     end;

type VkMutableDescriptorTypeListVALVE = record
       descriptorTypeCount :uint32_t;
       pDescriptorTypes :P_VkDescriptorType;
     end;

type VkMutableDescriptorTypeCreateInfoVALVE = record
       sType :VkStructureType;
       pNext :P_void;
       mutableDescriptorTypeListCount :uint32_t;
       pMutableDescriptorTypeLists :P_VkMutableDescriptorTypeListVALVE;
     end;



const VK_KHR_acceleration_structure = 1;
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkAccelerationStructureKHR)
const VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION = 11;
const VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME = 'VK_KHR_acceleration_structure';

type VkBuildAccelerationStructureModeKHR = (
       VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0,
       VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1,
       VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 0x7FFFFFFF
     );

type VkAccelerationStructureBuildTypeKHR = (
       VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0,
       VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1,
       VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2,
       VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF
     );

type VkAccelerationStructureCompatibilityKHR = (
       VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0,
       VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1,
       VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR = 0x7FFFFFFF
     );

type VkAccelerationStructureCreateFlagBitsKHR = (
       VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 0x00000001,
       VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
     );
type VkAccelerationStructureCreateFlagsKHR = VkFlags;
typedef union VkDeviceOrHostAddressKHR {
       deviceAddress :VkDeviceAddress;
       hostAddress :P_void;
} VkDeviceOrHostAddressKHR;

typedef union VkDeviceOrHostAddressConstKHR {
       deviceAddress :VkDeviceAddress;
       hostAddress :P_void;
} VkDeviceOrHostAddressConstKHR;

type VkAccelerationStructureBuildRangeInfoKHR = record
       primitiveCount :uint32_t;
       primitiveOffset :uint32_t;
       firstVertex :uint32_t;
       transformOffset :uint32_t;
     end;

type VkAccelerationStructureGeometryTrianglesDataKHR = record
       sType :VkStructureType;
       pNext :P_void;
       vertexFormat :VkFormat;
       vertexData :VkDeviceOrHostAddressConstKHR;
       vertexStride :VkDeviceSize;
       maxVertex :uint32_t;
       indexType :VkIndexType;
       indexData :VkDeviceOrHostAddressConstKHR;
       transformData :VkDeviceOrHostAddressConstKHR;
     end;

type VkAccelerationStructureGeometryAabbsDataKHR = record
       sType :VkStructureType;
       pNext :P_void;
       data :VkDeviceOrHostAddressConstKHR;
       stride :VkDeviceSize;
     end;

type VkAccelerationStructureGeometryInstancesDataKHR = record
       sType :VkStructureType;
       pNext :P_void;
       arrayOfPointers :VkBool32;
       data :VkDeviceOrHostAddressConstKHR;
     end;

typedef union VkAccelerationStructureGeometryDataKHR {
       triangles :VkAccelerationStructureGeometryTrianglesDataKHR;
       aabbs :VkAccelerationStructureGeometryAabbsDataKHR;
       instances :VkAccelerationStructureGeometryInstancesDataKHR;
} VkAccelerationStructureGeometryDataKHR;

type VkAccelerationStructureGeometryKHR = record
       sType :VkStructureType;
       pNext :P_void;
       geometryType :VkGeometryTypeKHR;
       geometry :VkAccelerationStructureGeometryDataKHR;
       flags :VkGeometryFlagsKHR;
     end;

type VkAccelerationStructureBuildGeometryInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       type :VkAccelerationStructureTypeKHR;
       flags :VkBuildAccelerationStructureFlagsKHR;
       mode :VkBuildAccelerationStructureModeKHR;
       srcAccelerationStructure :VkAccelerationStructureKHR;
       dstAccelerationStructure :VkAccelerationStructureKHR;
       geometryCount :uint32_t;
       pGeometries :P_VkAccelerationStructureGeometryKHR;
       ppGeometries :PP_VkAccelerationStructureGeometryKHR;
       scratchData :VkDeviceOrHostAddressKHR;
     end;

type VkAccelerationStructureCreateInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       createFlags :VkAccelerationStructureCreateFlagsKHR;
       buffer :VkBuffer;
       offset :VkDeviceSize;
       size :VkDeviceSize;
       type :VkAccelerationStructureTypeKHR;
       deviceAddress :VkDeviceAddress;
     end;

type VkWriteDescriptorSetAccelerationStructureKHR = record
       sType :VkStructureType;
       pNext :P_void;
       accelerationStructureCount :uint32_t;
       pAccelerationStructures :P_VkAccelerationStructureKHR;
     end;

type VkPhysicalDeviceAccelerationStructureFeaturesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       accelerationStructure :VkBool32;
       accelerationStructureCaptureReplay :VkBool32;
       accelerationStructureIndirectBuild :VkBool32;
       accelerationStructureHostCommands :VkBool32;
       descriptorBindingAccelerationStructureUpdateAfterBind :VkBool32;
     end;

type VkPhysicalDeviceAccelerationStructurePropertiesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       maxGeometryCount :uint64_t;
       maxInstanceCount :uint64_t;
       maxPrimitiveCount :uint64_t;
       maxPerStageDescriptorAccelerationStructures :uint32_t;
       maxPerStageDescriptorUpdateAfterBindAccelerationStructures :uint32_t;
       maxDescriptorSetAccelerationStructures :uint32_t;
       maxDescriptorSetUpdateAfterBindAccelerationStructures :uint32_t;
       minAccelerationStructureScratchOffsetAlignment :uint32_t;
     end;

type VkAccelerationStructureDeviceAddressInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       accelerationStructure :VkAccelerationStructureKHR;
     end;

type VkAccelerationStructureVersionInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       pVersionData :P_uint8_t;
     end;

type VkCopyAccelerationStructureToMemoryInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       src :VkAccelerationStructureKHR;
       dst :VkDeviceOrHostAddressKHR;
       mode :VkCopyAccelerationStructureModeKHR;
     end;

type VkCopyMemoryToAccelerationStructureInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       src :VkDeviceOrHostAddressConstKHR;
       dst :VkAccelerationStructureKHR;
       mode :VkCopyAccelerationStructureModeKHR;
     end;

type VkCopyAccelerationStructureInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       src :VkAccelerationStructureKHR;
       dst :VkAccelerationStructureKHR;
       mode :VkCopyAccelerationStructureModeKHR;
     end;

type VkAccelerationStructureBuildSizesInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       accelerationStructureSize :VkDeviceSize;
       updateScratchSize :VkDeviceSize;
       buildScratchSize :VkDeviceSize;
     end;

typedef VkResult (VKAPI_PTR *PFN_vkCreateAccelerationStructureKHR)(VkDevice                                           device, const P_VkAccelerationStructureCreateInfoKHR        pCreateInfo, const P_VkAllocationCallbacks       pAllocator, P_VkAccelerationStructureKHR                        pAccelerationStructure);
typedef void (VKAPI_PTR *PFN_vkDestroyAccelerationStructureKHR)(VkDevice device, VkAccelerationStructureKHR accelerationStructure, const P_VkAllocationCallbacks pAllocator);
typedef void (VKAPI_PTR *PFN_vkCmdBuildAccelerationStructuresKHR)(VkCommandBuffer                                    commandBuffer, uint32_t infoCount, const P_VkAccelerationStructureBuildGeometryInfoKHR pInfos, const P_VkAccelerationStructureBuildRangeInfoKHR P_const ppBuildRangeInfos);
typedef void (VKAPI_PTR *PFN_vkCmdBuildAccelerationStructuresIndirectKHR)(VkCommandBuffer                  commandBuffer, uint32_t                                           infoCount, const P_VkAccelerationStructureBuildGeometryInfoKHR pInfos, const P_VkDeviceAddress             pIndirectDeviceAddresses, const P_uint32_t                    pIndirectStrides, const P_uint32_t P_const             ppMaxPrimitiveCounts);
typedef VkResult (VKAPI_PTR *PFN_vkBuildAccelerationStructuresKHR)(VkDevice                                           device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const P_VkAccelerationStructureBuildGeometryInfoKHR pInfos, const P_VkAccelerationStructureBuildRangeInfoKHR P_const ppBuildRangeInfos);
typedef VkResult (VKAPI_PTR *PFN_vkCopyAccelerationStructureKHR)(VkDevice device, VkDeferredOperationKHR deferredOperation, const P_VkCopyAccelerationStructureInfoKHR pInfo);
typedef VkResult (VKAPI_PTR *PFN_vkCopyAccelerationStructureToMemoryKHR)(VkDevice device, VkDeferredOperationKHR deferredOperation, const P_VkCopyAccelerationStructureToMemoryInfoKHR pInfo);
typedef VkResult (VKAPI_PTR *PFN_vkCopyMemoryToAccelerationStructureKHR)(VkDevice device, VkDeferredOperationKHR deferredOperation, const P_VkCopyMemoryToAccelerationStructureInfoKHR pInfo);
typedef VkResult (VKAPI_PTR *PFN_vkWriteAccelerationStructuresPropertiesKHR)(VkDevice device, uint32_t accelerationStructureCount, const P_VkAccelerationStructureKHR pAccelerationStructures, VkQueryType  queryType, size_t       dataSize, P_void pData, size_t stride);
typedef void (VKAPI_PTR *PFN_vkCmdCopyAccelerationStructureKHR)(VkCommandBuffer commandBuffer, const P_VkCopyAccelerationStructureInfoKHR pInfo);
typedef void (VKAPI_PTR *PFN_vkCmdCopyAccelerationStructureToMemoryKHR)(VkCommandBuffer commandBuffer, const P_VkCopyAccelerationStructureToMemoryInfoKHR pInfo);
typedef void (VKAPI_PTR *PFN_vkCmdCopyMemoryToAccelerationStructureKHR)(VkCommandBuffer commandBuffer, const P_VkCopyMemoryToAccelerationStructureInfoKHR pInfo);
typedef VkDeviceAddress (VKAPI_PTR *PFN_vkGetAccelerationStructureDeviceAddressKHR)(VkDevice device, const P_VkAccelerationStructureDeviceAddressInfoKHR pInfo);
typedef void (VKAPI_PTR *PFN_vkCmdWriteAccelerationStructuresPropertiesKHR)(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const P_VkAccelerationStructureKHR pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery);
typedef void (VKAPI_PTR *PFN_vkGetDeviceAccelerationStructureCompatibilityKHR)(VkDevice device, const P_VkAccelerationStructureVersionInfoKHR pVersionInfo, P_VkAccelerationStructureCompatibilityKHR pCompatibility);
typedef void (VKAPI_PTR *PFN_vkGetAccelerationStructureBuildSizesKHR)(VkDevice                                            device, VkAccelerationStructureBuildTypeKHR                 buildType, const P_VkAccelerationStructureBuildGeometryInfoKHR  pBuildInfo, const P_uint32_t  pMaxPrimitiveCounts, P_VkAccelerationStructureBuildSizesInfoKHR           pSizeInfo);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR VkResult VKAPI_CALL vkCreateAccelerationStructureKHR(
    VkDevice                                    device,
    P_VkAccelerationStructureCreateInfoKHR      pCreateInfo,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkAccelerationStructureKHR                pAccelerationStructure);

VKAPI_ATTR void VKAPI_CALL vkDestroyAccelerationStructureKHR(
    VkDevice                                    device,
    VkAccelerationStructureKHR                  accelerationStructure,
    P_VkAllocationCallbacks                     pAllocator);

VKAPI_ATTR void VKAPI_CALL vkCmdBuildAccelerationStructuresKHR(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    infoCount,
    P_VkAccelerationStructureBuildGeometryInfoKHR      pInfos,
    PP_VkAccelerationStructureBuildRangeInfoKHR            ppBuildRangeInfos);

VKAPI_ATTR void VKAPI_CALL vkCmdBuildAccelerationStructuresIndirectKHR(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    infoCount,
    P_VkAccelerationStructureBuildGeometryInfoKHR      pInfos,
    P_VkDeviceAddress                           pIndirectDeviceAddresses,
    P_uint32_t                                  pIndirectStrides,
    PP_uint32_t                                 ppMaxPrimitiveCounts);

VKAPI_ATTR VkResult VKAPI_CALL vkBuildAccelerationStructuresKHR(
    VkDevice                                    device,
    VkDeferredOperationKHR                      deferredOperation,
    uint32_t                                    infoCount,
    P_VkAccelerationStructureBuildGeometryInfoKHR      pInfos,
    PP_VkAccelerationStructureBuildRangeInfoKHR            ppBuildRangeInfos);

VKAPI_ATTR VkResult VKAPI_CALL vkCopyAccelerationStructureKHR(
    VkDevice                                    device,
    VkDeferredOperationKHR                      deferredOperation,
    P_VkCopyAccelerationStructureInfoKHR        pInfo);

VKAPI_ATTR VkResult VKAPI_CALL vkCopyAccelerationStructureToMemoryKHR(
    VkDevice                                    device,
    VkDeferredOperationKHR                      deferredOperation,
    P_VkCopyAccelerationStructureToMemoryInfoKHR      pInfo);

VKAPI_ATTR VkResult VKAPI_CALL vkCopyMemoryToAccelerationStructureKHR(
    VkDevice                                    device,
    VkDeferredOperationKHR                      deferredOperation,
    P_VkCopyMemoryToAccelerationStructureInfoKHR      pInfo);

VKAPI_ATTR VkResult VKAPI_CALL vkWriteAccelerationStructuresPropertiesKHR(
    VkDevice                                    device,
    uint32_t                                    accelerationStructureCount,
    P_VkAccelerationStructureKHR                pAccelerationStructures,
    VkQueryType                                 queryType,
    size_t                                      dataSize,
    P_void                                      pData,
    size_t                                      stride);

VKAPI_ATTR void VKAPI_CALL vkCmdCopyAccelerationStructureKHR(
    VkCommandBuffer                             commandBuffer,
    P_VkCopyAccelerationStructureInfoKHR        pInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdCopyAccelerationStructureToMemoryKHR(
    VkCommandBuffer                             commandBuffer,
    P_VkCopyAccelerationStructureToMemoryInfoKHR      pInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdCopyMemoryToAccelerationStructureKHR(
    VkCommandBuffer                             commandBuffer,
    P_VkCopyMemoryToAccelerationStructureInfoKHR      pInfo);

VKAPI_ATTR VkDeviceAddress VKAPI_CALL vkGetAccelerationStructureDeviceAddressKHR(
    VkDevice                                    device,
    P_VkAccelerationStructureDeviceAddressInfoKHR      pInfo);

VKAPI_ATTR void VKAPI_CALL vkCmdWriteAccelerationStructuresPropertiesKHR(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    accelerationStructureCount,
    P_VkAccelerationStructureKHR                pAccelerationStructures,
    VkQueryType                                 queryType,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery);

VKAPI_ATTR void VKAPI_CALL vkGetDeviceAccelerationStructureCompatibilityKHR(
    VkDevice                                    device,
    P_VkAccelerationStructureVersionInfoKHR      pVersionInfo,
    P_VkAccelerationStructureCompatibilityKHR   pCompatibility);

VKAPI_ATTR void VKAPI_CALL vkGetAccelerationStructureBuildSizesKHR(
    VkDevice                                    device,
    VkAccelerationStructureBuildTypeKHR         buildType,
    P_VkAccelerationStructureBuildGeometryInfoKHR      pBuildInfo,
    P_uint32_t                                  pMaxPrimitiveCounts,
    P_VkAccelerationStructureBuildSizesInfoKHR  pSizeInfo);
{$ENDIF}


const VK_KHR_ray_tracing_pipeline = 1;
const VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION = 1;
const VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME = 'VK_KHR_ray_tracing_pipeline';

type VkShaderGroupShaderKHR = (
       VK_SHADER_GROUP_SHADER_GENERAL_KHR = 0,
       VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1,
       VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = 2,
       VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = 3,
       VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR = 0x7FFFFFFF
     );
type VkRayTracingShaderGroupCreateInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       type :VkRayTracingShaderGroupTypeKHR;
       generalShader :uint32_t;
       closestHitShader :uint32_t;
       anyHitShader :uint32_t;
       intersectionShader :uint32_t;
       pShaderGroupCaptureReplayHandle :P_void;
     end;

type VkRayTracingPipelineInterfaceCreateInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       maxPipelineRayPayloadSize :uint32_t;
       maxPipelineRayHitAttributeSize :uint32_t;
     end;

type VkRayTracingPipelineCreateInfoKHR = record
       sType :VkStructureType;
       pNext :P_void;
       flags :VkPipelineCreateFlags;
       stageCount :uint32_t;
       pStages :P_VkPipelineShaderStageCreateInfo;
       groupCount :uint32_t;
       pGroups :P_VkRayTracingShaderGroupCreateInfoKHR;
       maxPipelineRayRecursionDepth :uint32_t;
       pLibraryInfo :P_VkPipelineLibraryCreateInfoKHR;
       pLibraryInterface :P_VkRayTracingPipelineInterfaceCreateInfoKHR;
       pDynamicState :P_VkPipelineDynamicStateCreateInfo;
       layout :VkPipelineLayout;
       basePipelineHandle :VkPipeline;
       basePipelineIndex :int32_t;
     end;

type VkPhysicalDeviceRayTracingPipelineFeaturesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       rayTracingPipeline :VkBool32;
       rayTracingPipelineShaderGroupHandleCaptureReplay :VkBool32;
       rayTracingPipelineShaderGroupHandleCaptureReplayMixed :VkBool32;
       rayTracingPipelineTraceRaysIndirect :VkBool32;
       rayTraversalPrimitiveCulling :VkBool32;
     end;

type VkPhysicalDeviceRayTracingPipelinePropertiesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       shaderGroupHandleSize :uint32_t;
       maxRayRecursionDepth :uint32_t;
       maxShaderGroupStride :uint32_t;
       shaderGroupBaseAlignment :uint32_t;
       shaderGroupHandleCaptureReplaySize :uint32_t;
       maxRayDispatchInvocationCount :uint32_t;
       shaderGroupHandleAlignment :uint32_t;
       maxRayHitAttributeSize :uint32_t;
     end;

type VkStridedDeviceAddressRegionKHR = record
       deviceAddress :VkDeviceAddress;
       stride :VkDeviceSize;
       size :VkDeviceSize;
     end;

type VkTraceRaysIndirectCommandKHR = record
       width :uint32_t;
       height :uint32_t;
       depth :uint32_t;
     end;

typedef void (VKAPI_PTR *PFN_vkCmdTraceRaysKHR)(VkCommandBuffer commandBuffer, const P_VkStridedDeviceAddressRegionKHR pRaygenShaderBindingTable, const P_VkStridedDeviceAddressRegionKHR pMissShaderBindingTable, const P_VkStridedDeviceAddressRegionKHR pHitShaderBindingTable, const P_VkStridedDeviceAddressRegionKHR pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth);
typedef VkResult (VKAPI_PTR *PFN_vkCreateRayTracingPipelinesKHR)(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint32_t createInfoCount, const P_VkRayTracingPipelineCreateInfoKHR pCreateInfos, const P_VkAllocationCallbacks pAllocator, P_VkPipeline pPipelines);
typedef VkResult (VKAPI_PTR *PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR)(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, P_void pData);
typedef void (VKAPI_PTR *PFN_vkCmdTraceRaysIndirectKHR)(VkCommandBuffer commandBuffer, const P_VkStridedDeviceAddressRegionKHR pRaygenShaderBindingTable, const P_VkStridedDeviceAddressRegionKHR pMissShaderBindingTable, const P_VkStridedDeviceAddressRegionKHR pHitShaderBindingTable, const P_VkStridedDeviceAddressRegionKHR pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress);
typedef VkDeviceSize (VKAPI_PTR *PFN_vkGetRayTracingShaderGroupStackSizeKHR)(VkDevice device, VkPipeline pipeline, uint32_t group, VkShaderGroupShaderKHR groupShader);
typedef void (VKAPI_PTR *PFN_vkCmdSetRayTracingPipelineStackSizeKHR)(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize);

{$IFNDEF VK_NO_PROTOTYPES }
VKAPI_ATTR void VKAPI_CALL vkCmdTraceRaysKHR(
    VkCommandBuffer                             commandBuffer,
    P_VkStridedDeviceAddressRegionKHR           pRaygenShaderBindingTable,
    P_VkStridedDeviceAddressRegionKHR           pMissShaderBindingTable,
    P_VkStridedDeviceAddressRegionKHR           pHitShaderBindingTable,
    P_VkStridedDeviceAddressRegionKHR           pCallableShaderBindingTable,
    uint32_t                                    width,
    uint32_t                                    height,
    uint32_t                                    depth);

VKAPI_ATTR VkResult VKAPI_CALL vkCreateRayTracingPipelinesKHR(
    VkDevice                                    device,
    VkDeferredOperationKHR                      deferredOperation,
    VkPipelineCache                             pipelineCache,
    uint32_t                                    createInfoCount,
    P_VkRayTracingPipelineCreateInfoKHR         pCreateInfos,
    P_VkAllocationCallbacks                     pAllocator,
    P_VkPipeline                                pPipelines);

VKAPI_ATTR VkResult VKAPI_CALL vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(
    VkDevice                                    device,
    VkPipeline                                  pipeline,
    uint32_t                                    firstGroup,
    uint32_t                                    groupCount,
    size_t                                      dataSize,
    P_void                                      pData);

VKAPI_ATTR void VKAPI_CALL vkCmdTraceRaysIndirectKHR(
    VkCommandBuffer                             commandBuffer,
    P_VkStridedDeviceAddressRegionKHR           pRaygenShaderBindingTable,
    P_VkStridedDeviceAddressRegionKHR           pMissShaderBindingTable,
    P_VkStridedDeviceAddressRegionKHR           pHitShaderBindingTable,
    P_VkStridedDeviceAddressRegionKHR           pCallableShaderBindingTable,
    VkDeviceAddress                             indirectDeviceAddress);

VKAPI_ATTR VkDeviceSize VKAPI_CALL vkGetRayTracingShaderGroupStackSizeKHR(
    VkDevice                                    device,
    VkPipeline                                  pipeline,
    uint32_t                                    group,
    VkShaderGroupShaderKHR                      groupShader);

VKAPI_ATTR void VKAPI_CALL vkCmdSetRayTracingPipelineStackSizeKHR(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    pipelineStackSize);
{$ENDIF}


const VK_KHR_ray_query = 1;
const VK_KHR_RAY_QUERY_SPEC_VERSION     = 1;
const VK_KHR_RAY_QUERY_EXTENSION_NAME = 'VK_KHR_ray_query';
type VkPhysicalDeviceRayQueryFeaturesKHR = record
       sType :VkStructureType;
       pNext :P_void;
       rayQuery :VkBool32;
     end;


{$IFDEF __cplusplus }
}
{$ENDIF}

{$ENDIF}
